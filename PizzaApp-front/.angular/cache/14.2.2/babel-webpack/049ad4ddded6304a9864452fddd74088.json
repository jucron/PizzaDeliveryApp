{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jrenau01/IdeaProjects/PizzaDeliveryApp/PizzaApp-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ClientService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseFlowableClientUrl = 'http://localhost:8081/process/client/';\n    this.baseAccountUrl = 'http://localhost:8081/accounts/';\n    this.caseKey = 'pizzaOrderCase';\n  }\n\n  executeLogin(credentials) {\n    console.log('executeLogin worked');\n    this.http.post(this.baseAccountUrl + 'login', credentials).subscribe(response => {\n      if (response == null) {\n        alert(\"ERROR: account not found\"); //todo: handle username/password not correct (Security Impl)\n      } else {\n        localStorage.setItem('mainUsername', credentials.username);\n        localStorage.setItem('clientTask', response.message); // this.updateClientTask();\n\n        this.router.navigate(['/client/client-action'], {\n          skipLocationChange: true\n        });\n      }\n    }, catchError(this.handleError));\n  }\n\n  executeLogOUT(username) {\n    console.log('logOUT worked');\n    this.http.post(this.baseAccountUrl + 'logout', {\n      username: username\n    }).subscribe(() => {\n      localStorage.clear();\n    }, catchError(this.handleError));\n  }\n\n  isUserLogged() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('isUserLogged: worked');\n      return _this.http.get(_this.baseAccountUrl + localStorage.getItem('mainUsername') + \"/checkLogin\").subscribe(response => {\n        let loginStatus = response.message;\n        console.log(\"isUserLogged: LoginStatus from backend: \" + loginStatus);\n\n        if (loginStatus == 'not_logged') {\n          localStorage.clear();\n          return false;\n        } else {\n          // return this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n          return true;\n        }\n      });\n    })();\n  }\n\n  getClientTask() {\n    return localStorage.getItem('clientTask');\n  }\n\n  updateClientTask() {\n    this.http.get(this.baseFlowableClientUrl + localStorage.getItem('mainUser') + '/taskId').pipe(map(response => {\n      console.log('updateClientTask: taskId found: ' + response.message);\n      localStorage.setItem('clientTask', response.message);\n    }, catchError(this.handleError)));\n  }\n\n  startProcess() {\n    console.log('startProcess worked'); // @ts-ignore\n\n    this.http.post(this.baseFlowableClientUrl + this.caseKey + '/' + localStorage.getItem('mainUsername')).subscribe(() => {\n      this.router.navigate(['/client/order'], {\n        skipLocationChange: true\n      });\n    }, catchError(this.handleError));\n  }\n\n  createProcess(order) {\n    console.log('createProcess worked'); // order.account = { username: localStorage.getItem('mainUsername')};\n\n    console.log(\"Order to be created: \" + order);\n    this.http.post(this.baseFlowableClientUrl + localStorage.getItem('mainUsername'), order).subscribe(response => {\n      console.log('Order created with id:' + response.message);\n      localStorage.setItem('clientOrderId', response.message);\n      this.changeClientTaskStatusAndRedirect('task_1');\n    }, catchError(this.handleError));\n  }\n\n  changeClientTaskStatusAndRedirect(taskClaimed) {\n    console.log('changeClientStatus worked');\n    this.http.put(this.baseFlowableClientUrl, {\n      username: localStorage.getItem('mainUsername'),\n      taskStatus: taskClaimed\n    }).subscribe(() => {\n      this.router.navigate(['/client'], {\n        skipLocationChange: true\n      });\n    }, catchError(this.handleError));\n  }\n\n  getOrder() {\n    console.log('getOrder worked');\n    return this.http.get(this.baseFlowableClientUrl + localStorage.getItem('mainUser') + '/order').pipe(map(order => {\n      console.log('order found with status: ' + order.status);\n      return order;\n    }, catchError(this.handleError)));\n  }\n\n  handleError(error) {\n    return throwError('A problem happened, try again.');\n  }\n\n}\n\nClientService.ɵfac = function ClientService_Factory(t) {\n  return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientService,\n  factory: ClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","throwError","ClientService","constructor","http","router","executeLogin","credentials","console","log","post","baseAccountUrl","subscribe","response","alert","localStorage","setItem","username","message","navigate","skipLocationChange","handleError","executeLogOUT","clear","isUserLogged","get","getItem","loginStatus","getClientTask","updateClientTask","baseFlowableClientUrl","pipe","startProcess","caseKey","createProcess","order","changeClientTaskStatusAndRedirect","taskClaimed","put","taskStatus","getOrder","status","error","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jrenau01\\IdeaProjects\\PizzaDeliveryApp\\PizzaApp-front\\src\\app\\client\\client.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {catchError, map, of, Subscriber, Subscription, throwError} from \"rxjs\";\nimport {Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  private baseFlowableClientUrl = 'http://localhost:8081/process/client/';\n  private baseAccountUrl = 'http://localhost:8081/accounts/';\n  private caseKey = 'pizzaOrderCase';\n\n  constructor(private http: HttpClient,\n              private router: Router) { }\n\n  executeLogin(credentials: Account) {\n    console.log('executeLogin worked')\n    this.http.post(this.baseAccountUrl+'login', credentials)\n      .subscribe(\n        (response: Response) => {\n          if (response==null) {\n            alert(\"ERROR: account not found\")\n            //todo: handle username/password not correct (Security Impl)\n          } else {\n            localStorage.setItem('mainUsername',credentials.username)\n            localStorage.setItem('clientTask',response.message)\n            // this.updateClientTask();\n            this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n          }\n        },\n        catchError(this.handleError)\n        );\n  }\n\n  executeLogOUT(username: string) {\n    console.log('logOUT worked')\n    this.http.post(this.baseAccountUrl+'logout', {username: username})\n      .subscribe(\n        () => {\n            localStorage.clear();\n        },\n        catchError(this.handleError)\n      );\n  }\n\n  async isUserLogged() {\n    console.log('isUserLogged: worked');\n    return this.http.get<Response>(this.baseAccountUrl + localStorage.getItem('mainUsername') + \"/checkLogin\")\n      .subscribe(\n        (response: Response) => {\n          let loginStatus = response.message;\n          console.log(\"isUserLogged: LoginStatus from backend: \" + loginStatus)\n          if (loginStatus == 'not_logged') {\n            localStorage.clear();\n            return false;\n          } else {\n            // return this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n            return true;\n          }\n        });\n  }\n\n  getClientTask() {\n    return localStorage.getItem('clientTask');\n  }\n\n  updateClientTask() {\n    this.http.get<Response>(this.baseFlowableClientUrl+localStorage.getItem('mainUser')+'/taskId')\n      .pipe(\n        map(\n          (response: Response) => {\n            console.log('updateClientTask: taskId found: '+response.message)\n            localStorage.setItem('clientTask', response.message);\n          },\n          catchError(this.handleError)\n        ));\n  }\n\n  startProcess() {\n    console.log('startProcess worked');\n    // @ts-ignore\n    this.http.post(this.baseFlowableClientUrl+this.caseKey+'/'+localStorage.getItem('mainUsername'))\n      .subscribe(()=> {\n          this.router.navigate(['/client/order'], {skipLocationChange: true});\n        },\n        catchError(this.handleError)\n      );\n  }\n\n  createProcess(order) {\n    console.log('createProcess worked')\n    // order.account = { username: localStorage.getItem('mainUsername')};\n    console.log(\"Order to be created: \"+order)\n    this.http.post(this.baseFlowableClientUrl+localStorage.getItem('mainUsername'),order)\n      .subscribe((response: Response)=> {\n        console.log('Order created with id:' + response.message);\n        localStorage.setItem('clientOrderId',response.message)\n        this.changeClientTaskStatusAndRedirect('task_1');\n      },\n        catchError(this.handleError)\n      );\n  }\n\n  changeClientTaskStatusAndRedirect(taskClaimed: string) {\n    console.log('changeClientStatus worked')\n    this.http.put(this.baseFlowableClientUrl, {username: localStorage.getItem('mainUsername'), taskStatus: taskClaimed})\n      .subscribe( () => {\n        this.router.navigate(['/client'], {skipLocationChange: true});\n      },\n        catchError(this.handleError)\n      );\n  }\n\n  getOrder() {\n    console.log('getOrder worked')\n    return this.http.get<Order>(this.baseFlowableClientUrl+localStorage.getItem('mainUser')+'/order')\n      .pipe(\n        map(\n        (order: Order) => {\n          console.log('order found with status: '+order.status)\n          return order;\n        },\n        catchError(this.handleError)\n      ));\n  }\n\n  private handleError(error: HttpErrorResponse) {\n\n    return throwError('A problem happened, try again.');\n  }\n\n\n}\n\nexport interface Account {\n  username: string;\n  password: string;\n  orderId: string;\n  loginStatus: string;\n  taskStatus: string;\n}\ninterface Response {\n  message: string;\n  messageB: string;\n}\nexport interface Order {\n  id: string;\n  clientName: string;\n  pizzaFlavor: string;\n  address: string;\n  status: string;\n  orderTime: string;\n  paid: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}