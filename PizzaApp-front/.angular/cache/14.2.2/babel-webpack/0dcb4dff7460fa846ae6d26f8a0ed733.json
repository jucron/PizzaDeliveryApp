{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jrenau01/IdeaProjects/PizzaDeliveryApp/PizzaApp-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from \"rxjs\";\nlet OrderStatusComponent = class OrderStatusComponent {\n  constructor(clientService) {\n    this.clientService = clientService;\n  }\n\n  ngOnInit() {\n    this.assignOrder();\n  }\n\n  ngAfterViewInit() {\n    this.assignOrder();\n    this.updateOrder().then();\n  }\n\n  updateOrder() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('updateOrder accessed');\n      let count = 1;\n      let milliseconds = 20000;\n      let sub = interval(milliseconds).subscribe(() => {\n        console.log(milliseconds * count / 1000 + ' seconds passed: Running \\'updateOrder\\' again with count=' + count);\n        count++;\n\n        _this.assignOrder();\n\n        if (_this.order.status == 'finished') {\n          sub.unsubscribe();\n        }\n      });\n    })();\n  }\n\n  assignOrder() {\n    this.clientService.getOrder().subscribe(orderFetched => {\n      this.order = orderFetched;\n    });\n  }\n\n  onSubmit() {\n    this.clientService.changeClientTaskStatusAndRedirect('task_2');\n  }\n\n};\nOrderStatusComponent = __decorate([Component({\n  selector: 'app-order-status',\n  templateUrl: './order-status.component.html',\n  styleUrls: ['./order-status.component.scss']\n})], OrderStatusComponent);\nexport { OrderStatusComponent };","map":{"version":3,"mappings":";;AAAA,SAAuBA,SAAvB,QAA+C,eAA/C;AAEA,SAAQC,QAAR,QAAuB,MAAvB;AAOA,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAb,CAAiC;EAG/BC,YACUC,aADV,EACsC;IAA5B;EAAiC;;EAE3CC,QAAQ;IACN,KAAKC,WAAL;EACD;;EAEDC,eAAe;IACb,KAAKD,WAAL;IACA,KAAKE,WAAL,GAAmBC,IAAnB;EACD;;EAEKD,WAAW;IAAA;;IAAA;MACfE,OAAO,CAACC,GAAR,CAAY,sBAAZ;MACA,IAAIC,KAAK,GAAG,CAAZ;MACA,IAAIC,YAAY,GAAG,KAAnB;MACA,IAAIC,GAAG,GAAGb,QAAQ,CAACY,YAAD,CAAR,CAAuBE,SAAvB,CAAiC,MAAK;QAC9CL,OAAO,CAACC,GAAR,CAAYE,YAAY,GAACD,KAAb,GAAmB,IAAnB,GAAwB,4DAAxB,GAAqFA,KAAjG;QACAA,KAAK;;QACL,KAAI,CAACN,WAAL;;QACA,IAAI,KAAI,CAACU,KAAL,CAAWC,MAAX,IAAmB,UAAvB,EAAmC;UACjCH,GAAG,CAACI,WAAJ;QACD;MACF,CAPS,CAAV;IAJe;EAYhB;;EAEDZ,WAAW;IACT,KAAKF,aAAL,CAAmBe,QAAnB,GACGJ,SADH,CACcK,YAAD,IAAuB;MAChC,KAAKJ,KAAL,GAAaI,YAAb;IACD,CAHH;EAIH;;EAECC,QAAQ;IACN,KAAKjB,aAAL,CAAmBkB,iCAAnB,CAAqD,QAArD;EACD;;AAtC8B,CAAjC;AAAapB,oBAAoB,eALhCF,SAAS,CAAC;EACTuB,QAAQ,EAAE,kBADD;EAETC,WAAW,EAAE,+BAFJ;EAGTC,SAAS,EAAE,CAAC,+BAAD;AAHF,CAAD,CAKuB,GAApBvB,oBAAoB,CAApB;SAAAA","names":["Component","interval","OrderStatusComponent","constructor","clientService","ngOnInit","assignOrder","ngAfterViewInit","updateOrder","then","console","log","count","milliseconds","sub","subscribe","order","status","unsubscribe","getOrder","orderFetched","onSubmit","changeClientTaskStatusAndRedirect","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\jrenau01\\IdeaProjects\\PizzaDeliveryApp\\PizzaApp-front\\src\\app\\client\\order-status\\order-status.component.ts"],"sourcesContent":["import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ClientService, Order} from \"../client.service\";\nimport {interval} from \"rxjs\";\n\n@Component({\n  selector: 'app-order-status',\n  templateUrl: './order-status.component.html',\n  styleUrls: ['./order-status.component.scss']\n})\nexport class OrderStatusComponent implements OnInit, AfterViewInit {\n  order: Order;\n\n  constructor(\n    private clientService: ClientService) { }\n\n  ngOnInit(): void {\n    this.assignOrder();\n  }\n\n  ngAfterViewInit(): void {\n    this.assignOrder();\n    this.updateOrder().then();\n  }\n\n  async updateOrder() {\n    console.log('updateOrder accessed')\n    let count = 1;\n    let milliseconds = 20000;\n    let sub = interval(milliseconds).subscribe(() => {\n      console.log(milliseconds*count/1000+' seconds passed: Running \\'updateOrder\\' again with count='+count)\n      count++;\n      this.assignOrder();\n      if (this.order.status=='finished') {\n        sub.unsubscribe();\n      }\n    })\n  }\n\n  assignOrder () {\n    this.clientService.getOrder()\n      .subscribe((orderFetched: Order)=>{\n        this.order = orderFetched;\n      });\n}\n\n  onSubmit() { //todo: implement this in html\n    this.clientService.changeClientTaskStatusAndRedirect('task_2');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}