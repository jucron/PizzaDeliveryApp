{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../client.service\";\nimport * as i2 from \"@angular/router\";\nexport class AlreadyAuthIn {\n  constructor(clientService, router) {\n    this.clientService = clientService;\n    this.router = router;\n  }\n\n  canActivate(route, state) {\n    if (localStorage.getItem('mainUsername') == null) {\n      console.log('AlreadyAuthGuard: not logged in Angular, remaining in page');\n      return true;\n    }\n\n    return this.clientService.isUserLogged(); // const response = async () => {\n    //   await this.clientService.isUserLogged()\n    //     .then(r => logged = r);\n    // };\n    // return this.clientService.isUserLogged()\n    //   .subscribe(\n    //     (response: Response) => {\n    //       let loginStatus = response.message;\n    //       console.log(\"isUserLogged: LoginStatus from backend: \" + loginStatus)\n    //       if (loginStatus == 'not_logged') {\n    //         localStorage.clear();\n    //         console.log('AlreadyAuthGuard: user not logged, remaining in page');\n    //         return true;\n    //       } else {\n    //         console.log('AlreadyAuthGuard: user already logged, redirecting to client-action page');\n    //         return this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n    //       }\n    //     });\n    // setTimeout(() => {\n    //     console.log('AlreadyAuthGuard: checkLoginStatus is '+typeof logged+', waiting 1,5 seconds')\n    // }, 2000);\n    //\n    // console.log('AlreadyAuthGuard: logged is '+ logged)\n    // if (logged == true) {\n    //   console.log('AlreadyAuthGuard: user already logged, redirecting to client-action page');\n    //   return this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n    // } else {\n    //   console.log('AlreadyAuthGuard: user not logged, remaining in page');\n    //   return true;\n    // }\n  }\n\n}\n\nAlreadyAuthIn.ɵfac = function AlreadyAuthIn_Factory(t) {\n  return new (t || AlreadyAuthIn)(i0.ɵɵinject(i1.ClientService), i0.ɵɵinject(i2.Router));\n};\n\nAlreadyAuthIn.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AlreadyAuthIn,\n  factory: AlreadyAuthIn.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAQA,sBAAR,EAA6CC,MAA7C,EAAqDC,mBAArD,EAA0EC,OAA1E,QAAwF,iBAAxF;;;;AAOA,OAAM,MAAOC,aAAP,CAAoB;EACxBC,YAAoBC,aAApB,EACoBC,MADpB,EACkC;IADd;IACA;EAAoB;;EACxCC,WAAW,CACTC,KADS,EAETC,KAFS,EAEiB;IAE1B,IAAIC,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,IAA5C,EAAkD;MAChDC,OAAO,CAACC,GAAR,CAAY,4DAAZ;MACA,OAAO,IAAP;IACD;;IACD,OAAO,KAAKR,aAAL,CAAmBS,YAAnB,EAAP,CAN0B,CAQ1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;;AA5CuB;;;mBAAbX,eAAaY;AAAA;;;SAAbZ;EAAaa,SAAbb,aAAa;EAAAc,YAFZ","names":["ActivatedRouteSnapshot","Router","RouterStateSnapshot","UrlTree","AlreadyAuthIn","constructor","clientService","router","canActivate","route","state","localStorage","getItem","console","log","isUserLogged","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jrenau01\\IdeaProjects\\PizzaDeliveryApp\\PizzaApp-front\\src\\app\\client\\routerguards\\already-auth.guard.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {ClientService} from \"../client.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlreadyAuthIn implements CanActivate {\n  constructor(private clientService: ClientService,\n              private router: Router) {  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    if (localStorage.getItem('mainUsername') == null) {\n      console.log('AlreadyAuthGuard: not logged in Angular, remaining in page')\n      return true;\n    }\n    return this.clientService.isUserLogged();\n\n    // const response = async () => {\n    //   await this.clientService.isUserLogged()\n    //     .then(r => logged = r);\n    // };\n    // return this.clientService.isUserLogged()\n    //   .subscribe(\n    //     (response: Response) => {\n    //       let loginStatus = response.message;\n    //       console.log(\"isUserLogged: LoginStatus from backend: \" + loginStatus)\n    //       if (loginStatus == 'not_logged') {\n    //         localStorage.clear();\n    //         console.log('AlreadyAuthGuard: user not logged, remaining in page');\n    //         return true;\n    //       } else {\n    //         console.log('AlreadyAuthGuard: user already logged, redirecting to client-action page');\n    //         return this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n    //       }\n    //     });\n\n    // setTimeout(() => {\n    //     console.log('AlreadyAuthGuard: checkLoginStatus is '+typeof logged+', waiting 1,5 seconds')\n    // }, 2000);\n    //\n    // console.log('AlreadyAuthGuard: logged is '+ logged)\n    // if (logged == true) {\n    //   console.log('AlreadyAuthGuard: user already logged, redirecting to client-action page');\n    //   return this.router.navigate(['/client/client-action'], {skipLocationChange: true});\n    // } else {\n    //   console.log('AlreadyAuthGuard: user not logged, remaining in page');\n    //   return true;\n    // }\n  }\n}\ninterface Response {\n  message: string;\n  messageB: string;\n}\n"]},"metadata":{},"sourceType":"module"}