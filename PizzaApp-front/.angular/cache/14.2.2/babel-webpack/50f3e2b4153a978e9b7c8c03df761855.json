{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jrenau01/IdeaProjects/PizzaDeliveryApp/PizzaApp-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from \"rxjs\";\nimport { ClientOrderGuard } from \"../routerguards/client-order.guard\";\nlet OrderStatusComponent = class OrderStatusComponent {\n  constructor(clientService, router) {\n    this.clientService = clientService;\n    this.statusCode = ['confirmed', 'accepted', 'baking', 'pizzaReady', 'delivering', 'pizzaDelivered', 'finished'];\n    this.statusView = ['Confirmed', 'Accepted', 'Baking', 'Pizza Ready', 'Delivering', 'Delivered', 'Finished'];\n  }\n\n  ngOnInit() {\n    this.assignOrder();\n  }\n\n  ngAfterViewInit() {\n    this.assignOrder();\n    this.updateOrder().then();\n  }\n\n  updateOrder() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('updateOrder accessed');\n      let milliseconds = 20000;\n      let sub = interval(milliseconds).subscribe(() => {\n        if (_this.order.status == 'finished' || _this.clientService.getCurrentUrl() != 'client/order-status') {\n          console.log(\"updateOrder is not necessary, shutting down function\");\n          sub.unsubscribe();\n        } else {\n          console.log(milliseconds / 1000 + ' seconds passed: refreshing page again with new Order');\n\n          _this.clientService.redirectTo('client/order-status', true);\n        }\n      });\n    })();\n  }\n\n  assignOrder() {\n    this.order = ClientOrderGuard.order;\n  }\n\n  closeTask() {}\n\n  forwardStatus() {\n    this.order.status = this.statusCode[this.statusCode.indexOf(this.order.status) + 1];\n  }\n\n};\nOrderStatusComponent = __decorate([Component({\n  selector: 'app-order-status',\n  templateUrl: './order-status.component.html',\n  styleUrls: ['./order-status.component.scss']\n})], OrderStatusComponent);\nexport { OrderStatusComponent };","map":{"version":3,"mappings":";;AAAA,SAAuBA,SAAvB,QAA+C,eAA/C;AAEA,SAAQC,QAAR,QAAuB,MAAvB;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AAOA,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAb,CAAiC;EAK/BC,YACUC,aADV,EACwCC,MADxC,EACmD;IAAzC;IAJV,kBAAa,CAAC,WAAD,EAAa,UAAb,EAAwB,QAAxB,EAAiC,YAAjC,EAA8C,YAA9C,EAA2D,gBAA3D,EAA4E,UAA5E,CAAb;IACA,kBAAa,CAAC,WAAD,EAAa,UAAb,EAAwB,QAAxB,EAAiC,aAAjC,EAA+C,YAA/C,EAA4D,WAA5D,EAAwE,UAAxE,CAAb;EAGwD;;EAExDC,QAAQ;IACN,KAAKC,WAAL;EACD;;EAEDC,eAAe;IACb,KAAKD,WAAL;IACA,KAAKE,WAAL,GAAmBC,IAAnB;EACD;;EAEKD,WAAW;IAAA;;IAAA;MACfE,OAAO,CAACC,GAAR,CAAY,sBAAZ;MACA,IAAIC,YAAY,GAAG,KAAnB;MACA,IAAIC,GAAG,GAAGd,QAAQ,CAACa,YAAD,CAAR,CAAuBE,SAAvB,CAAiC,MAAK;QAC9C,IAAI,KAAI,CAACC,KAAL,CAAWC,MAAX,IAAmB,UAAnB,IAAiC,KAAI,CAACb,aAAL,CAAmBc,aAAnB,MAAsC,qBAA3E,EAAkG;UAChGP,OAAO,CAACC,GAAR,CAAY,sDAAZ;UACAE,GAAG,CAACK,WAAJ;QACD,CAHD,MAGO;UACLR,OAAO,CAACC,GAAR,CAAYC,YAAY,GAAC,IAAb,GAAkB,uDAA9B;;UACA,KAAI,CAACT,aAAL,CAAmBgB,UAAnB,CAA8B,qBAA9B,EAAoD,IAApD;QACD;MACF,CARS,CAAV;IAHe;EAYhB;;EAEDb,WAAW;IACT,KAAKS,KAAL,GAAaf,gBAAgB,CAACe,KAA9B;EACH;;EAECK,SAAS,IACR;;EAEDC,aAAa;IACX,KAAKN,KAAL,CAAWC,MAAX,GAAkB,KAAKM,UAAL,CAAgB,KAAKA,UAAL,CAAgBC,OAAhB,CAAwB,KAAKR,KAAL,CAAWC,MAAnC,IAA2C,CAA3D,CAAlB;EACD;;AAxC8B,CAAjC;AAAaf,oBAAoB,eALhCH,SAAS,CAAC;EACT0B,QAAQ,EAAE,kBADD;EAETC,WAAW,EAAE,+BAFJ;EAGTC,SAAS,EAAE,CAAC,+BAAD;AAHF,CAAD,CAKuB,GAApBzB,oBAAoB,CAApB;SAAAA","names":["Component","interval","ClientOrderGuard","OrderStatusComponent","constructor","clientService","router","ngOnInit","assignOrder","ngAfterViewInit","updateOrder","then","console","log","milliseconds","sub","subscribe","order","status","getCurrentUrl","unsubscribe","redirectTo","closeTask","forwardStatus","statusCode","indexOf","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\jrenau01\\IdeaProjects\\PizzaDeliveryApp\\PizzaApp-front\\src\\app\\client\\order-status\\order-status.component.ts"],"sourcesContent":["import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ClientService, Order} from \"../client.service\";\nimport {interval} from \"rxjs\";\nimport {ClientOrderGuard} from \"../routerguards/client-order.guard\";\n\n@Component({\n  selector: 'app-order-status',\n  templateUrl: './order-status.component.html',\n  styleUrls: ['./order-status.component.scss']\n})\nexport class OrderStatusComponent implements OnInit, AfterViewInit {\n  order: Order;\n  statusCode = ['confirmed','accepted','baking','pizzaReady','delivering','pizzaDelivered','finished'];\n  statusView = ['Confirmed','Accepted','Baking','Pizza Ready','Delivering','Delivered','Finished'];\n\n  constructor(\n    private clientService: ClientService, router: Rou) { }\n\n  ngOnInit(): void {\n    this.assignOrder();\n  }\n\n  ngAfterViewInit(): void {\n    this.assignOrder();\n    this.updateOrder().then();\n  }\n\n  async updateOrder() {\n    console.log('updateOrder accessed')\n    let milliseconds = 20000;\n    let sub = interval(milliseconds).subscribe(() => {\n      if (this.order.status=='finished' || this.clientService.getCurrentUrl() != 'client/order-status') {\n        console.log(\"updateOrder is not necessary, shutting down function\")\n        sub.unsubscribe();\n      } else {\n        console.log(milliseconds/1000+' seconds passed: refreshing page again with new Order')\n        this.clientService.redirectTo('client/order-status',true);\n      }\n    })\n  }\n\n  assignOrder () {\n    this.order = ClientOrderGuard.order;\n}\n\n  closeTask() {\n  }\n\n  forwardStatus() {\n    this.order.status=this.statusCode[this.statusCode.indexOf(this.order.status)+1]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}