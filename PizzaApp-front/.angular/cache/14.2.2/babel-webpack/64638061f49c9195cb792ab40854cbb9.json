{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jrenau01/IdeaProjects/PizzaDeliveryApp/PizzaApp-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ClientService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseFlowableClientUrl = 'http://localhost:8081/flowable/client/';\n    this.baseAccountUrl = 'http://localhost:8081/accounts/';\n    this.baseOrderUrl = 'http://localhost:8081/orders/';\n  }\n\n  processLogin(credentials) {\n    console.log('login worked');\n    this.http.post(this.baseAccountUrl + 'login', credentials).subscribe(response => {\n      if (response == null) {\n        alert(\"ERROR: account not found\");\n      } else {\n        localStorage.setItem('mainUsername', credentials.username);\n      } //todo: handle username not found (Security Impl)\n\n    }, catchError(this.handleError));\n  }\n\n  processLogOUT(username) {\n    console.log('logOUT worked');\n    this.http.post(this.baseAccountUrl + 'logout', {\n      username: username\n    }).subscribe(() => {\n      localStorage.clear();\n    }, catchError(this.handleError));\n  }\n\n  checkLoginStatus() {\n    console.log('checkLoginStatus worked');\n\n    if (localStorage.getItem('mainUsername') == null) {\n      console.log('not logged in Angular');\n      return false;\n    } else {\n      console.log('already logged in Angular');\n      return this.http.get(this.baseFlowableClientUrl + localStorage.getItem('mainUsername')).subscribe(response => {\n        let loginStatus = response.message;\n        let clientTask = response.messageB;\n        console.log(loginStatus + \" \" + clientTask);\n\n        if (loginStatus == 'not_logged') {\n          localStorage.clear();\n          return false;\n        } else {\n          localStorage.setItem('clientTask', clientTask);\n          return true;\n        }\n      });\n    }\n  }\n\n  getClientTask() {\n    return localStorage.getItem('clientTask');\n  }\n\n  createProcess(order) {\n    console.log('createProcess worked');\n    order.account = {\n      username: localStorage.getItem('mainUsername')\n    };\n    console.log(\"Order to be created: \" + order);\n    this.http.post(this.baseFlowableClientUrl, order).subscribe(() => {\n      console.log('Order created');\n      this.getOrder();\n    }, catchError(this.handleError));\n  }\n\n  changeClientTaskStatus(taskClaimed) {\n    console.log('changeClientStatus worked');\n    this.http.put(this.baseFlowableClientUrl, {\n      username: localStorage.getItem('mainUsername'),\n      taskStatus: taskClaimed\n    }).pipe(catchError(this.handleError));\n  }\n\n  getOrder() {\n    console.log('getOrder worked');\n    this.http.get(this.baseOrderUrl + localStorage.getItem('mainUsername') + '/username').subscribe(order => {\n      ClientService.order = order;\n    }, catchError(this.handleError));\n  }\n\n  refreshPage() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('refreshPage worked'); // setTimeout(function() {\n      //   console.log(\"refreshPage worked\")\n      // }, 3000);\n\n      _this.router.createUrlTree(['/client']);\n    })();\n  }\n\n  handleError(error) {\n    return throwError('A problem happened, try again.');\n  }\n\n}\n\nClientService.ɵfac = function ClientService_Factory(t) {\n  return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientService,\n  factory: ClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","ClientService","constructor","http","router","processLogin","credentials","console","log","post","baseAccountUrl","subscribe","response","alert","localStorage","setItem","username","handleError","processLogOUT","clear","checkLoginStatus","getItem","get","baseFlowableClientUrl","loginStatus","message","clientTask","messageB","getClientTask","createProcess","order","account","getOrder","changeClientTaskStatus","taskClaimed","put","taskStatus","pipe","baseOrderUrl","refreshPage","createUrlTree","error","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jrenau01\\IdeaProjects\\PizzaDeliveryApp\\PizzaApp-front\\src\\app\\client\\client.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {catchError, throwError} from \"rxjs\";\nimport {Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  static order: Order;\n  baseFlowableClientUrl = 'http://localhost:8081/flowable/client/';\n  baseAccountUrl = 'http://localhost:8081/accounts/';\n  baseOrderUrl = 'http://localhost:8081/orders/';\n\n  constructor(private http: HttpClient,\n              private router: Router) { }\n\n  processLogin(credentials: Account) {\n    console.log('login worked')\n    this.http.post(this.baseAccountUrl+'login', credentials)\n      .subscribe(\n        (response: Response) => {\n          if (response==null) {\n            alert(\"ERROR: account not found\")\n          } else {\n            localStorage.setItem('mainUsername',credentials.username)\n          }\n          //todo: handle username not found (Security Impl)\n        },\n        catchError(this.handleError)\n      );\n  }\n\n  processLogOUT(username: string) {\n    console.log('logOUT worked')\n    this.http.post(this.baseAccountUrl+'logout', {username: username})\n      .subscribe(\n        () => {\n            localStorage.clear();\n        },\n        catchError(this.handleError)\n      );\n  }\n\n  checkLoginStatus() {\n    console.log('checkLoginStatus worked');\n    if (localStorage.getItem('mainUsername')==null) {\n      console.log('not logged in Angular')\n      return false;\n    } else {\n      console.log('already logged in Angular')\n      return this.http.get<Response>(this.baseFlowableClientUrl+localStorage.getItem('mainUsername'))\n        .subscribe(\n          (response: Response) => {\n            let loginStatus = response.message;\n            let clientTask = response.messageB;\n            console.log(loginStatus+\" \"+clientTask)\n            if (loginStatus == 'not_logged') {\n              localStorage.clear();\n              return false;\n            } else {\n              localStorage.setItem('clientTask',clientTask);\n              return true;\n            }\n          })\n      }\n  }\n\n  getClientTask() {\n    return localStorage.getItem('clientTask');\n  }\n\n  createProcess(order) {\n    console.log('createProcess worked')\n    order.account = { username: localStorage.getItem('mainUsername')};\n    console.log(\"Order to be created: \"+order)\n    this.http.post(this.baseFlowableClientUrl,order)\n      .subscribe(()=> {\n        console.log('Order created');\n        this.getOrder();\n      },\n        catchError(this.handleError)\n      );\n  }\n\n  changeClientTaskStatus(taskClaimed: string) {\n    console.log('changeClientStatus worked')\n    this.http.put(this.baseFlowableClientUrl, {username: localStorage.getItem('mainUsername'), taskStatus: taskClaimed})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getOrder() {\n    console.log('getOrder worked')\n    this.http.get(this.baseOrderUrl+localStorage.getItem('mainUsername')+'/username')\n      .subscribe(\n        (order: Order) => {\n          ClientService.order = order;\n        },\n        catchError(this.handleError)\n      );\n  }\n\n  async refreshPage() {\n    console.log('refreshPage worked')\n    // setTimeout(function() {\n    //   console.log(\"refreshPage worked\")\n    // }, 3000);\n    this.router.createUrlTree(['/client']);\n  }\n\n  private handleError(error: HttpErrorResponse) {\n\n    return throwError('A problem happened, try again.');\n  }\n}\n\nexport interface Account {\n  username: string;\n  password: string;\n  orderId: string;\n  loginStatus: string;\n  taskStatus: string;\n}\ninterface Response {\n  message: string;\n  messageB: string;\n}\nexport interface Order {\n  id: string;\n  clientName: string;\n  pizzaFlavor: string;\n  address: string ;\n  status: string ;\n  orderTime: string ;\n  paid: boolean ;\n  account: Account;\n}\n"]},"metadata":{},"sourceType":"module"}