{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jrenau01/IdeaProjects/PizzaDeliveryApp/PizzaApp-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license Angular v14.2.2\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { getDebugNode as getDebugNode$1, RendererFactory2 as RendererFactory2$1, InjectionToken as InjectionToken$1, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, resolveForwardRef as resolveForwardRef$1, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID as LOCALE_ID$1, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, Injector as Injector$1, InjectFlags as InjectFlags$1, ɵsetAllowDuplicateNgModuleIdsForTest, ɵresetCompiledComponents, ɵsetUnknownElementStrictMode as ɵsetUnknownElementStrictMode$1, ɵsetUnknownPropertyStrictMode as ɵsetUnknownPropertyStrictMode$1, ɵgetUnknownElementStrictMode as ɵgetUnknownElementStrictMode$1, ɵgetUnknownPropertyStrictMode as ɵgetUnknownPropertyStrictMode$1, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport { Subject, Subscription } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\n\nfunction waitForAsync(fn) {\n  const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n\n  if (!_Zone) {\n    return function () {\n      return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js');\n    };\n  }\n\n  const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n\n  return function () {\n    return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/testing');\n  };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\n\n\nfunction async(fn) {\n  return waitForAsync(fn);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\n\n\nclass ComponentFixture {\n  constructor(componentRef, ngZone, _autoDetect) {\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    this._autoDetect = _autoDetect;\n    this._isStable = true;\n    this._isDestroyed = false;\n    this._resolve = null;\n    this._promise = null;\n    this._onUnstableSubscription = null;\n    this._onStableSubscription = null;\n    this._onMicrotaskEmptySubscription = null;\n    this._onErrorSubscription = null;\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = getDebugNode$1(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n\n    if (ngZone) {\n      // Create subscriptions outside the NgZone so that the callbacks run oustide\n      // of NgZone.\n      ngZone.runOutsideAngular(() => {\n        this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n          next: () => {\n            this._isStable = false;\n          }\n        });\n        this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n          next: () => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          }\n        });\n        this._onStableSubscription = ngZone.onStable.subscribe({\n          next: () => {\n            this._isStable = true; // Check whether there is a pending whenStable() completer to resolve.\n\n            if (this._promise !== null) {\n              // If so check whether there are no pending macrotasks before resolving.\n              // Do this check in the next tick so that ngZone gets a chance to update the state of\n              // pending macrotasks.\n              scheduleMicroTask(() => {\n                if (!ngZone.hasPendingMacrotasks) {\n                  if (this._promise !== null) {\n                    this._resolve(true);\n\n                    this._resolve = null;\n                    this._promise = null;\n                  }\n                }\n              });\n            }\n          }\n        });\n        this._onErrorSubscription = ngZone.onError.subscribe({\n          next: error => {\n            throw error;\n          }\n        });\n      });\n    }\n  }\n\n  _tick(checkNoChanges) {\n    this.changeDetectorRef.detectChanges();\n\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n\n\n  detectChanges(checkNoChanges = true) {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => {\n        this._tick(checkNoChanges);\n      });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n\n\n  checkNoChanges() {\n    this.changeDetectorRef.checkNoChanges();\n  }\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n\n\n  autoDetectChanges(autoDetect = true) {\n    if (this.ngZone == null) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n\n\n  isStable() {\n    return this._isStable && !this.ngZone.hasPendingMacrotasks;\n  }\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n\n\n  whenStable() {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => {\n        this._resolve = res;\n      });\n      return this._promise;\n    }\n  }\n\n  _getRenderer() {\n    if (this._renderer === undefined) {\n      this._renderer = this.componentRef.injector.get(RendererFactory2$1, null);\n    }\n\n    return this._renderer;\n  }\n  /**\n   * Get a promise that resolves when the ui state is stable following animations.\n   */\n\n\n  whenRenderingDone() {\n    const renderer = this._getRenderer();\n\n    if (renderer && renderer.whenRenderingDone) {\n      return renderer.whenRenderingDone();\n    }\n\n    return this.whenStable();\n  }\n  /**\n   * Trigger component destruction.\n   */\n\n\n  destroy() {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n\n      if (this._onUnstableSubscription != null) {\n        this._onUnstableSubscription.unsubscribe();\n\n        this._onUnstableSubscription = null;\n      }\n\n      if (this._onStableSubscription != null) {\n        this._onStableSubscription.unsubscribe();\n\n        this._onStableSubscription = null;\n      }\n\n      if (this._onMicrotaskEmptySubscription != null) {\n        this._onMicrotaskEmptySubscription.unsubscribe();\n\n        this._onMicrotaskEmptySubscription = null;\n      }\n\n      if (this._onErrorSubscription != null) {\n        this._onErrorSubscription.unsubscribe();\n\n        this._onErrorSubscription = null;\n      }\n\n      this._isDestroyed = true;\n    }\n  }\n\n}\n\nfunction scheduleMicroTask(fn) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\n\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\n\nfunction resetFakeAsyncZone() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the `fakeAsync` zone:\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception is thrown.\n *\n * Can be used to wrap `inject()` calls.\n *\n * @param fn The function that you want to wrap in the `fakeAysnc` zone.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n *\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\n * Any arguments passed when calling this returned function will be passed through to the `fn`\n * function in the parameters when it is called.\n *\n * @publicApi\n */\n\n\nfunction fakeAsync(fn) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @param millis The number of milliseconds to advance the virtual timer.\n * @param tickOptions The options to pass to the `tick()` function.\n *\n * @usageNotes\n *\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\n * which determines whether or not to invoke new macroTasks.\n *\n * If you provide a `tickOptions` object, but do not specify a\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\n * then `processNewMacroTasksSynchronously` defaults to true.\n *\n * If you omit the `tickOptions` parameter (`tick(100))`), then\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\n *\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * The following example includes a nested timeout (new macroTask), and\n * the `tickOptions` parameter is allowed to default. In this case,\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\n * function is executed on each tick.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n * ```\n *\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\n * set to false, so the nested timeout function is not invoked.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n * ```\n *\n *\n * @publicApi\n */\n\n\nfunction tick(millis = 0, tickOptions = {\n  processNewMacroTasksSynchronously: true\n}) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis, tickOptions);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flushes any pending microtasks and simulates the asynchronous passage of time for the timers in\n * the `fakeAsync` zone by\n * draining the macrotask queue until it is empty.\n *\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\n *     throwing an error.\n * @returns The simulated time elapsed, in milliseconds.\n *\n * @publicApi\n */\n\n\nfunction flush(maxTurns) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\n\n\nfunction discardPeriodicTasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\n\n\nfunction flushMicrotasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Whether test modules should be torn down by default. */\n\n\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/** Whether unknown elements in templates should throw by default. */\n\nconst THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;\n/** Whether unknown properties in templates should throw by default. */\n\nconst THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\n\nclass TestComponentRenderer {\n  insertRootElement(rootElementId) {}\n\n  removeAllRootElements() {}\n\n}\n/**\n * @publicApi\n */\n\n\nconst ComponentFixtureAutoDetect = new InjectionToken$1('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\n\nconst ComponentFixtureNoNgZone = new InjectionToken$1('ComponentFixtureNoNgZone');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\n\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = []; // Cache so that we don't fetch the same resource more than once.\n\n  const urlMap = new Map();\n\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach((component, type) => {\n    const promises = [];\n\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push(''); // pre-allocate array.\n\n      promises.push(cachedResourceResolve(styleUrl).then(style => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\n\nlet componentResourceResolutionQueue = new Map(); // Track when existing ɵcmp for a Type is waiting on resources.\n\nconst componentDefPendingResolution = new Set();\n\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\n\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\n\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);\n}\n\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\n\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\n\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\n\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\n\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\n\n\nconst _global$1 = /* @__PURE__ */(() => typeof globalThis !== 'undefined' && globalThis || typeof global !== 'undefined' && global || typeof window !== 'undefined' && window || typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self)();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar FactoryTarget;\n\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\n\nvar R3TemplateDependencyKind;\n\n(function (R3TemplateDependencyKind) {\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\n\nvar ViewEncapsulation$1;\n\n(function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction getCompilerFacade(request) {\n  const globalNg = _global$1['ng'];\n\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n\n    if (request.usage === 1\n    /* JitCompilerUsage.PartialDeclaration */\n    ) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n      return key;\n    }\n  }\n\n  throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\n\n\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\n\n\nfunction concatStringsWithSpace(before, after) {\n  return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst __forward_ref__ = getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\n\n\nfunction forwardRef(forwardRefFn) {\n  forwardRefFn.__forward_ref__ = forwardRef;\n\n  forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n\n  return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\n\n\nfunction resolveForwardRef(type) {\n  return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\n\n\nfunction isForwardRef(fn) {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\n\n\nfunction ɵɵdefineInjectable(opts) {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn || null,\n    factory: opts.factory,\n    value: undefined\n  };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\n\n\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\n\nfunction ɵɵdefineInjector(options) {\n  return {\n    providers: options.providers || [],\n    imports: options.imports || []\n  };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\n\n\nfunction getInjectableDef(type) {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\n\nfunction isInjectable(type) {\n  return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\n\n\nfunction getOwnDefinition(type, field) {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\n\n\nfunction getInheritedInjectableDef(type) {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n\n  if (def) {\n    const typeName = getTypeName(type); // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n    // ngDevMode &&\n\n    console.warn(`DEPRECATED: DI is instantiating a token \"${typeName}\" that inherits its @Injectable decorator but does not provide one itself.\\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the \"${typeName}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n/** Gets the name of a type, accounting for some cross-browser differences. */\n\n\nfunction getTypeName(type) {\n  // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers\n  // it'll always return the name of the function itself, no matter how many other functions it\n  // inherits from. On IE the function doesn't have its own `name` property, but it takes it from\n  // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most\n  // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around\n  // the issue by converting the function to a string and parsing its name out that way via a regex.\n  if (type.hasOwnProperty('name')) {\n    return type.name;\n  }\n\n  const match = ('' + type).match(/^function\\s*([^\\s(]+)/);\n  return match === null ? '' : match[1];\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\n\n\nfunction getInjectorDef(type) {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;\n}\n\nconst NG_PROV_DEF = getClosureSafeProperty({\n  ɵprov: getClosureSafeProperty\n});\nconst NG_INJ_DEF = getClosureSafeProperty({\n  ɵinj: getClosureSafeProperty\n}); // We need to keep these around so we can read off old defs if new defs are unavailable\n\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({\n  ngInjectableDef: getClosureSafeProperty\n});\nconst NG_INJECTOR_DEF = getClosureSafeProperty({\n  ngInjectorDef: getClosureSafeProperty\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Base URL for the error details page.\n *\n * Keep the files below in full sync:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\n\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.\n */\n\nclass RuntimeError extends Error {\n  constructor(code, message) {\n    super(formatRuntimeError(code, message));\n    this.code = code;\n  }\n\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\n\n\nfunction formatRuntimeError(code, message) {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  const fullCode = `NG0${Math.abs(code)}`;\n  let errorMessage = `${fullCode}${message ? ': ' + message.trim() : ''}`;\n\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n\n  return errorMessage;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\n\n\nconst Type = Function;\n\nfunction isType(v) {\n  return typeof v === 'function';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction assertNumber(actual, msg) {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\n\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\n\nfunction assertString(actual, msg) {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\n\nfunction assertFunction(actual, msg) {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\n\nfunction assertEqual(actual, expected, msg) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\n\nfunction assertNotEqual(actual, expected, msg) {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\n\nfunction assertSame(actual, expected, msg) {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\n\nfunction assertNotSame(actual, expected, msg) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\n\nfunction assertLessThan(actual, expected, msg) {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\n\nfunction assertLessThanOrEqual(actual, expected, msg) {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\n\nfunction assertGreaterThan(actual, expected, msg) {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\n\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\n\nfunction assertNotDefined(actual, msg) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\n\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\n\nfunction throwError(msg, actual, expected, comparison) {\n  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\n\nfunction assertDomNode(node) {\n  // If we're in a worker, `Node` will not be defined.\n  if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\n\nfunction assertIndexInRange(arr, index) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\n\nfunction assertOneOf(value, ...validValues) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\n\n\nfunction addAllToArray(items, arr) {\n  for (let i = 0; i < items.length; i++) {\n    arr.push(items[i]);\n  }\n}\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\n\n\nfunction arrayEquals(a, b, identityAccessor) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA);\n      valueB = identityAccessor(valueB);\n    }\n\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Flattens an array.\n */\n\n\nfunction flatten$1(list, dst) {\n  if (dst === undefined) dst = list;\n\n  for (let i = 0; i < list.length; i++) {\n    let item = list[i];\n\n    if (Array.isArray(item)) {\n      // we need to inline it.\n      if (dst === list) {\n        // Our assumption that the list was already flat was wrong and\n        // we need to clone flat since we need to write to it.\n        dst = list.slice(0, i);\n      }\n\n      flatten$1(item, dst);\n    } else if (dst !== list) {\n      dst.push(item);\n    }\n  }\n\n  return dst;\n}\n\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\n\nfunction newArray(size, value) {\n  const list = [];\n\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n\n  return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\n\n\nfunction arraySplice(array, index, count) {\n  const length = array.length - count;\n\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\n\n\nfunction arrayInsert(array, index, value) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n\n  array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\n\n\nfunction arrayInsert2(array, index, value1, value2) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n/**\n * Insert a `value` into an `array` so that the array remains sorted.\n *\n * NOTE:\n * - Duplicates are not allowed, and are ignored.\n * - This uses binary search algorithm for fast inserts.\n *\n * @param array A sorted array to insert into.\n * @param value The value to insert.\n * @returns index of the inserted value.\n */\n\n\nfunction arrayInsertSorted(array, value) {\n  let index = arrayIndexOfSorted(array, value);\n\n  if (index < 0) {\n    // if we did not find it insert it.\n    index = ~index;\n    arrayInsert(array, index, value);\n  }\n\n  return index;\n}\n/**\n * Remove `value` from a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to remove from.\n * @param value The value to remove.\n * @returns index of the removed value.\n *   - positive index if value found and removed.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     inserted)\n */\n\n\nfunction arrayRemoveSorted(array, value) {\n  const index = arrayIndexOfSorted(array, value);\n\n  if (index >= 0) {\n    arraySplice(array, index, 1);\n  }\n\n  return index;\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\n\n\nfunction arrayIndexOfSorted(array, value) {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\n\n\nfunction keyValueArraySet(keyValueArray, key, value) {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n\n  return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\n\n\nfunction keyValueArrayGet(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1];\n  }\n\n  return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\n\n\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n  return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\n\n\nfunction keyValueArrayDelete(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n\n  return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\n\n\nfunction _arrayIndexOfSorted(array, value, shift) {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n\n  while (end !== start) {\n    const middle = start + (end - start >> 1); // find the middle.\n\n    const current = array[middle << shift];\n\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n\n  return ~(end << shift);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\n\n\nfunction noSideEffects(fn) {\n  return {\n    toString: fn\n  }.toString();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\n\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function DecoratorFactory(...args) {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this;\n      }\n\n      const annotationInstance = new DecoratorFactory(...args);\n      return function TypeDecorator(cls) {\n        if (typeFn) typeFn(cls, ...args); // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n          value: []\n        })[ANNOTATIONS];\n        annotations.push(annotationInstance);\n        if (additionalProcessing) additionalProcessing(cls);\n        return cls;\n      };\n    }\n\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n  });\n}\n\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      const values = props(...args);\n\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nfunction makeParamDecorator(name, props, parentClass) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function ParamDecoratorFactory(...args) {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n\n      const annotationInstance = new ParamDecoratorFactory(...args);\n      ParamDecorator.annotation = annotationInstance;\n      return ParamDecorator;\n\n      function ParamDecorator(cls, unusedKey, index) {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n          value: []\n        })[PARAMETERS]; // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\n\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function PropDecoratorFactory(...args) {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n\n      const decoratorInstance = new PropDecoratorFactory(...args);\n\n      function PropDecorator(target, name) {\n        const constructor = target.constructor; // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n          value: {}\n        })[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n\n      return PropDecorator;\n    }\n\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\n\n\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\n\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\n\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\n\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\n\nfunction isDelegateCtor(typeStr) {\n  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);\n}\n\nclass ReflectionCapabilities {\n  constructor(reflect) {\n    this._reflect = reflect || _global$1['Reflect'];\n  }\n\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /** @internal */\n\n\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    let result;\n\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n\n    return result;\n  }\n\n  _ownParameters(type, parentCtor) {\n    const typeStr = type.toString(); // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    } // Prefer the direct API.\n\n\n    if (type.parameters && type.parameters !== parentCtor.parameters) {\n      return type.parameters;\n    } // API of tsickle for lowering decorators to properties on the class.\n\n\n    const tsickleCtorParams = type.ctorParameters;\n\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    } // API for metadata created by invoking the decorators.\n\n\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    } // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n\n\n    return newArray(type.length);\n  }\n\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n\n    const parentCtor = getParentCtor(type);\n\n    let parameters = this._ownParameters(type, parentCtor);\n\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n\n    return parameters || [];\n  }\n\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n      let annotations = typeOrFunc.annotations;\n\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n\n      return annotations;\n    } // API of tsickle for lowering decorators to properties on the class.\n\n\n    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n    } // API for metadata created by invoking the decorators.\n\n\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return typeOrFunc[ANNOTATIONS];\n    }\n\n    return null;\n  }\n\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = typeOrFunc.propMetadata;\n\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n\n      return propMetadata;\n    } // API of tsickle for lowering decorators to properties on the class.\n\n\n    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = typeOrFunc.propDecorators;\n      const propMetadata = {};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    } // API for metadata created by invoking the decorators.\n\n\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return typeOrFunc[PROP_METADATA];\n    }\n\n    return null;\n  }\n\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata = {};\n\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        const decorators = [];\n\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n\n    return propMetadata;\n  }\n\n  ownPropMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n\n}\n\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n\nfunction getParentCtor(ctor) {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null; // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n\n  return parentCtor || Object;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction ngDevModeResetPerfCounters() {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters = {\n    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n    firstCreatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererAppendChild: 0,\n    rendererInsertBefore: 0,\n    rendererCreateComment: 0\n  }; // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  _global$1['ngDevMode'] = allowNgDevModeTrue && newCounters;\n  return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\n\n\nfunction initNgDevMode() {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object') {\n      ngDevModeResetPerfCounters();\n    }\n\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n\n  return false;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\n\n\nfunction renderStringify(value) {\n  if (typeof value === 'string') return value;\n  if (value == null) return ''; // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n\n  return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\n\n\nfunction stringifyForError(value) {\n  if (typeof value === 'function') return value.name || value.toString();\n\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n\n  return renderStringify(value);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Called when directives inject each other (creating a circular dependency) */\n\n\nfunction throwCyclicDependencyError(token, path) {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(-200\n  /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */\n  , `Circular dependency in DI detected for ${token}${depPath}`);\n}\n\nfunction throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\n\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n  } else if (provider.ɵproviders) {\n    throw new RuntimeError(207\n    /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */\n    , `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n/** Throws an error when a token is not found in DI. */\n\n\nfunction throwProviderNotFoundError(token, injectorName) {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(-201\n  /* RuntimeErrorCode.PROVIDER_NOT_FOUND */\n  , ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for `inject` instead.\n */\n\n\nvar InjectFlags;\n\n(function (InjectFlags) {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n\n  /** Check self and check parent injector if needed */\n  InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n\n  InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n  /** Don't ascend to ancestors of the node requesting injection. */\n\n  InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n  /** Skip the node that is requesting injection. */\n\n  InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n  /** Inject `defaultValue` instead if token not found. */\n\n  InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\n\n\nlet _injectImplementation;\n\nfunction getInjectImplementation() {\n  return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\n\n\nfunction setInjectImplementation(impl) {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\n\n\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  const injectableDef = getInjectableDef(token);\n\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\n\n\nfunction assertInjectImplementationNotEqual(fn) {\n  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\n\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\n\nlet _currentInjector = undefined;\n\nfunction setCurrentInjector(injector) {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n  if (_currentInjector === undefined) {\n    throw new RuntimeError(-203\n    /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */\n    , ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`EnvironmentInjector#runInContext\\`.`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵinvalidFactoryDep(index) {\n  throw new RuntimeError(202\n  /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */\n  , ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported during instantiation of a dependency by the DI system. It can be used\n * during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\n\n\nfunction inject$1(token, flags = InjectFlags.Default) {\n  if (typeof flags !== 'number') {\n    // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n    // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n    // `InjectOptions` to `InjectFlags`.\n    flags = 0\n    /* InternalInjectFlags.Default */\n    | ( // comment to force a line break in the formatter\n    flags.optional && 8\n    /* InternalInjectFlags.Optional */\n    ) | (flags.host && 1\n    /* InternalInjectFlags.Host */\n    ) | (flags.self && 2\n    /* InternalInjectFlags.Self */\n    ) | (flags.skipSelf && 4\n    /* InternalInjectFlags.SkipSelf */\n    );\n  }\n\n  return ɵɵinject(token, flags);\n}\n\nfunction injectArgs(types) {\n  const args = [];\n\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(900\n        /* RuntimeErrorCode.INVALID_DIFFER_INPUT */\n        , ngDevMode && 'Arguments array must have arguments.');\n      }\n\n      let type = undefined;\n      let flags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === -1\n          /* DecoratorFlags.Inject */\n          ) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(ɵɵinject(type, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n\n  return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\n\n\nfunction attachInjectFlag(decorator, flag) {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\n\n\nfunction getInjectFlag(token) {\n  return token[DI_DECORATOR_FLAG];\n}\n\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n  const tokenPath = e[NG_TEMP_TOKEN_PATH];\n\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\n\nfunction formatError(text, obj, injectorErrorName, source = null) {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = [];\n\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n\n    context = `{${parts.join(', ')}}`;\n  }\n\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\n\nconst Inject = attachInjectFlag( // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', token => ({\n  token\n})), -1\n/* DecoratorFlags.Inject */\n);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\nconst Optional = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8\n/* InternalInjectFlags.Optional */\n);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\nconst Self = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2\n/* InternalInjectFlags.Self */\n);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\nconst SkipSelf = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4\n/* InternalInjectFlags.SkipSelf */\n);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\nconst Host = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1\n/* InternalInjectFlags.Host */\n);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\n\nvar ChangeDetectionStrategy;\n\n(function (ChangeDetectionStrategy) {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\n\n\nvar ChangeDetectorStatus;\n\n(function (ChangeDetectorStatus) {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n\n  ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n  /**\n   * A state in which change detection continues automatically until explicitly\n   * deactivated.\n   */\n\n  ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n\n  ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n\n  ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n\n  ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\n\n\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n  return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\n\n\nvar ViewEncapsulation;\n\n(function (ViewEncapsulation) {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\n\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = []; // freezing the values prevents any code from accidentally inserting new values in\n\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ); // tslint:disable-next-line:no-toplevel-property-access\n\n  Object.freeze(EMPTY_ARRAY);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst NG_COMP_DEF = getClosureSafeProperty({\n  ɵcmp: getClosureSafeProperty\n});\nconst NG_DIR_DEF = getClosureSafeProperty({\n  ɵdir: getClosureSafeProperty\n});\nconst NG_PIPE_DEF = getClosureSafeProperty({\n  ɵpipe: getClosureSafeProperty\n});\nconst NG_MOD_DEF = getClosureSafeProperty({\n  ɵmod: getClosureSafeProperty\n});\nconst NG_FACTORY_DEF = getClosureSafeProperty({\n  ɵfac: getClosureSafeProperty\n});\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n\nconst NG_ELEMENT_ID = getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for component definitions. */\n\nlet componentDefCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\n\nfunction ɵɵdefineComponent(componentDefinition) {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    const type = componentDefinition.type;\n    const standalone = componentDefinition.standalone === true;\n    const declaredInputs = {};\n    const def = {\n      type: type,\n      providersResolver: null,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      factory: null,\n      template: componentDefinition.template || null,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      hostBindings: componentDefinition.hostBindings || null,\n      hostVars: componentDefinition.hostVars || 0,\n      hostAttrs: componentDefinition.hostAttrs || null,\n      contentQueries: componentDefinition.contentQueries || null,\n      declaredInputs: declaredInputs,\n      inputs: null,\n      outputs: null,\n      exportAs: componentDefinition.exportAs || null,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null,\n      pipeDefs: null,\n      standalone,\n      dependencies: standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: null,\n      selectors: componentDefinition.selectors || EMPTY_ARRAY,\n      viewQuery: componentDefinition.viewQuery || null,\n      features: componentDefinition.features || null,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      id: `c${componentDefCount++}`,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      setInput: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null\n    };\n    const dependencies = componentDefinition.dependencies;\n    const feature = componentDefinition.features;\n    def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(fn => fn(def));\n    def.directiveDefs = dependencies ? () => (typeof dependencies === 'function' ? dependencies() : dependencies).map(extractDirectiveDef).filter(nonNull) : null;\n    def.pipeDefs = dependencies ? () => (typeof dependencies === 'function' ? dependencies() : dependencies).map(getPipeDef$1).filter(nonNull) : null;\n    return def;\n  });\n}\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n  const def = type.ɵcmp;\n\n  def.directiveDefs = () => (typeof directives === 'function' ? directives() : directives).map(extractDirectiveDef);\n\n  def.pipeDefs = () => (typeof pipes === 'function' ? pipes() : pipes).map(getPipeDef$1);\n}\n\nfunction extractDirectiveDef(type) {\n  return getComponentDef$1(type) || getDirectiveDef(type);\n}\n\nfunction nonNull(value) {\n  return value !== null;\n}\n/**\n * @codeGenApi\n */\n\n\nfunction ɵɵdefineNgModule(def) {\n  return noSideEffects(() => {\n    const res = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null\n    };\n    return res;\n  });\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsetNgModuleScope(type, scope) {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n  });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\n\n\nfunction invertObject(obj, secondary) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName = obj[minifiedKey];\n      let declaredName = publicName;\n\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n\n      newLookup[publicName] = minifiedKey;\n\n      if (secondary) {\n        secondary[publicName] = declaredName;\n      }\n    }\n  }\n\n  return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\n\n\nconst ɵɵdefineDirective = ɵɵdefineComponent;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\n\nfunction ɵɵdefinePipe(pipeDef) {\n  return {\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone === true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\n\n\nfunction getComponentDef$1(type) {\n  return type[NG_COMP_DEF] || null;\n}\n\nfunction getDirectiveDef(type) {\n  return type[NG_DIR_DEF] || null;\n}\n\nfunction getPipeDef$1(type) {\n  return type[NG_PIPE_DEF] || null;\n}\n\nfunction isStandalone(type) {\n  const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n  return def !== null ? def.standalone : false;\n}\n\nfunction getNgModuleDef(type, throwNotFound) {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n\n  return ngModuleDef;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n\n\nconst HOST = 0;\nconst TVIEW = 1;\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nconst T_HOST = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst RENDERER_FACTORY = 10;\nconst RENDERER = 11;\nconst SANITIZER = 12;\nconst CHILD_HEAD = 13;\nconst CHILD_TAIL = 14; // FIXME(misko): Investigate if the three declarations aren't all same thing.\n\nconst DECLARATION_VIEW = 15;\nconst DECLARATION_COMPONENT_VIEW = 16;\nconst DECLARATION_LCONTAINER = 17;\nconst PREORDER_HOOK_FLAGS = 18;\nconst QUERIES = 19;\nconst ID = 20;\nconst EMBEDDED_VIEW_INJECTOR = 21;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\n\nconst HEADER_OFFSET = 22;\n/**\n * Converts `TViewType` into human readable text.\n * Make sure this matches with `TViewType`\n */\n\nconst TViewTypeAsString = ['Root', 'Component', 'Embedded' // 2\n]; // Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\nconst unusedValueExportToPlacateAjd$8 = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\n\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\n\nconst HAS_TRANSPLANTED_VIEWS = 2; // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\n\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\n\nconst CONTAINER_HEADER_OFFSET = 10; // Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\nconst unusedValueExportToPlacateAjd$7 = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\n\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\n\n\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[TYPE] === true;\n}\n\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 8\n  /* TNodeFlags.hasContentQuery */\n  ) !== 0;\n}\n\nfunction isComponentHost(tNode) {\n  return (tNode.flags & 2\n  /* TNodeFlags.isComponentHost */\n  ) === 2\n  /* TNodeFlags.isComponentHost */\n  ;\n}\n\nfunction isDirectiveHost(tNode) {\n  return (tNode.flags & 1\n  /* TNodeFlags.isDirectiveHost */\n  ) === 1\n  /* TNodeFlags.isDirectiveHost */\n  ;\n}\n\nfunction isComponentDef(def) {\n  return def.template !== null;\n}\n\nfunction isRootView(target) {\n  return (target[FLAGS] & 256\n  /* LViewFlags.IsRoot */\n  ) !== 0;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\n\n\nfunction assertTNodeForLView(tNode, lView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\n\nfunction assertTNodeForTView(tNode, tView) {\n  assertTNode(tNode);\n  tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');\n}\n\nfunction assertTNode(tNode) {\n  assertDefined(tNode, 'TNode must be defined');\n\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\n\nfunction assertTIcu(tIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\n\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n  if (!getComponentDef$1(actual)) {\n    throwError(msg);\n  }\n}\n\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\n\nfunction assertCurrentTNodeIsParent(isParent) {\n  assertEqual(isParent, true, 'currentTNode should be a parent');\n}\n\nfunction assertHasParent(tNode) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\n\nfunction assertDataNext(lView, index, arr) {\n  if (arr == null) arr = lView;\n  assertEqual(arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);\n}\n\nfunction assertLContainer(value) {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\n\nfunction assertLViewOrUndefined(value) {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\n\nfunction assertLView(value) {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\n\nfunction assertFirstCreatePass(tView, errMessage) {\n  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\n\nfunction assertFirstUpdatePass(tView, errMessage) {\n  assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\n\n\nfunction assertDirectiveDef(obj) {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\n\nfunction assertIndexInDeclRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\n\nfunction assertIndexInVarsRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);\n}\n\nfunction assertIndexInExpandoRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\n\nfunction assertBetween(lower, upper, index) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\n\nfunction assertProjectionSlots(lView, errMessage) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\n\nfunction assertParentView(lView, errMessage) {\n  assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\n\n\nfunction assertNodeInjector(lView, injectorIndex) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + 8\n  /* NodeInjectorOffset.PARENT */\n  );\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 8\n  /* NodeInjectorOffset.PARENT */\n  ], 'injectorIndex should point to parent injector');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction getFactoryDef(type, throwNotFound) {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\n\n\nclass SimpleChange {\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n\n\n  isFirstChange() {\n    return this.firstChange;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵNgOnChangesFeature() {\n  return NgOnChangesFeatureImpl;\n}\n\nfunction NgOnChangesFeatureImpl(definition) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n} // This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\n\n\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\n\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n\n  if (current) {\n    const previous = simpleChangesStore.previous;\n\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n\n    simpleChangesStore.current = null;\n    this.ngOnChanges(current);\n  }\n}\n\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {\n    previous: EMPTY_OBJ,\n    current: null\n  });\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const declaredName = this.declaredInputs[publicName];\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n  instance[privateName] = value;\n}\n\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n\nfunction getSimpleChangesStore(instance) {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\n\nfunction setSimpleChangesStore(instance, store) {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\n\nconst setProfiler = profiler => {\n  profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\n\n\nconst profiler = function (event, instance, hookOrListener) {\n  if (profilerCallback != null\n  /* both `null` and `undefined` */\n  ) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst SVG_NAMESPACE = 'svg';\nconst SVG_NAMESPACE_URI = 'http://www.w3.org/2000/svg';\nconst MATH_ML_NAMESPACE = 'math';\nconst MATH_ML_NAMESPACE_URI = 'http://www.w3.org/1998/MathML/';\n\nfunction getNamespaceUri(namespace) {\n  const name = namespace.toLowerCase();\n  return name === SVG_NAMESPACE ? SVG_NAMESPACE_URI : name === MATH_ML_NAMESPACE ? MATH_ML_NAMESPACE_URI : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\n\n\nfunction unwrapRNode(value) {\n  while (Array.isArray(value)) {\n    value = value[HOST];\n  }\n\n  return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\n\n\nfunction unwrapLView(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value;\n    value = value[HOST];\n  }\n\n  return null;\n}\n/**\n * Returns `LContainer` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\n\n\nfunction unwrapLContainer(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLContainer()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (value[TYPE] === true) return value;\n    value = value[HOST];\n  }\n\n  return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\n\n\nfunction getNativeByIndex(index, lView) {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\n\n\nfunction getNativeByTNode(tNode, lView) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\n\n\nfunction getNativeByTNodeOrNull(tNode, lView) {\n  const index = tNode === null ? -1 : tNode.index;\n\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const node = unwrapRNode(lView[index]);\n    return node;\n  }\n\n  return null;\n} // fixme(misko): The return Type should be `TNode|null`\n\n\nfunction getTNode(tView, index) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index];\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\n\n\nfunction load(view, index) {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n/** Checks whether a given view is in creation mode */\n\n\nfunction isCreationMode(view) {\n  return (view[FLAGS] & 4\n  /* LViewFlags.CreationMode */\n  ) === 4\n  /* LViewFlags.CreationMode */\n  ;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\n\n\nfunction viewAttachedToChangeDetector(view) {\n  return (view[FLAGS] & 64\n  /* LViewFlags.Attached */\n  ) === 64\n  /* LViewFlags.Attached */\n  ;\n}\n/** Returns a boolean for whether the view is attached to a container. */\n\n\nfunction viewAttachedToContainer(view) {\n  return isLContainer(view[PARENT]);\n}\n\nfunction getConstant(consts, index) {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts, index);\n  return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\n\n\nfunction resetPreOrderHookFlags(lView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\n\n\nfunction updateTransplantedViewCount(lContainer, amount) {\n  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n  let viewOrContainer = lContainer;\n  let parent = lContainer[PARENT];\n\n  while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {\n    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    viewOrContainer = parent;\n    parent = parent[PARENT];\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst instructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\n\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\n\nfunction specOnlyIsInstructionStateEmpty() {\n  return instructionState.lFrame.parent === null;\n}\n\nfunction getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\n\nfunction increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\n\nfunction decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\n\nfunction getBindingsEnabled() {\n  return instructionState.bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵenableBindings() {\n  instructionState.bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵdisableBindings() {\n  instructionState.bindingsEnabled = false;\n}\n/**\n * Return the current `LView`.\n */\n\n\nfunction getLView() {\n  return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\n\n\nfunction getTView() {\n  return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵrestoreView(viewToRestore) {\n  instructionState.lFrame.contextLView = viewToRestore;\n  return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵresetView(value) {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\n\nfunction getCurrentTNode() {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n\n  while (currentTNode !== null && currentTNode.type === 64\n  /* TNodeType.Placeholder */\n  ) {\n    currentTNode = currentTNode.parent;\n  }\n\n  return currentTNode;\n}\n\nfunction getCurrentTNodePlaceholderOk() {\n  return instructionState.lFrame.currentTNode;\n}\n\nfunction getCurrentParentTNode() {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\n\nfunction setCurrentTNode(tNode, isParent) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\n\nfunction isCurrentTNodeParent() {\n  return instructionState.lFrame.isParent;\n}\n\nfunction setCurrentTNodeAsNotParent() {\n  instructionState.lFrame.isParent = false;\n}\n\nfunction setCurrentTNodeAsParent() {\n  instructionState.lFrame.isParent = true;\n}\n\nfunction getContextLView() {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView;\n}\n\nfunction isInCheckNoChangesMode() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _isInCheckNoChangesMode;\n}\n\nfunction setIsInCheckNoChangesMode(mode) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _isInCheckNoChangesMode = mode;\n} // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n\n\nfunction getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n\n  return index;\n}\n\nfunction getBindingIndex() {\n  return instructionState.lFrame.bindingIndex;\n}\n\nfunction setBindingIndex(value) {\n  return instructionState.lFrame.bindingIndex = value;\n}\n\nfunction nextBindingIndex() {\n  return instructionState.lFrame.bindingIndex++;\n}\n\nfunction incrementBindingIndex(count) {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\n\nfunction isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\n\nfunction setInI18nBlock(isInI18nBlock) {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\n\n\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\n\n\nfunction getCurrentDirectiveIndex() {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\n\n\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\n\n\nfunction getCurrentDirectiveDef(tData) {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\n\nfunction getCurrentQueryIndex() {\n  return instructionState.lFrame.currentQueryIndex;\n}\n\nfunction setCurrentQueryIndex(value) {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\n\n\nfunction getDeclarationTNode(lView) {\n  const tView = lView[TVIEW]; // Return the declaration parent for embedded views\n\n  if (tView.type === 2\n  /* TViewType.Embedded */\n  ) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n\n\n  if (tView.type === 1\n  /* TViewType.Component */\n  ) {\n    return lView[T_HOST];\n  } // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n\n\n  return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\n\n\nfunction enterDI(lView, tNode, flags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n    let parentTNode = tNode;\n    let parentLView = lView;\n\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode.parent;\n\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break; // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW]; // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n\n        if (parentTNode.type & (2\n        /* TNodeType.Element */\n        | 8\n        /* TNodeType.ElementContainer */\n        )) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n  return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\n\n\nfunction enterView(newView) {\n  ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\n\n\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\n\nfunction createLFrame(parent) {\n  const lFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null,\n    tView: null,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent,\n    child: null,\n    inI18n: false\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n\n  return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\n\n\nfunction leaveViewLight() {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null;\n  oldLFrame.lView = null;\n  return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\n\n\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\n\nfunction leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\n\nfunction nextContextImpl(level) {\n  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);\n  return contextLView[CONTEXT];\n}\n\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n\n  return currentView;\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\n\n\nfunction getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\n\n\nfunction setSelectedIndex(index) {\n  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\n\n\nfunction getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\n\n\nfunction namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\n\nfunction getNamespace$1() {\n  return instructionState.lFrame.currentNamespace;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\n\n\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {\n    ngOnChanges,\n    ngOnInit,\n    ngDoCheck\n  } = directiveDef.type.prototype;\n\n  if (ngOnChanges) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);\n  }\n\n  if (ngOnInit) {\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n  }\n\n  if (ngDoCheck) {\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n  }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\n\n\nfunction registerPostOrderHooks(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView); // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i];\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n\n    if (ngAfterContentInit) {\n      (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n    }\n\n    if (ngAfterContentChecked) {\n      (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n    }\n\n    if (ngAfterViewInit) {\n      (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n    }\n\n    if (ngAfterViewChecked) {\n      (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n    }\n\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);\n    }\n  }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\n\n\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n  callHooks(lView, hooks, 3\n  /* InitPhaseState.InitPhaseCompleted */\n  , nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\n\n\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n  ngDevMode && assertNotEqual(initPhase, 3\n  /* InitPhaseState.InitPhaseCompleted */\n  , 'Init pre-order hooks should not be called more than once');\n\n  if ((lView[FLAGS] & 3\n  /* LViewFlags.InitPhaseStateMask */\n  ) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\n\nfunction incrementInitPhaseFlags(lView, initPhase) {\n  ngDevMode && assertNotEqual(initPhase, 3\n  /* InitPhaseState.InitPhaseCompleted */\n  , 'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n\n  if ((flags & 3\n  /* LViewFlags.InitPhaseStateMask */\n  ) === initPhase) {\n    flags &= 2047\n    /* LViewFlags.IndexWithinInitPhaseReset */\n    ;\n    flags += 1\n    /* LViewFlags.InitPhaseStateIncrementer */\n    ;\n    lView[FLAGS] = flags;\n  }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\n\n\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535\n  /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */\n  : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n\n  let lastNodeIndexFound = 0;\n\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1];\n\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i];\n\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536\n      /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */\n      ;\n\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760\n        /* PreOrderHookFlags.NumberOfInitHooksCalledMask */\n        ) + i + 2;\n      }\n\n      i++;\n    }\n  }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\n\n\nfunction callHook(currentView, initPhase, arr, i) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1];\n  const directiveIndex = isInitHook ? -arr[i] : arr[i];\n  const directive = currentView[directiveIndex];\n\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> 11\n    /* LViewFlags.IndexWithinInitPhaseShift */\n    ; // The init phase state must be always checked here as it may have been recursively updated.\n\n    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16\n    /* PreOrderHookFlags.NumberOfInitHooksCalledShift */\n    && (currentView[FLAGS] & 3\n    /* LViewFlags.InitPhaseStateMask */\n    ) === initPhase) {\n      currentView[FLAGS] += 2048\n      /* LViewFlags.IndexWithinInitPhaseIncrementer */\n      ;\n      profiler(4\n      /* ProfilerEvent.LifecycleHookStart */\n      , directive, hook);\n\n      try {\n        hook.call(directive);\n      } finally {\n        profiler(5\n        /* ProfilerEvent.LifecycleHookEnd */\n        , directive, hook);\n      }\n    }\n  } else {\n    profiler(4\n    /* ProfilerEvent.LifecycleHookStart */\n    , directive, hook);\n\n    try {\n      hook.call(directive);\n    } finally {\n      profiler(5\n      /* ProfilerEvent.LifecycleHookEnd */\n      , directive, hook);\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\n\nclass NodeInjectorFactory {\n  constructor(\n  /**\n   * Factory to invoke in order to create a new instance.\n   */\n  factory,\n  /**\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n   */\n  isViewProvider, injectImplementation) {\n    this.factory = factory;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     */\n\n    this.resolving = false;\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n\n}\n\nfunction isFactory(obj) {\n  return obj instanceof NodeInjectorFactory;\n} // Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\n\nconst unusedValueExportToPlacateAjd$6 = 1;\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\n\nfunction toTNodeTypeAsString(tNodeType) {\n  let text = '';\n  tNodeType & 1\n  /* TNodeType.Text */\n  && (text += '|Text');\n  tNodeType & 2\n  /* TNodeType.Element */\n  && (text += '|Element');\n  tNodeType & 4\n  /* TNodeType.Container */\n  && (text += '|Container');\n  tNodeType & 8\n  /* TNodeType.ElementContainer */\n  && (text += '|ElementContainer');\n  tNodeType & 16\n  /* TNodeType.Projection */\n  && (text += '|Projection');\n  tNodeType & 32\n  /* TNodeType.Icu */\n  && (text += '|IcuContainer');\n  tNodeType & 64\n  /* TNodeType.Placeholder */\n  && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n} // Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\n\nconst unusedValueExportToPlacateAjd$5 = 1;\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\n\nfunction hasClassInput(tNode) {\n  return (tNode.flags & 16\n  /* TNodeFlags.hasClassInput */\n  ) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\n\n\nfunction hasStyleInput(tNode) {\n  return (tNode.flags & 32\n  /* TNodeFlags.hasStyleInput */\n  ) !== 0;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction assertTNodeType(tNode, expectedTypes, message) {\n  assertDefined(tNode, 'should be called with a TNode');\n\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\n\nfunction assertPureTNodeType(type) {\n  if (!(type === 2\n  /* TNodeType.Element */\n  || //\n  type === 1\n  /* TNodeType.Text */\n  || //\n  type === 4\n  /* TNodeType.Container */\n  || //\n  type === 8\n  /* TNodeType.ElementContainer */\n  || //\n  type === 32\n  /* TNodeType.Icu */\n  || //\n  type === 16\n  /* TNodeType.Projection */\n  || //\n  type === 64\n  /* TNodeType.Placeholder */\n  )) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n  }\n}\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\n\n\nfunction setUpAttributes(renderer, native, attrs) {\n  let i = 0;\n\n  while (i < attrs.length) {\n    const value = attrs[i];\n\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== 0\n      /* AttributeMarker.NamespaceURI */\n      ) {\n        break;\n      } // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n\n\n      i++;\n      const namespaceURI = attrs[i++];\n      const attrName = attrs[i++];\n      const attrVal = attrs[i++];\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value;\n      const attrVal = attrs[++i]; // Standard attributes\n\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal);\n      }\n\n      i++;\n    }\n  } // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n\n\n  return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\n\n\nfunction isNameOnlyAttributeMarker(marker) {\n  return marker === 3\n  /* AttributeMarker.Bindings */\n  || marker === 4\n  /* AttributeMarker.Template */\n  || marker === 6\n  /* AttributeMarker.I18n */\n  ;\n}\n\nfunction isAnimationProp(name) {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === 64\n  /* CharCode.AT_SIGN */\n  ;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\n\n\nfunction mergeHostAttrs(dst, src) {\n  if (src === null || src.length === 0) {// do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker = -1\n    /* AttributeMarker.ImplicitAttributes */\n    ;\n\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === 0\n        /* AttributeMarker.NamespaceURI */\n        ) {// Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (srcMarker === -1\n        /* AttributeMarker.ImplicitAttributes */\n        || srcMarker === 2\n        /* AttributeMarker.Styles */\n        ) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item, null, null);\n        }\n      }\n    }\n  }\n\n  return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\n\n\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n  let i = 0; // Assume that new markers will be inserted at the end.\n\n  let markerInsertPosition = dst.length; // scan until correct type.\n\n  if (marker === -1\n  /* AttributeMarker.ImplicitAttributes */\n  ) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  } // search until you find place of insertion\n\n\n  while (i < dst.length) {\n    const item = dst[i];\n\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value;\n        return;\n      }\n    } // Increment counter.\n\n\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  } // insert at location.\n\n\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n\n  dst.splice(i++, 0, key1);\n\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\n\n\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nfunction getParentInjectorIndex(parentLocation) {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n  const parentInjectorIndex = parentLocation & 32767\n  /* RelativeInjectorLocationFlags.InjectorIndexMask */\n  ;\n  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n  return parentLocation & 32767\n  /* RelativeInjectorLocationFlags.InjectorIndexMask */\n  ;\n}\n\nfunction getParentInjectorViewOffset(parentLocation) {\n  return parentLocation >> 16\n  /* RelativeInjectorLocationFlags.ViewOffsetShift */\n  ;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\n\n\nfunction getParentInjectorView(location, startView) {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView; // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n\n  return parentView;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\n\n\nlet includeViewProviders = true;\n\nfunction setIncludeViewProviders(v) {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\n\n\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\n\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\n\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\n\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\n\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id;\n\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = type[NG_ELEMENT_ID];\n  } // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n\n\n  if (id == null) {\n    id = type[NG_ELEMENT_ID] = nextNgElementId++;\n  } // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n\n\n  const bloomHash = id & BLOOM_MASK; // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n\n  const mask = 1 << bloomHash; // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n\n  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\n\n\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n\n  const tView = lView[TVIEW];\n\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n\n    insertBloom(lView, null); // foundation for cumulative bloom\n\n    insertBloom(tView.blueprint, null);\n  }\n\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex; // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data; // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n\n    for (let i = 0; i < 8\n    /* NodeInjectorOffset.BLOOM_SIZE */\n    ; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n\n  lView[injectorIndex + 8\n  /* NodeInjectorOffset.PARENT */\n  ] = parentLoc;\n  return injectorIndex;\n}\n\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n\nfunction getInjectorIndex(tNode, lView) {\n  if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  lView[tNode.injectorIndex + 8\n  /* NodeInjectorOffset.PARENT */\n  ] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\n\n\nfunction getParentInjectorLocation(tNode, lView) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex; // ViewOffset is 0\n  } // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n\n\n  let declarationViewOffset = 0;\n  let parentTNode = null;\n  let lViewCursor = lView; // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]); // Every iteration of the loop requires that we go to the declared parent.\n\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return parentTNode.injectorIndex | declarationViewOffset << 16\n      /* RelativeInjectorLocationFlags.ViewOffsetShift */\n      ;\n    }\n  }\n\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\n\n\nfunction diPublicInInjector(injectorIndex, tView, token) {\n  bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\n\n\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertTNodeType(tNode, 12\n  /* TNodeType.AnyContainer */\n  | 3\n  /* TNodeType.AnyRNode */\n  );\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n\n  const attrs = tNode.attrs;\n\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n\n    while (i < attrsLength) {\n      const value = attrs[i]; // If we hit a `Bindings` or `Template` marker then we are done.\n\n      if (isNameOnlyAttributeMarker(value)) break; // Skip namespaced attributes\n\n      if (value === 0\n      /* AttributeMarker.NamespaceURI */\n      ) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1];\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n  if (flags & InjectFlags.Optional || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\n\n\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR$1]; // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n\n    const previousInjectImplementation = setInjectImplementation(undefined);\n\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n\n  return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\n\n\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & 1024\n    /* LViewFlags.HasEmbeddedViewInjector */\n    ) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    } // Otherwise try the node injector.\n\n\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  } // Finally, fall back to the module injector.\n\n\n  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\n\n\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n  const bloomHash = bloomHashBitOrFactory(token); // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n    }\n\n    try {\n      const value = bloomHash(flags);\n\n      if (value == null && !(flags & InjectFlags.Optional)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null; // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n\n    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8\n      /* NodeInjectorOffset.PARENT */\n      ];\n\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    } // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n\n\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex); // Check the current injector. If it matches, see if it contains token.\n\n      const tView = lView[TVIEW];\n      ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8\n      /* NodeInjectorOffset.TNODE */\n      ], lView);\n\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n\n      parentLocation = lView[injectorIndex + 8\n      /* NodeInjectorOffset.PARENT */\n      ];\n\n      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8\n      /* NodeInjectorOffset.TNODE */\n      ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n\n  return notFoundValue;\n}\n\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + 8\n  /* NodeInjectorOffset.TNODE */\n  ]; // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n\n  const canAccessViewProviders = previousTView == null ? // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponentHost(tNode) && includeViewProviders : // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && (tNode.type & 3\n  /* TNodeType.AnyRNode */\n  ) !== 0; // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n\n  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;\n  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\n\n\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n  const injectablesStart = nodeProviderIndexes & 1048575\n  /* TNodeProviderIndexes.ProvidersStartIndexMask */\n  ;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount = nodeProviderIndexes >> 20\n  /* TNodeProviderIndexes.CptViewProvidersCountShift */\n  ;\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount; // When the host special case applies, only the viewProviders and the component are visible\n\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i];\n\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart];\n\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n\n  return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\n\n\nfunction getNodeInjectable(lView, tView, index, tNode) {\n  let value = lView[index];\n  const tData = tView.data;\n\n  if (isFactory(value)) {\n    const factory = value;\n\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode && assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode); // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index], tView);\n      }\n    } finally {\n      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n\n  return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\n\n\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n\n  const tokenId = // First check with `hasOwnProperty` so we don't get an inherited ID.\n  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined; // Negative token IDs are used for special objects such as `Injector`\n\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode && assertEqual(tokenId, -1\n      /* InjectorMarkers.Injector */\n      , 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\n\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash; // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)]; // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n\n  return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\n\n\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n\nclass NodeInjector {\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n\n  get(token, notFoundValue, flags) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, flags, notFoundValue);\n  }\n\n}\n/** Creates a `NodeInjector` for the current node. */\n\n\nfunction createNodeInjector() {\n  return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\n\n\nfunction ɵɵgetInheritedFactory(type) {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.\n\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent); // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n\n      parent = Object.getPrototypeOf(parent);\n    } // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n\n\n    return t => new t();\n  });\n}\n\nfunction getFactoryOf(type) {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n\n  return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\n\n\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n  let currentTNode = tNode;\n  let currentLView = lView; // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n\n  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 1024\n  /* LViewFlags.HasEmbeddedViewInjector */\n  && !(currentLView[FLAGS] & 256\n  /* LViewFlags.IsRoot */\n  )) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView); // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    } // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n\n\n    let parentTNode = currentTNode.parent; // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      } // Otherwise keep going up the tree.\n\n\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n\n    currentTNode = parentTNode;\n  }\n\n  return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\n\n\nfunction getTNodeFromLView(lView) {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type; // The parent pointer differs based on `TView.type`.\n\n  if (tViewType === 2\n  /* TViewType.Embedded */\n  ) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } else if (tViewType === 1\n  /* TViewType.Component */\n  ) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST];\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵinjectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\n\nconst Attribute = makeParamDecorator('Attribute', attributeName => ({\n  attributeName,\n  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)\n}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet _reflect = null;\n\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\n\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\n\nfunction convertDependencies(deps) {\n  return deps.map(dep => reflectDependency(dep));\n}\n\nfunction reflectDependency(dep) {\n  const meta = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false\n  };\n\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n\n      const proto = Object.getPrototypeOf(param);\n\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(204\n          /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */\n          , ngDevMode && `Attribute name must be defined.`);\n        }\n\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n\n  return meta;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\n\n\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\n\nlet checkForDuplicateNgModules = true;\n\nfunction assertSameOrNotExisting(id, type, incoming) {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\n\n\nfunction registerNgModuleType(ngModuleType, id) {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\n\nfunction clearModulesForTest() {\n  modules.clear();\n}\n\nfunction getRegisteredNgModuleType(id) {\n  return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\n\n\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵresolveWindow(element) {\n  return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵresolveDocument(element) {\n  return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵresolveBody(element) {\n  return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\n\n\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\n\nfunction maybeUnwrapFn$1(value) {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\n\n\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\n\nfunction setDocument(document) {\n  DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\n\n\nfunction getDocument() {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  } // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API. Meanwhile we just return `undefined` and let the application fail.\n\n\n  return undefined;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\n\n\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\n\nfunction getPolicy$1() {\n  if (policy$1 === undefined) {\n    policy$1 = null;\n\n    if (_global$1.trustedTypes) {\n      try {\n        policy$1 = _global$1.trustedTypes.createPolicy('angular', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {// trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n\n  return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\n\n\nfunction trustedHTMLFromString(html) {\n  return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\n\n\nfunction trustedScriptFromString(script) {\n  return getPolicy$1()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\n\n\nfunction trustedScriptURLFromString(url) {\n  return getPolicy$1()?.createScriptURL(url) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\n\n\nfunction newTrustedFunctionForDev(...args) {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n\n  if (!_global$1.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  } // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\n\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`; // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n\n  const fn = _global$1['eval'](trustedScriptFromString(body));\n\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  } // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n\n\n  fn.toString = () => body; // 2. When calling the resulting function, `this` should refer to `global`\n\n\n  return fn.bind(_global$1); // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\n\n\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\n\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n\n    if (_global$1.trustedTypes) {\n      try {\n        policy = _global$1.trustedTypes.createPolicy('angular#unsafe-bypass', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {// trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\n\n\nfunction trustedHTMLFromStringBypass(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\n\n\nfunction trustedScriptFromStringBypass(script) {\n  return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\n\n\nfunction trustedScriptURLFromStringBypass(url) {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass SafeValueImpl {\n  constructor(changingThisBreaksApplicationSecurity) {\n    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n  }\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see https://g.co/ng/security#xss)`;\n  }\n\n}\n\nclass SafeHtmlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"HTML\"\n    /* BypassType.Html */\n    ;\n  }\n\n}\n\nclass SafeStyleImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Style\"\n    /* BypassType.Style */\n    ;\n  }\n\n}\n\nclass SafeScriptImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Script\"\n    /* BypassType.Script */\n    ;\n  }\n\n}\n\nclass SafeUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"URL\"\n    /* BypassType.Url */\n    ;\n  }\n\n}\n\nclass SafeResourceUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"ResourceURL\"\n    /* BypassType.ResourceUrl */\n    ;\n  }\n\n}\n\nfunction unwrapSafeValue(value) {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;\n}\n\nfunction allowSanitizationBypassAndThrow(value, type) {\n  const actualType = getSanitizationBypassType(value);\n\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === \"ResourceURL\"\n    /* BypassType.ResourceUrl */\n    && type === \"URL\"\n    /* BypassType.Url */\n    ) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see https://g.co/ng/security#xss)`);\n  }\n\n  return actualType === type;\n}\n\nfunction getSanitizationBypassType(value) {\n  return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\n\n\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\n\n\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\n\n\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\n\n\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\n\n\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\n\n\nfunction getInertBodyHelper(defaultDoc) {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\n\n\nclass DOMParserHelper {\n  constructor(inertDocumentHelper) {\n    this.inertDocumentHelper = inertDocumentHelper;\n  }\n\n  getInertBodyElement(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n\n    try {\n      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\n\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n\n      body.removeChild(body.firstChild);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n\n}\n/**\n * Use an HTML5 `template` element, if supported, or an inert body element created via\n * `createHtmlDocument` to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\n\n\nclass InertDocumentHelper {\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n\n    if (this.inertDocument.body == null) {\n      // usually there should be only one body element in the document, but IE doesn't have any, so\n      // we need to create one.\n      const inertHtml = this.inertDocument.createElement('html');\n      this.inertDocument.appendChild(inertHtml);\n      const inertBodyElement = this.inertDocument.createElement('body');\n      inertHtml.appendChild(inertBodyElement);\n    }\n  }\n\n  getInertBodyElement(html) {\n    // Prefer using <template> element if supported.\n    const templateEl = this.inertDocument.createElement('template');\n\n    if ('content' in templateEl) {\n      templateEl.innerHTML = trustedHTMLFromString(html);\n      return templateEl;\n    } // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`\n    // and we returned the inert `body` node. This was changed, because IE seems to treat setting\n    // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted\n    // yet. In particular, IE appears to split some of the text into multiple text nodes rather\n    // than keeping them in a single one which ends up messing with Ivy's i18n parsing further\n    // down the line. This has been worked around by creating a new inert `body` and using it as\n    // the root node in which we insert the HTML.\n\n\n    const inertBody = this.inertDocument.createElement('body');\n    inertBody.innerHTML = trustedHTMLFromString(html); // Support: IE 11 only\n    // strip custom-namespaced attributes on IE<=11\n\n    if (this.defaultDoc.documentMode) {\n      this.stripCustomNsAttrs(inertBody);\n    }\n\n    return inertBody;\n  }\n  /**\n   * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n   * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n   * 'ns1:xlink:foo').\n   *\n   * This is undesirable since we don't want to allow any of these custom attributes. This method\n   * strips them all.\n   */\n\n\n  stripCustomNsAttrs(el) {\n    const elAttrs = el.attributes; // loop backwards so that we can support removals.\n\n    for (let i = elAttrs.length - 1; 0 < i; i--) {\n      const attrib = elAttrs.item(i);\n      const attrName = attrib.name;\n\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n        el.removeAttribute(attrName);\n      }\n    }\n\n    let childNode = el.firstChild;\n\n    while (childNode) {\n      if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode);\n      childNode = childNode.nextSibling;\n    }\n  }\n\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\n\n\nfunction isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n  } catch {\n    return false;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\n\n\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|data|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;\n\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see https://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction tagSet(tags) {\n  const res = {};\n\n  for (const t of tags.split(',')) res[t] = true;\n\n  return res;\n}\n\nfunction merge(...sets) {\n  const res = {};\n\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n\n  return res;\n} // Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\n\n\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\n\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS); // Safe Block Elements - HTML5\n\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul')); // Inline Elements - HTML5\n\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS); // Attributes that have href and hence need to be sanitized\n\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width'); // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\n\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'); // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS); // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\n\nclass SanitizingHtmlSerializer {\n  constructor() {\n    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n    // because characters were re-encoded.\n    this.sanitizedSomething = false;\n    this.buf = [];\n  }\n\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current = el.firstChild;\n    let traverseContent = true;\n\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild;\n        continue;\n      }\n\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current);\n        }\n\n        let next = this.checkClobberedElement(current, current.nextSibling);\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = this.checkClobberedElement(current, current.parentNode);\n      }\n    }\n\n    return this.buf.join('');\n  }\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n\n\n  startElement(element) {\n    const tagName = element.nodeName.toLowerCase();\n\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr.name;\n      const lower = attrName.toLowerCase();\n\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n\n      let value = elAttr.value; // TODO(martinprobst): Special case image URIs for data:image/...\n\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n\n    this.buf.push('>');\n    return true;\n  }\n\n  endElement(current) {\n    const tagName = current.nodeName.toLowerCase();\n\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n\n  checkClobberedElement(node, nextNode) {\n    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n    }\n\n    return nextNode;\n  }\n\n} // Regular Expressions for parsing tags and attributes\n\n\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g; // ! to ~ is the ASCII range.\n\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\n\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    const hi = match.charCodeAt(0);\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\n\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  let inertBodyElement = null;\n\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc); // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml); // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');\n    }\n\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n\nfunction getTemplateContent(el) {\n  return 'content' in el\n  /** Microsoft/TypeScript#21517 */\n  && isTemplateElement(el) ? el.content : null;\n}\n\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\n\n\nvar SecurityContext;\n\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n  const sanitizer = getSanitizer();\n\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n\n  if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\"\n  /* BypassType.Html */\n  )) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n  const sanitizer = getSanitizer();\n\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n\n  if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\"\n  /* BypassType.Style */\n  )) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n\n  return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n  const sanitizer = getSanitizer();\n\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n\n  if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\"\n  /* BypassType.Url */\n  )) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n  const sanitizer = getSanitizer();\n\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\"\n  /* BypassType.ResourceUrl */\n  )) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n\n  throw new RuntimeError(904\n  /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */\n  , ngDevMode && 'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsanitizeScript(unsafeScript) {\n  const sanitizer = getSanitizer();\n\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n\n  if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\"\n  /* BypassType.Script */\n  )) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n\n  throw new RuntimeError(905\n  /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */\n  , ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵtrustConstantHtml(html) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n\n  return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵtrustConstantResourceUrl(url) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n\n  return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\n\n\nfunction getUrlSanitizer(tag, prop) {\n  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {\n    return ɵɵsanitizeResourceUrl;\n  }\n\n  return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n\nfunction validateAgainstEventProperties(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n    throw new RuntimeError(306\n    /* RuntimeErrorCode.INVALID_EVENT_BINDING */\n    , errorMessage);\n  }\n}\n\nfunction validateAgainstEventAttributes(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(306\n    /* RuntimeErrorCode.INVALID_EVENT_BINDING */\n    , errorMessage);\n  }\n}\n\nfunction getSanitizer() {\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\n\n\nclass InjectionToken {\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    /** @internal */\n\n    this.ngMetadataName = 'InjectionToken';\n    this.ɵprov = undefined;\n\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here'); // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n\n      this.__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  get multi() {\n    return this;\n  }\n\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\n\n\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\n\nconst INJECTOR = new InjectionToken('INJECTOR', // Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1\n/* InjectorMarkers.Injector */\n);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass NullInjector {\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n\n    return notFoundValue;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n * @developerPreview\n */\n\n\nfunction importProvidersFrom(...sources) {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources)\n  };\n}\n\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n  const providersOut = [];\n  const dedup = new Set(); // already seen types\n\n  let injectorTypesWithProviders;\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef$1(source);\n\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(800\n        /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */\n        , `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n      }\n    } // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n\n\n    const internalSource = source;\n\n    if (walkProviderTree(internalSource, providersOut, [], dedup)) {\n      injectorTypesWithProviders || (injectorTypesWithProviders = []);\n      injectorTypesWithProviders.push(internalSource);\n    }\n  }); // Collect all providers from `ModuleWithProviders` types.\n\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, providersOut);\n  }\n\n  return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\n\n\nfunction processInjectorTypesWithProviders(typesWithProviders, providersOut) {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {\n      ngModule,\n      providers\n    } = typesWithProviders[i];\n    deepForEach(providers, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      providersOut.push(provider);\n    });\n  }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\n\n\nfunction walkProviderTree(container, providersOut, parents, dedup) {\n  container = resolveForwardRef(container);\n  if (!container) return false; // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n\n  let defType = null;\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef$1(container);\n\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule = container.ngModule;\n    injDef = getInjectorDef(ngModule);\n\n    if (injDef) {\n      defType = ngModule;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container;\n  } // Check for circular dependencies.\n\n\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  } // Check for multiple imports of the same module\n\n\n  const isDuplicate = dedup.has(defType);\n\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n\n    dedup.add(defType);\n\n    if (cmpDef.dependencies) {\n      const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n\n      for (const dep of deps) {\n        walkProviderTree(dep, providersOut, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType); // Add it to the set of dedups. This way we can detect multiple imports of the same module\n\n      dedup.add(defType);\n      let importTypesWithProviders;\n\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, providersOut, parents, dedup)) {\n            importTypesWithProviders || (importTypesWithProviders = []); // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      } // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n\n\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, providersOut);\n      }\n    }\n\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType()); // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n\n\n      providersOut.push( // Provider to create `defType` using its factory.\n      {\n        provide: defType,\n        useFactory: factory,\n        deps: EMPTY_ARRAY\n      }, // Make this `defType` available to an internal logic that calculates injector scope.\n      {\n        provide: INJECTOR_DEF_TYPES,\n        useValue: defType,\n        multi: true\n      }, // Provider to eagerly instantiate `defType` via `ENVIRONMENT_INITIALIZER`.\n      {\n        provide: ENVIRONMENT_INITIALIZER,\n        useValue: () => ɵɵinject(defType),\n        multi: true\n      } //\n      );\n    } // Next, include providers listed on the definition itself.\n\n\n    const defProviders = injDef.providers;\n\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container;\n      deepForEach(defProviders, provider => {\n        ngDevMode && validateProvider(provider, defProviders, injectorType);\n        providersOut.push(provider);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n\n  return defType !== container && container.providers !== undefined;\n}\n\nfunction validateProvider(provider, providers, containerType) {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {\n    return;\n  } // Here we expect the provider to be a `useClass` provider (by elimination).\n\n\n  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\n\nconst USE_VALUE$1 = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\n\nfunction isValueProvider(value) {\n  return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\n\nfunction isExistingProvider(value) {\n  return !!(value && value.useExisting);\n}\n\nfunction isFactoryProvider(value) {\n  return !!(value && value.useFactory);\n}\n\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\n\nfunction isClassProvider(value) {\n  return !!value.useClass;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\n\n\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\n\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\n\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\n\nlet NULL_INJECTOR$1 = undefined;\n\nfunction getNullInjector() {\n  if (NULL_INJECTOR$1 === undefined) {\n    NULL_INJECTOR$1 = new NullInjector();\n  }\n\n  return NULL_INJECTOR$1;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n *\n * @developerPreview\n */\n\n\nclass EnvironmentInjector {}\n\nclass R3Injector extends EnvironmentInjector {\n  constructor(providers, parent, source, scopes) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.scopes = scopes;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n     * to prevent further searches.\n     */\n\n    this.records = new Map();\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n\n    this._ngOnDestroyHooks = new Set();\n    this._onDestroyHooks = [];\n    this._destroyed = false; // Start off by creating Records for every provider.\n\n    forEachSingleProvider(providers, provider => this.processProvider(provider)); // Make sure the INJECTOR token provides this injector.\n\n    this.records.set(INJECTOR, makeRecord(undefined, this)); // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    } // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n\n\n    const record = this.records.get(INJECTOR_SCOPE);\n\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value);\n    }\n\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES.multi, EMPTY_ARRAY, InjectFlags.Self));\n  }\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n\n\n  get destroyed() {\n    return this._destroyed;\n  }\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n\n\n  destroy() {\n    this.assertNotDestroyed(); // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n\n    this._destroyed = true;\n\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n\n      for (const hook of this._onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n\n      this._ngOnDestroyHooks.clear();\n\n      this.injectorDefTypes.clear();\n      this._onDestroyHooks.length = 0;\n    }\n  }\n\n  onDestroy(callback) {\n    this._onDestroyHooks.push(callback);\n  }\n\n  runInContext(fn) {\n    this.assertNotDestroyed();\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    this.assertNotDestroyed(); // Set the injection context.\n\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record = this.records.get(token);\n\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n\n          this.records.set(token, record);\n        } // If a record was found, get the instance for it and return it.\n\n\n        if (record != null\n        /* NOT null || undefined */\n        ) {\n          return this.hydrate(token, record);\n        }\n      } // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n\n\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector(); // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n\n      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (e.name === 'NullInjectorError') {\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n    }\n  }\n  /** @internal */\n\n\n  resolveInjectorInitializers() {\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER.multi, EMPTY_ARRAY, InjectFlags.Self);\n\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(209\n        /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */\n        , 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' + `(expected an array, but got ${typeof initializers}). ` + 'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n\n  toString() {\n    const tokens = [];\n    const records = this.records;\n\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n\n  assertNotDestroyed() {\n    if (this._destroyed) {\n      throw new RuntimeError(205\n      /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */\n      , ngDevMode && 'Injector has already been destroyed.');\n    }\n  }\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n\n\n  processProvider(provider) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide); // Construct a `Record` for the provider.\n\n    const record = providerToRecord(provider);\n\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n\n        multiRecord.factory = () => injectArgs(multiRecord.multi);\n\n        this.records.set(token, multiRecord);\n      }\n\n      token = provider;\n      multiRecord.multi.push(provider);\n    } else {\n      const existing = this.records.get(token);\n\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n\n    this.records.set(token, record);\n  }\n\n  hydrate(token, record) {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory();\n    }\n\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this._ngOnDestroyHooks.add(record.value);\n    }\n\n    return record.value;\n  }\n\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    }\n\n    const providedIn = resolveForwardRef(def.providedIn);\n\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n\n}\n\nfunction injectableDefOrInjectorDefFactory(token) {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n\n  if (factory !== null) {\n    return factory;\n  } // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n\n\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(204\n    /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */\n    , ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  } // Undecorated types can sometimes be created if they have no constructor arguments.\n\n\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  } // There was no way to resolve a factory for this token.\n\n\n  throw new RuntimeError(204\n  /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */\n  , ngDevMode && 'unreachable');\n}\n\nfunction getUndecoratedInjectableFactory(token) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n\n  if (paramLength > 0) {\n    const args = newArray(paramLength, '?');\n    throw new RuntimeError(204\n    /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */\n    , ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  } // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n\n\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token);\n  } else {\n    return () => new token();\n  }\n}\n\nfunction providerToRecord(provider) {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\n\n\nfunction providerToFactory(provider, ngModuleType, providers) {\n  let factory = undefined;\n\n  if (ngDevMode && isImportedNgModuleProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n\n  return factory;\n}\n\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\n\nfunction hasDeps(value) {\n  return !!value.deps;\n}\n\nfunction hasOnDestroy(value) {\n  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';\n}\n\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;\n}\n\nfunction isImportedNgModuleProviders(provider) {\n  return !!provider.ɵproviders;\n}\n\nfunction forEachSingleProvider(providers, fn) {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (isImportedNgModuleProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\n\n\nclass ComponentRef$1 {}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\n\n\nclass ComponentFactory$1 {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction noComponentFactoryError(component) {\n  const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  error[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nfunction getComponent$1(error) {\n  return error[ERROR_COMPONENT];\n}\n\nclass _NullComponentFactoryResolver {\n  resolveComponentFactory(component) {\n    throw noComponentFactoryError(component);\n  }\n\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\n\n\nclass ComponentFactoryResolver$1 {}\n\nComponentFactoryResolver$1.NULL = /* @__PURE__ */new _NullComponentFactoryResolver();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\n\nfunction injectElementRef() {\n  return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\n\n\nfunction createElementRef(tNode, lView) {\n  return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\n\n\nclass ElementRef {\n  constructor(nativeElement) {\n    this.nativeElement = nativeElement;\n  }\n\n}\n/**\n * @internal\n * @nocollapse\n */\n\n\nElementRef.__NG_ELEMENT_ID__ = injectElementRef;\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\n\nfunction unwrapElementRef(value) {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\n\nclass RendererFactory2 {}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\n\n\nclass Renderer2 {}\n/**\n * @internal\n * @nocollapse\n */\n\n\nRenderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();\n/** Injects a Renderer2 for the current component. */\n\n\nfunction injectRenderer2() {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\n\n\nclass Sanitizer {}\n/** @nocollapse */\n\n\nSanitizer.ɵprov = ɵɵdefineInjectable({\n  token: Sanitizer,\n  providedIn: 'root',\n  factory: () => null\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\n\nclass Version {\n  constructor(full) {\n    this.full = full;\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n\n}\n/**\n * @publicApi\n */\n\n\nconst VERSION = new Version('14.2.2');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\n\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\n\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\n\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\n\n\nfunction ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\n\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\n\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\n\n\nfunction ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\n\n\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return; // If the element matches any directive, it's considered as valid.\n\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown = // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,\n    // because while most browsers return 'function', IE returns 'object'.\n    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);\n\n    if (isUnknown && !matchingSchemas(schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared'}.\\n`;\n\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(304\n        /* RuntimeErrorCode.UNKNOWN_ELEMENT */\n        , message);\n      } else {\n        console.error(formatRuntimeError(304\n        /* RuntimeErrorCode.UNKNOWN_ELEMENT */\n        , message));\n      }\n    }\n  }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\n\n\nfunction isPropertyValid(element, propName, tagName, schemas) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true; // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  } // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we\n  // need to account for both here, while being careful with `typeof null` also returning 'object'.\n\n\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\n\n\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === 4\n  /* TNodeType.Container */\n  ) {\n    tagName = 'ng-template';\n  }\n\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared';\n\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` + `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` + `'${propName}' input, then verify that it is ${importLocation}.`; // May be a Web Component?\n\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` + `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    }\n  }\n\n  reportUnknownPropertyError(message);\n}\n\nfunction reportUnknownPropertyError(message) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(303\n    /* RuntimeErrorCode.UNKNOWN_BINDING */\n    , message);\n  } else {\n    console.error(formatRuntimeError(303\n    /* RuntimeErrorCode.UNKNOWN_BINDING */\n    , message));\n  }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\n\n\nfunction getDeclarationComponentDef(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT]; // Unable to obtain a context.\n\n  if (!context) return null;\n  return context.constructor ? getComponentDef$1(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\n\n\nfunction isHostComponentStandalone(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const componentDef = getDeclarationComponentDef(lView); // Treat host component as non-standalone if we can't obtain the def.\n\n  return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\n\n\nfunction getTemplateLocationDetails(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\n\n\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'], ['ngSwitchDefault', 'NgSwitchDefault']]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\n\nfunction matchingSchemas(schemas, tagName) {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n\n      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n\nfunction wrappedError(message, originalError) {\n  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n\nfunction getOriginalError(error) {\n  return error[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\n\n\nclass ErrorHandler {\n  constructor() {\n    /**\n     * @internal\n     */\n    this._console = console;\n  }\n\n  handleError(error) {\n    const originalError = this._findOriginalError(error);\n\n    this._console.error('ERROR', error);\n\n    if (originalError) {\n      this._console.error('ORIGINAL ERROR', originalError);\n    }\n  }\n  /** @internal */\n\n\n  _findOriginalError(error) {\n    let e = error && getOriginalError(error);\n\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e || null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\n\n\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\n\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\n\nfunction escapeCommentText(value) {\n  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\n\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Keeps track of the currently-active LViews.\n\n\nconst TRACKED_LVIEWS = new Map(); // Used for generating unique IDs for LViews.\n\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\n\nfunction getUniqueLViewId() {\n  return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\n\n\nfunction registerLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\n\n\nfunction getLViewById(id) {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\n\n\nfunction unregisterLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\n\n\nclass LContext {\n  constructor(\n  /**\n   * ID of the component's parent view data.\n   */\n  lViewId,\n  /**\n   * The index instance of the node.\n   */\n  nodeIndex,\n  /**\n   * The instance of the DOM node that is attached to the lNode.\n   */\n  native) {\n    this.lViewId = lViewId;\n    this.nodeIndex = nodeIndex;\n    this.native = native;\n  }\n  /** Component's parent view data. */\n\n\n  get lView() {\n    return getLViewById(this.lViewId);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\n\n\nfunction getLContext(target) {\n  let mpValue = readPatchedData(target);\n\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView = mpValue;\n      let nodeIndex;\n      let component = undefined;\n      let directives = undefined;\n\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target);\n\n        if (nodeIndex == -1) {\n          return null;\n        }\n      } // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n\n\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native); // only when the component has been discovered then update the monkey-patch\n\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      } // only when the directives have been discovered then update the monkey-patch\n\n\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target;\n    ngDevMode && assertDomNode(rElement); // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n\n    let parent = rElement;\n\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView; // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n\n        if (!lView) {\n          return null;\n        }\n\n        const index = findViaNativeElement(lView, rElement);\n\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n\n  return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\n\n\nfunction createLContext(lView, nodeIndex, native) {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\n\n\nfunction getComponentViewByInstance(componentInstance) {\n  let patchedData = readPatchedData(componentInstance);\n  let lView;\n\n  if (isLView(patchedData)) {\n    const contextLView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData;\n    const contextLView = context.lView;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n\n  return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\n\n\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\n\nfunction attachPatchData(target, data) {\n  ngDevMode && assertDefined(target, 'Target expected'); // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\n\n\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\n\nfunction readPatchedLView(target) {\n  const value = readPatchedData(target);\n\n  if (value) {\n    return isLView(value) ? value : value.lView;\n  }\n\n  return null;\n}\n\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\n\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\n\n\nfunction findViaNativeElement(lView, target) {\n  const tView = lView[TVIEW];\n\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\n\n\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\n\n\nfunction findViaComponent(lView, componentInstance) {\n  const componentIndices = lView[TVIEW].components;\n\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n\n  return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\n\n\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n\n    tNode = traverseNextElement(tNode);\n  }\n\n  return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\n\n\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  let directiveStartIndex = tNode.directiveStart;\n  if (directiveStartIndex == 0) return EMPTY_ARRAY;\n  const directiveEndIndex = tNode.directiveEnd;\n  if (!includeComponents && tNode.flags & 2\n  /* TNodeFlags.isComponentHost */\n  ) directiveStartIndex++;\n  return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  let directiveStartIndex = tNode.directiveStart;\n  return tNode.flags & 2\n  /* TNodeFlags.isComponentHost */\n  ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\n\n\nfunction discoverLocalRefs(lView, nodeIndex) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n\n  if (tNode && tNode.localNames) {\n    const result = {};\n    let localIndex = tNode.index + 1;\n\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n\n    return result;\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Verifies that a given type is a Standalone Component. */\n\n\nfunction assertStandaloneComponentType(type) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef$1(type);\n\n  if (!componentDef.standalone) {\n    throw new RuntimeError(907\n    /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */\n    , `The ${stringifyForError(type)} component is not marked as standalone, ` + `but Angular expects to have a standalone component here. ` + `Please make sure the ${stringifyForError(type)} component has ` + `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n/** Verifies whether a given type is a component */\n\n\nfunction assertComponentDef(type) {\n  if (!getComponentDef$1(type)) {\n    throw new RuntimeError(906\n    /* RuntimeErrorCode.MISSING_GENERATED_DEF */\n    , `The ${stringifyForError(type)} is not an Angular component, ` + `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n/** Called when there are multiple component selectors that match a given node */\n\n\nfunction throwMultipleComponentError(tNode, first, second) {\n  throw new RuntimeError(-300\n  /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */\n  , `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\n\n\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;\n\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;\n  }\n\n  throw new RuntimeError(-100\n  /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */\n  , msg);\n}\n\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n      newValue = prefix;\n\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n\n  return {\n    propName,\n    oldValue,\n    newValue\n  };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\n\n\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n    } // metadata for property binding\n\n\n    return {\n      propName: metadata,\n      oldValue,\n      newValue\n    };\n  } // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n\n\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n\n    const meta = tData[idx];\n\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g')); // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n\n  return {\n    propName: undefined,\n    oldValue,\n    newValue\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\n\n\nvar RendererStyleFlags2;\n\n(function (RendererStyleFlags2) {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n\n  /**\n   * Marks a style as important.\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n\n  RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\n\n\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\n\n\nfunction ensureIcuContainerVisitorLoaded(loader) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\n\nconst unusedValueExportToPlacateAjd$4 = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\nconst unusedValueExportToPlacateAjd$3 = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\n\nfunction getLViewParent(lView) {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\n\n\nfunction getRootView(componentOrLView) {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n\n  while (lView && !(lView[FLAGS] & 256\n  /* LViewFlags.IsRoot */\n  )) {\n    lView = getLViewParent(lView);\n  }\n\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\n\n\nfunction getRootContext(viewOrComponent) {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\n\n\nfunction getFirstLContainer(lView) {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\n\n\nfunction getNextLContainer(container) {\n  return getNearestLContainer(container[NEXT]);\n}\n\nfunction getNearestLContainer(viewOrContainer) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n\n  return viewOrContainer;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$8;\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\n\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer;\n    let isComponent = false; // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST];\n    }\n\n    const rNode = unwrapRNode(lNodeToHandle);\n\n    if (action === 0\n    /* WalkTNodeTreeAction.Create */\n    && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === 1\n    /* WalkTNodeTreeAction.Insert */\n    && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === 2\n    /* WalkTNodeTreeAction.Detach */\n    ) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === 3\n    /* WalkTNodeTreeAction.Destroy */\n    ) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      renderer.destroyNode(rNode);\n    }\n\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n\nfunction createTextNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return renderer.createText(value);\n}\n\nfunction updateTextNode(renderer, rNode, value) {\n  ngDevMode && ngDevMode.rendererSetText++;\n  renderer.setValue(rNode, value);\n}\n\nfunction createCommentNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\n\n\nfunction createElementNode(renderer, name, namespace) {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\n\n\nfunction removeViewFromContainer(tView, lView) {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, 2\n  /* WalkTNodeTreeAction.Detach */\n  , null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\n\n\nfunction addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, 1\n  /* WalkTNodeTreeAction.Insert */\n  , parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\n\n\nfunction renderDetachView(tView, lView) {\n  applyView(tView, lView, lView[RENDERER], 2\n  /* WalkTNodeTreeAction.Detach */\n  , null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\n\n\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n\n  while (lViewOrLContainer) {\n    let next = null;\n\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer); // If container, traverse down to its first LView.\n\n      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n\n      next = lViewOrLContainer && lViewOrLContainer[NEXT];\n    }\n\n    lViewOrLContainer = next;\n  }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\n\n\nfunction insertView(tView, lView, lContainer, index) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n\n  lView[PARENT] = lContainer; // track views where declaration and insertion points are different\n\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  } // notify query that a new view has been added\n\n\n  const lQueries = lView[QUERIES];\n\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  } // Sets the attached flag\n\n\n  lView[FLAGS] |= 64\n  /* LViewFlags.Attached */\n  ;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\n\n\nfunction trackMovedView(declarationContainer, lView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n  }\n\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\n\nfunction detachMovedView(declarationContainer, lView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertionLContainer); // If the view was marked for refresh but then detached before it was checked (where the flag\n  // would be cleared and the counter decremented), we need to decrement the view counter here\n  // instead.\n\n  if (lView[FLAGS] & 512\n  /* LViewFlags.RefreshTransplantedView */\n  ) {\n    lView[FLAGS] &= ~512\n    /* LViewFlags.RefreshTransplantedView */\n    ;\n    updateTransplantedViewCount(insertionLContainer, -1);\n  }\n\n  movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\n\n\nfunction detachView(lContainer, removeIndex) {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n    }\n\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach); // notify query that a view has been removed\n\n    const lQueries = removedLView[QUERIES];\n\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null; // Unsets the attached flag\n\n    viewToDetach[FLAGS] &= ~64\n    /* LViewFlags.Attached */\n    ;\n  }\n\n  return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\n\n\nfunction destroyLView(tView, lView) {\n  if (!(lView[FLAGS] & 128\n  /* LViewFlags.Destroyed */\n  )) {\n    const renderer = lView[RENDERER];\n\n    if (renderer.destroyNode) {\n      applyView(tView, lView, renderer, 3\n      /* WalkTNodeTreeAction.Destroy */\n      , null, null);\n    }\n\n    destroyViewTree(lView);\n  }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\n\n\nfunction cleanUpView(tView, lView) {\n  if (!(lView[FLAGS] & 128\n  /* LViewFlags.Destroyed */\n  )) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~64\n    /* LViewFlags.Attached */\n    ; // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n\n    lView[FLAGS] |= 128\n    /* LViewFlags.Destroyed */\n    ;\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView); // For component views only, the local renderer is destroyed at clean up time.\n\n    if (lView[TVIEW].type === 1\n    /* TViewType.Component */\n    ) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      lView[RENDERER].destroy();\n    }\n\n    const declarationContainer = lView[DECLARATION_LCONTAINER]; // we are dealing with an embedded view that is still inserted into a container\n\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      } // For embedded views still attached to a container: remove query result from this view.\n\n\n      const lQueries = lView[QUERIES];\n\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    } // Unregister the view once everything else has been cleaned up.\n\n\n    unregisterLView(lView);\n  }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\n\n\nfunction processCleanups(tView, lView) {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP]; // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n  // information appended at the end. We need to know where the end of the `TCleanup` information\n  // is, and we track this with `lastLCleanupIndex`.\n\n  let lastLCleanupIndex = -1;\n\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener\n        const idxOrTargetGetter = tCleanup[i + 1];\n        const target = typeof idxOrTargetGetter === 'function' ? idxOrTargetGetter(lView) : unwrapRNode(lView[idxOrTargetGetter]);\n        const listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];\n        const useCaptureOrSubIdx = tCleanup[i + 3];\n\n        if (typeof useCaptureOrSubIdx === 'boolean') {\n          // native DOM listener registered with Renderer3\n          target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n        } else {\n          if (useCaptureOrSubIdx >= 0) {\n            // unregister\n            lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();\n          } else {\n            // Subscription\n            lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();\n          }\n        }\n\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n\n  if (lCleanup !== null) {\n    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n      const instanceCleanupFn = lCleanup[i];\n      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n      instanceCleanupFn();\n    }\n\n    lView[CLEANUP] = null;\n  }\n}\n/** Calls onDestroy hooks for this view */\n\n\nfunction executeOnDestroys(tView, lView) {\n  let destroyHooks;\n\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i]]; // Only call the destroy hook if the context has been requested.\n\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1];\n\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j]];\n            const hook = toCall[j + 1];\n            profiler(4\n            /* ProfilerEvent.LifecycleHookStart */\n            , callContext, hook);\n\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(5\n              /* ProfilerEvent.LifecycleHookEnd */\n              , callContext, hook);\n            }\n          }\n        } else {\n          profiler(4\n          /* ProfilerEvent.LifecycleHookStart */\n          , context, toCall);\n\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(5\n            /* ProfilerEvent.LifecycleHookEnd */\n            , context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\n\n\nfunction getParentRElement(tView, tNode, lView) {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\n\n\nfunction getClosestRElement(tView, tNode, lView) {\n  let parentTNode = tNode; // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n\n  while (parentTNode !== null && parentTNode.type & (8\n  /* TNodeType.ElementContainer */\n  | 32\n  /* TNodeType.Icu */\n  )) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  } // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n\n\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, 3\n    /* TNodeType.AnyRNode */\n    | 4\n    /* TNodeType.Container */\n    );\n\n    if (parentTNode.flags & 2\n    /* TNodeFlags.isComponentHost */\n    ) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const encapsulation = tView.data[parentTNode.directiveStart].encapsulation; // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n\n      if (encapsulation === ViewEncapsulation.None || encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n\n    return getNativeByTNode(parentTNode, lView);\n  }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\n\n\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\n\nfunction nativeAppendChild(renderer, parent, child) {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\n\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n/** Removes a node from the DOM given its native parent. */\n\n\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n  renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\n\n\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\n\n\nfunction nativeParentNode(renderer, node) {\n  return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\n\n\nfunction nativeNextSibling(renderer, node) {\n  return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\n\n\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\n\n\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n  if (parentTNode.type & (8\n  /* TNodeType.ElementContainer */\n  | 32\n  /* TNodeType.Icu */\n  )) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n\n  return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\n\n\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\n\nlet _processI18nInsertBefore;\n\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\n\n\nfunction appendChild(tView, lView, childRNode, childTNode) {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode = childTNode.parent || lView[T_HOST];\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n\n  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\n\n\nfunction getFirstNativeNode(lView, tNode) {\n  if (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3\n    /* TNodeType.AnyRNode */\n    | 12\n    /* TNodeType.AnyContainer */\n    | 32\n    /* TNodeType.Icu */\n    | 16\n    /* TNodeType.Projection */\n    );\n    const tNodeType = tNode.type;\n\n    if (tNodeType & 3\n    /* TNodeType.AnyRNode */\n    ) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & 4\n    /* TNodeType.Container */\n    ) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & 8\n    /* TNodeType.ElementContainer */\n    ) {\n      const elIcuContainerChild = tNode.child;\n\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & 32\n    /* TNodeType.Icu */\n    ) {\n      let nextRNode = icuContainerIterate(tNode, lView);\n      let rNode = nextRNode(); // If the ICU container has no nodes, than we use the ICU anchor as the node.\n\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getProjectionNodes(lView, tNode) {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const slotIdx = tNode.projection;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection[slotIdx];\n  }\n\n  return null;\n}\n\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex];\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n\n  return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\n\n\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\n\n\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertTNodeType(tNode, 3\n    /* TNodeType.AnyRNode */\n    | 12\n    /* TNodeType.AnyContainer */\n    | 16\n    /* TNodeType.Projection */\n    | 32\n    /* TNodeType.Icu */\n    );\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n\n    if (isProjection) {\n      if (action === 0\n      /* WalkTNodeTreeAction.Create */\n      ) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= 4\n        /* TNodeFlags.isProjected */\n        ;\n      }\n    }\n\n    if ((tNode.flags & 64\n    /* TNodeFlags.isDetached */\n    ) !== 64\n    /* TNodeFlags.isDetached */\n    ) {\n      if (tNodeType & 8\n      /* TNodeType.ElementContainer */\n      ) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 32\n      /* TNodeType.Icu */\n      ) {\n        const nextRNode = icuContainerIterate(tNode, lView);\n        let rNode;\n\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 16\n      /* TNodeType.Projection */\n      ) {\n        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, 3\n        /* TNodeType.AnyRNode */\n        | 4\n        /* TNodeType.Container */\n        );\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\n\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\n\n\nfunction applyProjection(tView, lView, tProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST];\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(renderer, 0\n  /* WalkTNodeTreeAction.Create */\n  , lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\n\n\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST];\n  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT];\n    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\n\n\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n\n  const native = unwrapRNode(lContainer); // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i];\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\n\n\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      renderer.removeClass(rNode, prop);\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n\n    if (value == null\n    /** || value === undefined */\n    ) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags |= RendererStyleFlags2.Important;\n      }\n\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\n\n\nfunction writeDirectStyle(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  renderer.setAttribute(element, 'style', newValue);\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\n\n\nfunction writeDirectClass(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\n\n\nfunction classIndexOf(className, classToSearch, startingIndex) {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32\n    /* CharCode.SPACE */\n    ) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n\n      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32\n      /* CharCode.SPACE */\n      ) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    } // False positive, keep searching from where we left off.\n\n\n    startingIndex = foundIndex + 1;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$4;\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\n\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n\n  while (i < attrs.length) {\n    let item = attrs[i++];\n\n    if (isProjectionMode && item === 'class') {\n      item = attrs[i];\n\n      if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {\n        return true;\n      }\n    } else if (item === 1\n    /* AttributeMarker.Classes */\n    ) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n\n      return false;\n    }\n  }\n\n  return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\n\n\nfunction isInlineTemplate(tNode) {\n  return tNode.type === 4\n  /* TNodeType.Container */\n  && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\n\n\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  const tagNameToCompare = tNode.type === 4\n  /* TNodeType.Container */\n  && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\n\n\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode = 4\n  /* SelectorFlags.ELEMENT */\n  ;\n  const nodeAttrs = tNode.attrs || []; // Find the index of first attribute that has no value, only a name.\n\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs); // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n\n  let skipToNextSelector = false;\n\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      } // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n\n\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = current | mode & 1\n      /* SelectorFlags.NOT */\n      ;\n      continue;\n    }\n\n    if (skipToNextSelector) continue;\n\n    if (mode & 4\n    /* SelectorFlags.ELEMENT */\n    ) {\n      mode = 2\n      /* SelectorFlags.ATTRIBUTE */\n      | mode & 1\n      /* SelectorFlags.NOT */\n      ;\n\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & 8\n      /* SelectorFlags.CLASS */\n      ? current : selector[++i]; // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n\n      if (mode & 8\n      /* SelectorFlags.CLASS */\n      && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n\n        continue;\n      }\n\n      const attrName = mode & 8\n      /* SelectorFlags.CLASS */\n      ? 'class' : current;\n      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue;\n\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0\n          /* AttributeMarker.NamespaceURI */\n          , 'We do not match directives on namespaced attributes'); // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n\n          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n        }\n\n        const compareAgainstClassName = mode & 8\n        /* SelectorFlags.CLASS */\n        ? nodeAttrValue : null;\n\n        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2\n        /* SelectorFlags.ATTRIBUTE */\n        && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n\n  return isPositive(mode) || skipToNextSelector;\n}\n\nfunction isPositive(mode) {\n  return (mode & 1\n  /* SelectorFlags.NOT */\n  ) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\n\n\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n  if (attrs === null) return -1;\n  let i = 0;\n\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n\n      if (maybeAttrName === name) {\n        return i;\n      } else if (maybeAttrName === 3\n      /* AttributeMarker.Bindings */\n      || maybeAttrName === 6\n      /* AttributeMarker.I18n */\n      ) {\n        bindingsMode = true;\n      } else if (maybeAttrName === 1\n      /* AttributeMarker.Classes */\n      || maybeAttrName === 2\n      /* AttributeMarker.Styles */\n      ) {\n        let value = attrs[++i]; // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n\n        continue;\n      } else if (maybeAttrName === 4\n      /* AttributeMarker.Template */\n      ) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === 0\n      /* AttributeMarker.NamespaceURI */\n      ) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      } // In binding mode there are only names, rather than name-value pairs.\n\n\n      i += bindingsMode ? 1 : 2;\n    } // We did not match the attribute\n\n\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\n\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getProjectAsAttrValue(tNode) {\n  const nodeAttrs = tNode.attrs;\n\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5\n    /* AttributeMarker.ProjectAs */\n    ); // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1];\n    }\n  }\n\n  return null;\n}\n\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n\n  return nodeAttrs.length;\n}\n\nfunction matchTemplateAttribute(attrs, name) {\n  let i = attrs.indexOf(4\n  /* AttributeMarker.Template */\n  );\n\n  if (i > -1) {\n    i++;\n\n    while (i < attrs.length) {\n      const attr = attrs[i]; // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n\n  return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\n\n\nfunction isSelectorInSelectorList(selector, list) {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\n\nfunction stringifyCSSSelector(selector) {\n  let result = selector[0];\n  let i = 1;\n  let mode = 2\n  /* SelectorFlags.ATTRIBUTE */\n  ;\n  let currentChunk = '';\n  let isNegativeMode = false;\n\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n\n    if (typeof valueOrMarker === 'string') {\n      if (mode & 2\n      /* SelectorFlags.ATTRIBUTE */\n      ) {\n        const attrValue = selector[++i];\n        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & 8\n      /* SelectorFlags.CLASS */\n      ) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & 4\n      /* SelectorFlags.ELEMENT */\n      ) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n\n      mode = valueOrMarker; // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n\n    i++;\n  }\n\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n\n  return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\n\n\nfunction stringifyCSSSelectorList(selectorList) {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\n\n\nfunction extractAttrsAndClassesFromSelector(selector) {\n  const attrs = [];\n  const classes = [];\n  let i = 1;\n  let mode = 2\n  /* SelectorFlags.ATTRIBUTE */\n  ;\n\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n\n    if (typeof valueOrMarker === 'string') {\n      if (mode === 2\n      /* SelectorFlags.ATTRIBUTE */\n      ) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i]);\n        }\n      } else if (mode === 8\n      /* SelectorFlags.CLASS */\n      ) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n\n    i++;\n  }\n\n  return {\n    attrs,\n    classes\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** A special value which designates that a value has not changed. */\n\n\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {\n  __brand__: 'NO_CHANGE'\n} : {};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\n\nfunction ɵɵadvance(delta) {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\n\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n  ngDevMode && assertIndexInDeclRange(lView, index); // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted = (lView[FLAGS] & 3\n    /* LViewFlags.InitPhaseStateMask */\n    ) === 3\n    /* InitPhaseState.InitPhaseCompleted */\n    ;\n\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, 0\n        /* InitPhaseState.OnInitHooksToBeRun */\n        , index);\n      }\n    }\n  } // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n\n\n  setSelectedIndex(index);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\n\n\nconst angularCoreDiEnv = {\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\n\nfunction compileInjectable(type, meta) {\n  let ngInjectableDef = null;\n  let ngFactoryDef = null; // if NG_PROV_DEF is already defined on this class then don't overwrite it\n\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0\n            /* JitCompilerUsage.Decorator */\n            ,\n            kind: 'injectable',\n            type\n          });\n          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n\n        return ngInjectableDef;\n      }\n    });\n  } // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n\n\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0\n            /* JitCompilerUsage.Decorator */\n            ,\n            kind: 'injectable',\n            type\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\n\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\n\nfunction isUseClassProvider(meta) {\n  return meta.useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta) {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta) {\n  return meta.useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta) {\n  return meta.useExisting !== undefined;\n}\n\nfunction getInjectableMetadata(type, srcMeta) {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta = srcMeta || {\n    providedIn: null\n  };\n  const compilerMeta = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn\n  };\n\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  } // Check to see if the user explicitly provided a `useXxxx` property.\n\n\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n\n  return compilerMeta;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\n\n\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\n\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\n\n\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\n\n\nclass Injector {\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return createInjector({\n        name: ''\n      }, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({\n        name\n      }, options.parent, options.providers, name);\n    }\n  }\n\n}\n\nInjector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\nInjector.NULL = /* @__PURE__ */new NullInjector();\n/** @nocollapse */\n\nInjector.ɵprov = ɵɵdefineInjectable({\n  token: Injector,\n  providedIn: 'any',\n  factory: () => ɵɵinject(INJECTOR)\n});\n/**\n * @internal\n * @nocollapse\n */\n\nInjector.__NG_ELEMENT_ID__ = -1\n/* InjectorMarkers.Injector */\n;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction findFirstClosedCycle(keys) {\n  const res = [];\n\n  for (let i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n\n    res.push(keys[i]);\n  }\n\n  return res;\n}\n\nfunction constructResolvingPath(keys) {\n  if (keys.length > 1) {\n    const reversed = findFirstClosedCycle(keys.slice().reverse());\n    const tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n\n  return '';\n}\n\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n  const keys = [key];\n  const errMsg = constructResolvingMessage(keys);\n  const error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n\nfunction addKey(injector, key) {\n  this.injectors.push(injector);\n  this.keys.push(key); // Note: This updated message won't be reflected in the `.stack` property\n\n  this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\n\n\nfunction noProviderError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    const first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\n\n\nfunction cyclicDependencyError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\n\n\nfunction instantiationError(injector, originalException, originalStack, key) {\n  return injectionError(injector, key, function (keys) {\n    const first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\n\n\nfunction invalidProviderError(provider) {\n  return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\n\n\nfunction noAnnotationError(typeOrFunc, params) {\n  const signature = [];\n\n  for (let i = 0, ii = params.length; i < ii; i++) {\n    const parameter = params[i];\n\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n\n  return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' + stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\n\n\nfunction outOfBoundsError(index) {\n  return Error(`Index ${index} is out-of-bounds.`);\n} // TODO: add a working example after alpha38 is released\n\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\n\n\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\n\n\nclass ReflectiveKey {\n  /**\n   * Private\n   */\n  constructor(token, id) {\n    this.token = token;\n    this.id = id;\n\n    if (!token) {\n      throw new RuntimeError(208\n      /* RuntimeErrorCode.MISSING_INJECTION_TOKEN */\n      , ngDevMode && 'Token must be defined!');\n    }\n\n    this.displayName = stringify(this.token);\n  }\n  /**\n   * Retrieves a `Key` for a token.\n   */\n\n\n  static get(token) {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n  /**\n   * @returns the number of keys registered in the system.\n   */\n\n\n  static get numberOfKeys() {\n    return _globalKeyRegistry.numberOfKeys;\n  }\n\n}\n\nclass KeyRegistry {\n  constructor() {\n    this._allKeys = new Map();\n  }\n\n  get(token) {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n\n    const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n\n    this._allKeys.set(token, newKey);\n\n    return newKey;\n  }\n\n  get numberOfKeys() {\n    return this._allKeys.size;\n  }\n\n}\n\nconst _globalKeyRegistry = new KeyRegistry();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\n\n\nclass ReflectiveDependency {\n  constructor(key, optional, visibility) {\n    this.key = key;\n    this.optional = optional;\n    this.visibility = visibility;\n  }\n\n  static fromKey(key) {\n    return new ReflectiveDependency(key, false, null);\n  }\n\n}\n\nconst _EMPTY_LIST = [];\n\nclass ResolvedReflectiveProvider_ {\n  constructor(key, resolvedFactories, multiProvider) {\n    this.key = key;\n    this.resolvedFactories = resolvedFactories;\n    this.multiProvider = multiProvider;\n    this.resolvedFactory = this.resolvedFactories[0];\n  }\n\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\n\n\nclass ResolvedReflectiveFactory {\n  constructor(\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  factory,\n  /**\n   * Arguments (dependencies) to the `factory` function.\n   */\n  dependencies) {\n    this.factory = factory;\n    this.dependencies = dependencies;\n  }\n\n}\n/**\n * Resolve a single provider.\n */\n\n\nfunction resolveReflectiveFactory(provider) {\n  let factoryFn;\n  let resolvedDeps;\n\n  if (provider.useClass) {\n    const useClass = resolveForwardRef(provider.useClass);\n    factoryFn = getReflect().factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = aliasInstance => aliasInstance;\n\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n\n    resolvedDeps = _EMPTY_LIST;\n  }\n\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\n\n\nfunction resolveReflectiveProvider(provider) {\n  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n */\n\n\nfunction resolveReflectiveProviders(providers) {\n  const normalized = _normalizeProviders(providers, []);\n\n  const resolved = normalized.map(resolveReflectiveProvider);\n  const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\n\n\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n  for (let i = 0; i < providers.length; i++) {\n    const provider = providers[i];\n    const existing = normalizedProvidersMap.get(provider.key.id);\n\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n\n      if (provider.multiProvider) {\n        for (let j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let resolvedProvider;\n\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n\n  return normalizedProvidersMap;\n}\n\nfunction _normalizeProviders(providers, res) {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({\n        provide: b,\n        useClass: b\n      });\n    } else if (b && typeof b == 'object' && b.provide !== undefined) {\n      res.push(b);\n    } else if (Array.isArray(b)) {\n      _normalizeProviders(b, res);\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n  return res;\n}\n\nfunction constructDependencies(typeOrFunc, dependencies) {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const params = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n\nfunction _dependenciesFor(typeOrFunc) {\n  const params = getReflect().parameters(typeOrFunc);\n  if (!params) return [];\n\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n\nfunction _extractToken(typeOrFunc, metadata, params) {\n  let token = null;\n  let optional = false;\n\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n\n  let visibility = null;\n\n  for (let i = 0; i < metadata.length; ++i) {\n    const paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    } else if (paramMetadata instanceof InjectionToken) {\n      token = paramMetadata;\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\n\nfunction _createDependency(token, optional, visibility) {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Threshold for the dynamic version\n\n\nconst UNDEFINED = {};\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\n\nclass ReflectiveInjector {\n  /**\n   * Turns an array of provider definitions into an array of resolved providers.\n   *\n   * A resolution is a process of flattening multiple nested arrays and converting individual\n   * providers into an array of `ResolvedReflectiveProvider`s.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n   *\n   * expect(providers.length).toEqual(2);\n   *\n   * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n   * expect(providers[0].key.displayName).toBe(\"Car\");\n   * expect(providers[0].dependencies.length).toEqual(1);\n   * expect(providers[0].factory).toBeDefined();\n   *\n   * expect(providers[1].key.displayName).toBe(\"Engine\");\n   * });\n   * ```\n   *\n   */\n  static resolve(providers) {\n    return resolveReflectiveProviders(providers);\n  }\n  /**\n   * Resolves an array of providers and creates an injector from those providers.\n   *\n   * The passed-in providers can be an array of `Type`, `Provider`,\n   * or a recursive array of more providers.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n\n\n  static resolveAndCreate(providers, parent) {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n  /**\n   * Creates an injector from previously resolved providers.\n   *\n   * This API is the recommended way to construct injectors in performance-sensitive parts.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, Engine]);\n   * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n\n\n  static fromResolvedProviders(providers, parent) {\n    return new ReflectiveInjector_(providers, parent);\n  }\n\n}\n\nclass ReflectiveInjector_ {\n  /**\n   * Private\n   */\n  constructor(_providers, _parent) {\n    /** @internal */\n    this._constructionCounter = 0;\n    this._providers = _providers;\n    this.parent = _parent || null;\n    const len = _providers.length;\n    this.keyIds = [];\n    this.objs = [];\n\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n\n  resolveAndCreateChild(providers) {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n\n  createChildFromResolved(providers) {\n    const inj = new ReflectiveInjector_(providers);\n    inj.parent = this;\n    return inj;\n  }\n\n  resolveAndInstantiate(provider) {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n\n  instantiateResolved(provider) {\n    return this._instantiateProvider(provider);\n  }\n\n  getProviderAtIndex(index) {\n    if (index < 0 || index >= this._providers.length) {\n      throw outOfBoundsError(index);\n    }\n\n    return this._providers[index];\n  }\n  /** @internal */\n\n\n  _new(provider) {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw cyclicDependencyError(this, provider.key);\n    }\n\n    return this._instantiateProvider(provider);\n  }\n\n  _getMaxNumberOfObjects() {\n    return this.objs.length;\n  }\n\n  _instantiateProvider(provider) {\n    if (provider.multiProvider) {\n      const res = [];\n\n      for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n\n  _instantiate(provider, ResolvedReflectiveFactory) {\n    const factory = ResolvedReflectiveFactory.factory;\n    let deps;\n\n    try {\n      deps = ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch (e) {\n      if (e.addKey) {\n        e.addKey(this, provider.key);\n      }\n\n      throw e;\n    }\n\n    let obj;\n\n    try {\n      obj = factory(...deps);\n    } catch (e) {\n      throw instantiationError(this, e, e.stack, provider.key);\n    }\n\n    return obj;\n  }\n\n  _getByReflectiveDependency(dep) {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n\n  _getByKey(key, visibility, notFoundValue) {\n    if (key === ReflectiveInjector_.INJECTOR_KEY) {\n      return this;\n    }\n\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n\n  _getObjByKeyId(keyId) {\n    for (let i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n\n        return this.objs[i];\n      }\n    }\n\n    return UNDEFINED;\n  }\n  /** @internal */\n\n\n  _throwOrNull(key, notFoundValue) {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw noProviderError(this, key);\n    }\n  }\n  /** @internal */\n\n\n  _getByKeySelf(key, notFoundValue) {\n    const obj = this._getObjByKeyId(key.id);\n\n    return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);\n  }\n  /** @internal */\n\n\n  _getByKeyDefault(key, notFoundValue, visibility) {\n    let inj;\n\n    if (visibility instanceof SkipSelf) {\n      inj = this.parent;\n    } else {\n      inj = this;\n    }\n\n    while (inj instanceof ReflectiveInjector_) {\n      const inj_ = inj;\n\n      const obj = inj_._getObjByKeyId(key.id);\n\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_.parent;\n    }\n\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n\n  get displayName() {\n    const providers = _mapProviders(this, b => ' \"' + b.key.displayName + '\" ').join(', ');\n\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n\n  toString() {\n    return this.displayName;\n  }\n\n}\n\nReflectiveInjector_.INJECTOR_KEY = /* @__PURE__ */ReflectiveKey.get(Injector);\n\nfunction _mapProviders(injector, fn) {\n  const res = [];\n\n  for (let i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n\n  return res;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n  const lView = getLView(); // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n\n  const tNode = getCurrentTNode();\n  return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵinvalidFactory() {\n  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!\n */\n\n/**\n * Creates an `Array` construction with a given name. This is useful when\n * looking for memory consumption to see what time of array it is.\n *\n *\n * @param name Name to give to the constructor\n * @returns A subclass of `Array` if possible. This can only be done in\n *          environments which support `class` construct.\n */\n\n\nfunction createNamedArrayType(name) {\n  // This should never be called in prod mode, so let's verify that is the case.\n  if (ngDevMode) {\n    try {\n      // If this function were compromised the following could lead to arbitrary\n      // script execution. We bless it with Trusted Types anyway since this\n      // function is stripped out of production binaries.\n      return newTrustedFunctionForDev('Array', `return class ${name} extends Array{}`)(Array);\n    } catch (e) {\n      // If it does not work just give up and fall back to regular Array.\n      return Array;\n    }\n  } else {\n    throw new Error('Looks like we are in \\'prod mode\\', but we are creating a named Array type, which is wrong! Check your code');\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction toTStylingRange(prev, next) {\n  ngDevMode && assertNumberInRange(prev, 0, 32767\n  /* StylingRange.UNSIGNED_MASK */\n  );\n  ngDevMode && assertNumberInRange(next, 0, 32767\n  /* StylingRange.UNSIGNED_MASK */\n  );\n  return prev << 17\n  /* StylingRange.PREV_SHIFT */\n  | next << 2\n  /* StylingRange.NEXT_SHIFT */\n  ;\n}\n\nfunction getTStylingRangePrev(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange >> 17\n  /* StylingRange.PREV_SHIFT */\n  & 32767\n  /* StylingRange.UNSIGNED_MASK */\n  ;\n}\n\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 2\n  /* StylingRange.PREV_DUPLICATE */\n  ) == 2\n  /* StylingRange.PREV_DUPLICATE */\n  ;\n}\n\nfunction setTStylingRangePrev(tStylingRange, previous) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, 32767\n  /* StylingRange.UNSIGNED_MASK */\n  );\n  return tStylingRange & ~4294836224\n  /* StylingRange.PREV_MASK */\n  | previous << 17\n  /* StylingRange.PREV_SHIFT */\n  ;\n}\n\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 2\n  /* StylingRange.PREV_DUPLICATE */\n  ;\n}\n\nfunction getTStylingRangeNext(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 131068\n  /* StylingRange.NEXT_MASK */\n  ) >> 2\n  /* StylingRange.NEXT_SHIFT */\n  ;\n}\n\nfunction setTStylingRangeNext(tStylingRange, next) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, 32767\n  /* StylingRange.UNSIGNED_MASK */\n  );\n  return tStylingRange & ~131068\n  /* StylingRange.NEXT_MASK */\n  | //\n  next << 2\n  /* StylingRange.NEXT_SHIFT */\n  ;\n}\n\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 1\n  /* StylingRange.NEXT_DUPLICATE */\n  ) === 1\n  /* StylingRange.NEXT_DUPLICATE */\n  ;\n}\n\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 1\n  /* StylingRange.NEXT_DUPLICATE */\n  ;\n}\n\nfunction getTStylingRangeTail(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Patch a `debug` property on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debug Value to patch\n */\n\n\nfunction attachDebugObject(obj, debug) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      value: debug,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\n\n\nfunction attachDebugGetter(obj, debugGetter) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      get: debugGetter,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * This file contains conditionally attached classes which provide human readable (debug) level\n * information for `LView`, `LContainer` and other internal data structures. These data structures\n * are stored internally as array which makes it very difficult during debugging to reason about the\n * current state of the system.\n *\n * Patching the array with extra property does change the array's hidden class' but it does not\n * change the cost of access, therefore this patching should not have significant if any impact in\n * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n *\n * So instead of seeing:\n * ```\n * Array(30) [Object, 659, null, …]\n * ```\n *\n * You get to see:\n * ```\n * LViewDebug {\n *   views: [...],\n *   flags: {attached: true, ...}\n *   nodes: [\n *     {html: '<div id=\"123\">', ..., nodes: [\n *       {html: '<span>', ..., nodes: null}\n *     ]}\n *   ]\n * }\n * ```\n */\n\n\nlet LVIEW_COMPONENT_CACHE;\nlet LVIEW_EMBEDDED_CACHE;\nlet LVIEW_ROOT;\nlet LVIEW_COMPONENT;\nlet LVIEW_EMBEDDED;\n/**\n * This function clones a blueprint and creates LView.\n *\n * Simple slice will keep the same type, and we need it to be LView\n */\n\nfunction cloneToLViewFromTViewBlueprint(tView) {\n  const debugTView = tView;\n  const lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);\n  return lView.concat(tView.blueprint);\n}\n\nclass LRootView extends Array {}\n\nclass LComponentView extends Array {}\n\nclass LEmbeddedView extends Array {}\n\nfunction getLViewToClone(type, name) {\n  switch (type) {\n    case 0\n    /* TViewType.Root */\n    :\n      if (LVIEW_ROOT === undefined) LVIEW_ROOT = new LRootView();\n      return LVIEW_ROOT;\n\n    case 1\n    /* TViewType.Component */\n    :\n      if (!ngDevMode || !ngDevMode.namedConstructors) {\n        if (LVIEW_COMPONENT === undefined) LVIEW_COMPONENT = new LComponentView();\n        return LVIEW_COMPONENT;\n      }\n\n      if (LVIEW_COMPONENT_CACHE === undefined) LVIEW_COMPONENT_CACHE = new Map();\n      let componentArray = LVIEW_COMPONENT_CACHE.get(name);\n\n      if (componentArray === undefined) {\n        componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();\n        LVIEW_COMPONENT_CACHE.set(name, componentArray);\n      }\n\n      return componentArray;\n\n    case 2\n    /* TViewType.Embedded */\n    :\n      if (!ngDevMode || !ngDevMode.namedConstructors) {\n        if (LVIEW_EMBEDDED === undefined) LVIEW_EMBEDDED = new LEmbeddedView();\n        return LVIEW_EMBEDDED;\n      }\n\n      if (LVIEW_EMBEDDED_CACHE === undefined) LVIEW_EMBEDDED_CACHE = new Map();\n      let embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);\n\n      if (embeddedArray === undefined) {\n        embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();\n        LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);\n      }\n\n      return embeddedArray;\n  }\n}\n\nfunction nameSuffix(text) {\n  if (text == null) return '';\n  const index = text.lastIndexOf('_Template');\n  return '_' + (index === -1 ? text : text.slice(0, index));\n}\n/**\n * This class is a debug version of Object literal so that we can have constructor name show up\n * in\n * debug tools in ngDevMode.\n */\n\n\nconst TViewConstructor = class TView {\n  constructor(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {\n    this.type = type;\n    this.blueprint = blueprint;\n    this.template = template;\n    this.queries = queries;\n    this.viewQuery = viewQuery;\n    this.declTNode = declTNode;\n    this.data = data;\n    this.bindingStartIndex = bindingStartIndex;\n    this.expandoStartIndex = expandoStartIndex;\n    this.hostBindingOpCodes = hostBindingOpCodes;\n    this.firstCreatePass = firstCreatePass;\n    this.firstUpdatePass = firstUpdatePass;\n    this.staticViewQueries = staticViewQueries;\n    this.staticContentQueries = staticContentQueries;\n    this.preOrderHooks = preOrderHooks;\n    this.preOrderCheckHooks = preOrderCheckHooks;\n    this.contentHooks = contentHooks;\n    this.contentCheckHooks = contentCheckHooks;\n    this.viewHooks = viewHooks;\n    this.viewCheckHooks = viewCheckHooks;\n    this.destroyHooks = destroyHooks;\n    this.cleanup = cleanup;\n    this.contentQueries = contentQueries;\n    this.components = components;\n    this.directiveRegistry = directiveRegistry;\n    this.pipeRegistry = pipeRegistry;\n    this.firstChild = firstChild;\n    this.schemas = schemas;\n    this.consts = consts;\n    this.incompleteFirstPass = incompleteFirstPass;\n    this._decls = _decls;\n    this._vars = _vars;\n  }\n\n  get template_() {\n    const buf = [];\n    processTNodeChildren(this.firstChild, buf);\n    return buf.join('');\n  }\n\n  get type_() {\n    return TViewTypeAsString[this.type] || `TViewType.?${this.type}?`;\n  }\n\n};\n\nclass TNode {\n  constructor(tView_, //\n  type, //\n  index, //\n  insertBeforeIndex, //\n  injectorIndex, //\n  directiveStart, //\n  directiveEnd, //\n  directiveStylingLast, //\n  propertyBindings, //\n  flags, //\n  providerIndexes, //\n  value, //\n  attrs, //\n  mergedAttrs, //\n  localNames, //\n  initialInputs, //\n  inputs, //\n  outputs, //\n  tViews, //\n  next, //\n  projectionNext, //\n  child, //\n  parent, //\n  projection, //\n  styles, //\n  stylesWithoutHost, //\n  residualStyles, //\n  classes, //\n  classesWithoutHost, //\n  residualClasses, //\n  classBindings, //\n  styleBindings) {\n    this.tView_ = tView_;\n    this.type = type;\n    this.index = index;\n    this.insertBeforeIndex = insertBeforeIndex;\n    this.injectorIndex = injectorIndex;\n    this.directiveStart = directiveStart;\n    this.directiveEnd = directiveEnd;\n    this.directiveStylingLast = directiveStylingLast;\n    this.propertyBindings = propertyBindings;\n    this.flags = flags;\n    this.providerIndexes = providerIndexes;\n    this.value = value;\n    this.attrs = attrs;\n    this.mergedAttrs = mergedAttrs;\n    this.localNames = localNames;\n    this.initialInputs = initialInputs;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.tViews = tViews;\n    this.next = next;\n    this.projectionNext = projectionNext;\n    this.child = child;\n    this.parent = parent;\n    this.projection = projection;\n    this.styles = styles;\n    this.stylesWithoutHost = stylesWithoutHost;\n    this.residualStyles = residualStyles;\n    this.classes = classes;\n    this.classesWithoutHost = classesWithoutHost;\n    this.residualClasses = residualClasses;\n    this.classBindings = classBindings;\n    this.styleBindings = styleBindings;\n  }\n  /**\n   * Return a human debug version of the set of `NodeInjector`s which will be consulted when\n   * resolving tokens from this `TNode`.\n   *\n   * When debugging applications, it is often difficult to determine which `NodeInjector`s will be\n   * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be\n   * consulted in order when resolving a token starting at this `TNode`.\n   *\n   * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is\n   * difficult to reason about.\n   *\n   * @param lView The `LView` instance for this `TNode`.\n   */\n\n\n  debugNodeInjectorPath(lView) {\n    const path = [];\n    let injectorIndex = getInjectorIndex(this, lView);\n\n    if (injectorIndex === -1) {\n      // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for\n      // parent NodeInjector.\n      const parentLocation = getParentInjectorLocation(this, lView);\n\n      if (parentLocation !== NO_PARENT_INJECTOR) {\n        // We found a parent, so start searching from the parent location.\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {// No parents have been found, so there are no `NodeInjector`s to consult.\n      }\n    }\n\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n      const tNode = lView[TVIEW].data[injectorIndex + 8\n      /* NodeInjectorOffset.TNODE */\n      ];\n      path.push(buildDebugNode(tNode, lView));\n      const parentLocation = lView[injectorIndex + 8\n      /* NodeInjectorOffset.PARENT */\n      ];\n\n      if (parentLocation === NO_PARENT_INJECTOR) {\n        injectorIndex = -1;\n      } else {\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n\n    return path;\n  }\n\n  get type_() {\n    return toTNodeTypeAsString(this.type) || `TNodeType.?${this.type}?`;\n  }\n\n  get flags_() {\n    const flags = [];\n    if (this.flags & 16\n    /* TNodeFlags.hasClassInput */\n    ) flags.push('TNodeFlags.hasClassInput');\n    if (this.flags & 8\n    /* TNodeFlags.hasContentQuery */\n    ) flags.push('TNodeFlags.hasContentQuery');\n    if (this.flags & 32\n    /* TNodeFlags.hasStyleInput */\n    ) flags.push('TNodeFlags.hasStyleInput');\n    if (this.flags & 128\n    /* TNodeFlags.hasHostBindings */\n    ) flags.push('TNodeFlags.hasHostBindings');\n    if (this.flags & 2\n    /* TNodeFlags.isComponentHost */\n    ) flags.push('TNodeFlags.isComponentHost');\n    if (this.flags & 1\n    /* TNodeFlags.isDirectiveHost */\n    ) flags.push('TNodeFlags.isDirectiveHost');\n    if (this.flags & 64\n    /* TNodeFlags.isDetached */\n    ) flags.push('TNodeFlags.isDetached');\n    if (this.flags & 4\n    /* TNodeFlags.isProjected */\n    ) flags.push('TNodeFlags.isProjected');\n    return flags.join('|');\n  }\n\n  get template_() {\n    if (this.type & 1\n    /* TNodeType.Text */\n    ) return this.value;\n    const buf = [];\n    const tagName = typeof this.value === 'string' && this.value || this.type_;\n    buf.push('<', tagName);\n\n    if (this.flags) {\n      buf.push(' ', this.flags_);\n    }\n\n    if (this.attrs) {\n      for (let i = 0; i < this.attrs.length;) {\n        const attrName = this.attrs[i++];\n\n        if (typeof attrName == 'number') {\n          break;\n        }\n\n        const attrValue = this.attrs[i++];\n        buf.push(' ', attrName, '=\"', attrValue, '\"');\n      }\n    }\n\n    buf.push('>');\n    processTNodeChildren(this.child, buf);\n    buf.push('</', tagName, '>');\n    return buf.join('');\n  }\n\n  get styleBindings_() {\n    return toDebugStyleBinding(this, false);\n  }\n\n  get classBindings_() {\n    return toDebugStyleBinding(this, true);\n  }\n\n  get providerIndexStart_() {\n    return this.providerIndexes & 1048575\n    /* TNodeProviderIndexes.ProvidersStartIndexMask */\n    ;\n  }\n\n  get providerIndexEnd_() {\n    return this.providerIndexStart_ + (this.providerIndexes >>> 20\n    /* TNodeProviderIndexes.CptViewProvidersCountShift */\n    );\n  }\n\n}\n\nconst TNodeDebug = TNode;\n\nfunction toDebugStyleBinding(tNode, isClassBased) {\n  const tData = tNode.tView_.data;\n  const bindings = [];\n  const range = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  const prev = getTStylingRangePrev(range);\n  const next = getTStylingRangeNext(range);\n  let isTemplate = next !== 0;\n  let cursor = isTemplate ? next : prev;\n\n  while (cursor !== 0) {\n    const itemKey = tData[cursor];\n    const itemRange = tData[cursor + 1];\n    bindings.unshift({\n      key: itemKey,\n      index: cursor,\n      isTemplate: isTemplate,\n      prevDuplicate: getTStylingRangePrevDuplicate(itemRange),\n      nextDuplicate: getTStylingRangeNextDuplicate(itemRange),\n      nextIndex: getTStylingRangeNext(itemRange),\n      prevIndex: getTStylingRangePrev(itemRange)\n    });\n    if (cursor === prev) isTemplate = false;\n    cursor = getTStylingRangePrev(itemRange);\n  }\n\n  bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);\n  return bindings;\n}\n\nfunction processTNodeChildren(tNode, buf) {\n  while (tNode) {\n    buf.push(tNode.template_);\n    tNode = tNode.next;\n  }\n}\n\nclass TViewData extends Array {}\n\nlet TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because\n// `LView` constructor could have side-effects.\n\n/**\n * This function clones a blueprint and creates TData.\n *\n * Simple slice will keep the same type, and we need it to be TData\n */\n\nfunction cloneToTViewData(list) {\n  if (TVIEWDATA_EMPTY === undefined) TVIEWDATA_EMPTY = new TViewData();\n  return TVIEWDATA_EMPTY.concat(list);\n}\n\nclass LViewBlueprint extends Array {}\n\nclass MatchesArray extends Array {}\n\nclass TViewComponents extends Array {}\n\nclass TNodeLocalNames extends Array {}\n\nclass TNodeInitialInputs extends Array {}\n\nclass LCleanup extends Array {}\n\nclass TCleanup extends Array {}\n\nfunction attachLViewDebug(lView) {\n  attachDebugObject(lView, new LViewDebug(lView));\n}\n\nfunction attachLContainerDebug(lContainer) {\n  attachDebugObject(lContainer, new LContainerDebug(lContainer));\n}\n\nfunction toDebug(obj) {\n  if (obj) {\n    const debug = obj.debug;\n    assertDefined(debug, 'Object does not have a debug representation.');\n    return debug;\n  } else {\n    return obj;\n  }\n}\n/**\n * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n * reading.\n *\n * @param value possibly wrapped native DOM node.\n * @param includeChildren If `true` then the serialized HTML form will include child elements\n * (same\n * as `outerHTML`). If `false` then the serialized HTML form will only contain the element\n * itself\n * (will not serialize child elements).\n */\n\n\nfunction toHtml(value, includeChildren = false) {\n  const node = unwrapRNode(value);\n\n  if (node) {\n    switch (node.nodeType) {\n      case Node.TEXT_NODE:\n        return node.textContent;\n\n      case Node.COMMENT_NODE:\n        return `<!--${node.textContent}-->`;\n\n      case Node.ELEMENT_NODE:\n        const outerHTML = node.outerHTML;\n\n        if (includeChildren) {\n          return outerHTML;\n        } else {\n          const innerHTML = '>' + node.innerHTML + '<';\n          return outerHTML.split(innerHTML)[0] + '>';\n        }\n\n    }\n  }\n\n  return null;\n}\n\nclass LViewDebug {\n  constructor(_raw_lView) {\n    this._raw_lView = _raw_lView;\n  }\n  /**\n   * Flags associated with the `LView` unpacked into a more readable state.\n   */\n\n\n  get flags() {\n    const flags = this._raw_lView[FLAGS];\n    return {\n      __raw__flags__: flags,\n      initPhaseState: flags & 3\n      /* LViewFlags.InitPhaseStateMask */\n      ,\n      creationMode: !!(flags & 4\n      /* LViewFlags.CreationMode */\n      ),\n      firstViewPass: !!(flags & 8\n      /* LViewFlags.FirstLViewPass */\n      ),\n      checkAlways: !!(flags & 16\n      /* LViewFlags.CheckAlways */\n      ),\n      dirty: !!(flags & 32\n      /* LViewFlags.Dirty */\n      ),\n      attached: !!(flags & 64\n      /* LViewFlags.Attached */\n      ),\n      destroyed: !!(flags & 128\n      /* LViewFlags.Destroyed */\n      ),\n      isRoot: !!(flags & 256\n      /* LViewFlags.IsRoot */\n      ),\n      indexWithinInitPhase: flags >> 11\n      /* LViewFlags.IndexWithinInitPhaseShift */\n\n    };\n  }\n\n  get parent() {\n    return toDebug(this._raw_lView[PARENT]);\n  }\n\n  get hostHTML() {\n    return toHtml(this._raw_lView[HOST], true);\n  }\n\n  get html() {\n    return (this.nodes || []).map(mapToHTML).join('');\n  }\n\n  get context() {\n    return this._raw_lView[CONTEXT];\n  }\n  /**\n   * The tree of nodes associated with the current `LView`. The nodes have been normalized into\n   * a tree structure with relevant details pulled out for readability.\n   */\n\n\n  get nodes() {\n    const lView = this._raw_lView;\n    const tNode = lView[TVIEW].firstChild;\n    return toDebugNodes(tNode, lView);\n  }\n\n  get template() {\n    return this.tView.template_;\n  }\n\n  get tView() {\n    return this._raw_lView[TVIEW];\n  }\n\n  get cleanup() {\n    return this._raw_lView[CLEANUP];\n  }\n\n  get injector() {\n    return this._raw_lView[INJECTOR$1];\n  }\n\n  get rendererFactory() {\n    return this._raw_lView[RENDERER_FACTORY];\n  }\n\n  get renderer() {\n    return this._raw_lView[RENDERER];\n  }\n\n  get sanitizer() {\n    return this._raw_lView[SANITIZER];\n  }\n\n  get childHead() {\n    return toDebug(this._raw_lView[CHILD_HEAD]);\n  }\n\n  get next() {\n    return toDebug(this._raw_lView[NEXT]);\n  }\n\n  get childTail() {\n    return toDebug(this._raw_lView[CHILD_TAIL]);\n  }\n\n  get declarationView() {\n    return toDebug(this._raw_lView[DECLARATION_VIEW]);\n  }\n\n  get queries() {\n    return this._raw_lView[QUERIES];\n  }\n\n  get tHost() {\n    return this._raw_lView[T_HOST];\n  }\n\n  get id() {\n    return this._raw_lView[ID];\n  }\n\n  get decls() {\n    return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);\n  }\n\n  get vars() {\n    return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);\n  }\n\n  get expando() {\n    return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);\n  }\n  /**\n   * Normalized view of child views (and containers) attached at this location.\n   */\n\n\n  get childViews() {\n    const childViews = [];\n    let child = this.childHead;\n\n    while (child) {\n      childViews.push(child);\n      child = child.next;\n    }\n\n    return childViews;\n  }\n\n}\n\nfunction mapToHTML(node) {\n  if (node.type === 'ElementContainer') {\n    return (node.children || []).map(mapToHTML).join('');\n  } else if (node.type === 'IcuContainer') {\n    throw new Error('Not implemented');\n  } else {\n    return toHtml(node.native, true) || '';\n  }\n}\n\nfunction toLViewRange(tView, lView, start, end) {\n  let content = [];\n\n  for (let index = start; index < end; index++) {\n    content.push({\n      index: index,\n      t: tView.data[index],\n      l: lView[index]\n    });\n  }\n\n  return {\n    start: start,\n    end: end,\n    length: end - start,\n    content: content\n  };\n}\n/**\n * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n *\n * @param tNode\n * @param lView\n */\n\n\nfunction toDebugNodes(tNode, lView) {\n  if (tNode) {\n    const debugNodes = [];\n    let tNodeCursor = tNode;\n\n    while (tNodeCursor) {\n      debugNodes.push(buildDebugNode(tNodeCursor, lView));\n      tNodeCursor = tNodeCursor.next;\n    }\n\n    return debugNodes;\n  } else {\n    return [];\n  }\n}\n\nfunction buildDebugNode(tNode, lView) {\n  const rawValue = lView[tNode.index];\n  const native = unwrapRNode(rawValue);\n  const factories = [];\n  const instances = [];\n  const tView = lView[TVIEW];\n\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const def = tView.data[i];\n    factories.push(def.type);\n    instances.push(lView[i]);\n  }\n\n  return {\n    html: toHtml(native),\n    type: toTNodeTypeAsString(tNode.type),\n    tNode,\n    native: native,\n    children: toDebugNodes(tNode.child, lView),\n    factories,\n    instances,\n    injector: buildNodeInjectorDebug(tNode, tView, lView),\n\n    get injectorResolutionPath() {\n      return tNode.debugNodeInjectorPath(lView);\n    }\n\n  };\n}\n\nfunction buildNodeInjectorDebug(tNode, tView, lView) {\n  const viewProviders = [];\n\n  for (let i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {\n    viewProviders.push(tView.data[i]);\n  }\n\n  const providers = [];\n\n  for (let i = tNode.providerIndexEnd_; i < tNode.directiveEnd; i++) {\n    providers.push(tView.data[i]);\n  }\n\n  const nodeInjectorDebug = {\n    bloom: toBloom(lView, tNode.injectorIndex),\n    cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),\n    providers,\n    viewProviders,\n    parentInjectorIndex: lView[tNode.providerIndexStart_ - 1]\n  };\n  return nodeInjectorDebug;\n}\n/**\n * Convert a number at `idx` location in `array` into binary representation.\n *\n * @param array\n * @param idx\n */\n\n\nfunction binary(array, idx) {\n  const value = array[idx]; // If not a number we print 8 `?` to retain alignment but let user know that it was called on\n  // wrong type.\n\n  if (typeof value !== 'number') return '????????'; // We prefix 0s so that we have constant length number\n\n  const text = '00000000' + value.toString(2);\n  return text.substring(text.length - 8);\n}\n/**\n * Convert a bloom filter at location `idx` in `array` into binary representation.\n *\n * @param array\n * @param idx\n */\n\n\nfunction toBloom(array, idx) {\n  if (idx < 0) {\n    return 'NO_NODE_INJECTOR';\n  }\n\n  return `${binary(array, idx + 7)}_${binary(array, idx + 6)}_${binary(array, idx + 5)}_${binary(array, idx + 4)}_${binary(array, idx + 3)}_${binary(array, idx + 2)}_${binary(array, idx + 1)}_${binary(array, idx + 0)}`;\n}\n\nclass LContainerDebug {\n  constructor(_raw_lContainer) {\n    this._raw_lContainer = _raw_lContainer;\n  }\n\n  get hasTransplantedViews() {\n    return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];\n  }\n\n  get views() {\n    return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET).map(toDebug);\n  }\n\n  get parent() {\n    return toDebug(this._raw_lContainer[PARENT]);\n  }\n\n  get movedViews() {\n    return this._raw_lContainer[MOVED_VIEWS];\n  }\n\n  get host() {\n    return this._raw_lContainer[HOST];\n  }\n\n  get native() {\n    return this._raw_lContainer[NATIVE];\n  }\n\n  get next() {\n    return toDebug(this._raw_lContainer[NEXT]);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\n\n\nfunction processHostBindingOpCodes(tView, lView) {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i];\n\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i];\n        const hostBindingFn = hostBindingOpCodes[++i];\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(2\n        /* RenderFlags.Update */\n        , context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n/** Refreshes all content queries declared by directives in a given view */\n\n\nfunction refreshContentQueries(tView, lView) {\n  const contentQueries = tView.contentQueries;\n\n  if (contentQueries !== null) {\n    for (let i = 0; i < contentQueries.length; i += 2) {\n      const queryStartIdx = contentQueries[i];\n      const directiveDefIdx = contentQueries[i + 1];\n\n      if (directiveDefIdx !== -1) {\n        const directiveDef = tView.data[directiveDefIdx];\n        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n        ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n        setCurrentQueryIndex(queryStartIdx);\n        directiveDef.contentQueries(2\n        /* RenderFlags.Update */\n        , lView[directiveDefIdx], directiveDefIdx);\n      }\n    }\n  }\n}\n/** Refreshes child components in the current view (update mode). */\n\n\nfunction refreshChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    refreshComponent(hostLView, components[i]);\n  }\n}\n/** Renders child components in the current view (creation mode). */\n\n\nfunction renderChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\n\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector, embeddedViewInjector) {\n  const lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();\n  lView[HOST] = host;\n  lView[FLAGS] = flags | 4\n  /* LViewFlags.CreationMode */\n  | 64\n  /* LViewFlags.Attached */\n  | 8\n  /* LViewFlags.FirstLViewPass */\n  ;\n\n  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 1024\n  /* LViewFlags.HasEmbeddedViewInjector */\n  ) {\n    lView[FLAGS] |= 1024\n    /* LViewFlags.HasEmbeddedViewInjector */\n    ;\n  }\n\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n  lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n  ngDevMode && assertEqual(tView.type == 2\n  /* TViewType.Embedded */\n  ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2\n  /* TViewType.Embedded */\n  ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n  ngDevMode && attachLViewDebug(lView);\n  return lView;\n}\n\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.'); // Keep this function short, so that the VM will inline it.\n\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index];\n\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= 64\n      /* TNodeFlags.isDetached */\n      ;\n    }\n  } else if (tNode.type & 64\n  /* TNodeType.Placeholder */\n  ) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n\n  setCurrentTNode(tNode, true);\n  return tNode;\n}\n\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent; // Parents cannot cross component boundaries because components will be used in multiple places.\n\n  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs); // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n      }\n    }\n  }\n\n  return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\n\n\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n  if (numSlotsToAlloc === 0) return -1;\n\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n\n  const allocIdx = lView.length;\n\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n\n  return allocIdx;\n} //////////////////////////\n//// Render\n//////////////////////////\n\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\n\n\nfunction renderView(tView, lView, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n\n  try {\n    const viewQuery = tView.viewQuery;\n\n    if (viewQuery !== null) {\n      executeViewQueryFn(1\n      /* RenderFlags.Create */\n      , viewQuery, context);\n    } // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n\n\n    const templateFn = tView.template;\n\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 1\n      /* RenderFlags.Create */\n      , context);\n    } // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n\n\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    } // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n\n\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    } // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n\n\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(2\n      /* RenderFlags.Update */\n      , tView.viewQuery, context);\n    } // Render child component views.\n\n\n    const components = tView.components;\n\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~4\n    /* LViewFlags.CreationMode */\n    ;\n    leaveView();\n  }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\n\n\nfunction refreshView(tView, lView, templateFn, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & 128\n  /* LViewFlags.Destroyed */\n  ) === 128\n  /* LViewFlags.Destroyed */\n  ) return;\n  enterView(lView); // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n\n  try {\n    resetPreOrderHookFlags(lView);\n    setBindingIndex(tView.bindingStartIndex);\n\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 2\n      /* RenderFlags.Update */\n      , context);\n    }\n\n    const hooksInitPhaseCompleted = (flags & 3\n    /* LViewFlags.InitPhaseStateMask */\n    ) === 3\n    /* InitPhaseState.InitPhaseCompleted */\n    ; // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, 0\n          /* InitPhaseState.OnInitHooksToBeRun */\n          , null);\n        }\n\n        incrementInitPhaseFlags(lView, 0\n        /* InitPhaseState.OnInitHooksToBeRun */\n        );\n      }\n    } // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n\n\n    markTransplantedViewsForRefresh(lView);\n    refreshEmbeddedViews(lView); // Content query results must be refreshed before content hooks are called.\n\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    } // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n\n\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(lView, contentHooks, 1\n          /* InitPhaseState.AfterContentInitHooksToBeRun */\n          );\n        }\n\n        incrementInitPhaseFlags(lView, 1\n        /* InitPhaseState.AfterContentInitHooksToBeRun */\n        );\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView); // Refresh child component views.\n\n    const components = tView.components;\n\n    if (components !== null) {\n      refreshChildComponents(lView, components);\n    } // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n\n\n    const viewQuery = tView.viewQuery;\n\n    if (viewQuery !== null) {\n      executeViewQueryFn(2\n      /* RenderFlags.Update */\n      , viewQuery, context);\n    } // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n\n\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, 2\n          /* InitPhaseState.AfterViewInitHooksToBeRun */\n          );\n        }\n\n        incrementInitPhaseFlags(lView, 2\n        /* InitPhaseState.AfterViewInitHooksToBeRun */\n        );\n      }\n    }\n\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    } // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n\n\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(32\n      /* LViewFlags.Dirty */\n      | 8\n      /* LViewFlags.FirstLViewPass */\n      );\n    }\n\n    if (lView[FLAGS] & 512\n    /* LViewFlags.RefreshTransplantedView */\n    ) {\n      lView[FLAGS] &= ~512\n      /* LViewFlags.RefreshTransplantedView */\n      ;\n      updateTransplantedViewCount(lView[PARENT], -1);\n    }\n  } finally {\n    leaveView();\n  }\n}\n\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & 2\n  /* RenderFlags.Update */\n  ;\n\n  try {\n    setSelectedIndex(-1);\n\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n\n    const preHookType = isUpdatePhase ? 2\n    /* ProfilerEvent.TemplateUpdateStart */\n    : 0\n    /* ProfilerEvent.TemplateCreateStart */\n    ;\n    profiler(preHookType, context);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n    const postHookType = isUpdatePhase ? 3\n    /* ProfilerEvent.TemplateUpdateEnd */\n    : 1\n    /* ProfilerEvent.TemplateCreateEnd */\n    ;\n    profiler(postHookType, context);\n  }\n} //////////////////////////\n//// Element\n//////////////////////////\n\n\nfunction executeContentQueries(tView, tNode, lView) {\n  if (isContentQueryHost(tNode)) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n      const def = tView.data[directiveIndex];\n\n      if (def.contentQueries) {\n        def.contentQueries(1\n        /* RenderFlags.Create */\n        , lView[directiveIndex], directiveIndex);\n      }\n    }\n  }\n}\n/**\n * Creates directive instances.\n */\n\n\nfunction createDirectivesInstances(tView, lView, tNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n\n  if ((tNode.flags & 128\n  /* TNodeFlags.hasHostBindings */\n  ) === 128\n  /* TNodeFlags.hasHostBindings */\n  ) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\n\n\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n  const localNames = tNode.localNames;\n\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1];\n      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\n\n\nfunction getOrCreateComponentTView(def) {\n  const tView = def.tView; // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(1\n    /* TViewType.Component */\n    , declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n  }\n\n  return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\n\n\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls; // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW] = ngDevMode ? new TViewConstructor(type, // type: TViewType,\n  blueprint, // blueprint: LView,\n  templateFn, // template: ComponentTemplate<{}>|null,\n  null, // queries: TQueries|null\n  viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,\n  declTNode, // declTNode: TNode|null,\n  cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,\n  bindingStartIndex, // bindingStartIndex: number,\n  initialViewLength, // expandoStartIndex: number,\n  null, // hostBindingOpCodes: HostBindingOpCodes,\n  true, // firstCreatePass: boolean,\n  true, // firstUpdatePass: boolean,\n  false, // staticViewQueries: boolean,\n  false, // staticContentQueries: boolean,\n  null, // preOrderHooks: HookData|null,\n  null, // preOrderCheckHooks: HookData|null,\n  null, // contentHooks: HookData|null,\n  null, // contentCheckHooks: HookData|null,\n  null, // viewHooks: HookData|null,\n  null, // viewCheckHooks: HookData|null,\n  null, // destroyHooks: DestroyHookData|null,\n  null, // cleanup: any[]|null,\n  null, // contentQueries: number[]|null,\n  null, // components: number[]|null,\n  typeof directives === 'function' ? //\n  directives() : //\n  directives, // directiveRegistry: DirectiveDefList|null,\n  typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,\n  null, // firstChild: TNode|null,\n  schemas, // schemas: SchemaMetadata[]|null,\n  consts, // consts: TConstants|null\n  false, // incompleteFirstPass: boolean\n  decls, // ngDevMode only: decls\n  vars) : {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false\n  };\n\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n\n  return tView;\n}\n\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  const blueprint = ngDevMode ? new LViewBlueprint() : [];\n\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n\n  return blueprint;\n}\n\nfunction createError(text, token) {\n  return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\n\n\nfunction locateHostElement(renderer, elementOrSelector, encapsulation) {\n  // When using native Shadow DOM, do not clear host element to allow native slot projection\n  const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n  return renderer.selectRootElement(elementOrSelector, preserveContent);\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\n\n\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n\n  if (context === null) {\n    // If context is null that this is instance specific callback. These callbacks can only be\n    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n\n    lCleanup.push(cleanupFn);\n  } else {\n    lCleanup.push(context);\n\n    if (tView.firstCreatePass) {\n      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n  }\n}\n\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  const tNode = ngDevMode ? new TNodeDebug(tView, // tView_: TView\n  type, // type: TNodeType\n  index, // index: number\n  null, // insertBeforeIndex: null|-1|number|number[]\n  injectorIndex, // injectorIndex: number\n  -1, // directiveStart: number\n  -1, // directiveEnd: number\n  -1, // directiveStylingLast: number\n  null, // propertyBindings: number[]|null\n  0, // flags: TNodeFlags\n  0, // providerIndexes: TNodeProviderIndexes\n  value, // value: string|null\n  attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n  null, // mergedAttrs\n  null, // localNames: (string|number)[]|null\n  undefined, // initialInputs: (string[]|null)[]|null|undefined\n  null, // inputs: PropertyAliases|null\n  null, // outputs: PropertyAliases|null\n  null, // tViews: ITView|ITView[]|null\n  null, // next: ITNode|null\n  null, // projectionNext: ITNode|null\n  null, // child: ITNode|null\n  tParent, // parent: TElementNode|TContainerNode|null\n  null, // projection: number|(ITNode|RNode[])[]|null\n  null, // styles: string|null\n  null, // stylesWithoutHost: string|null\n  undefined, // residualStyles: string|null\n  null, // classes: string|null\n  null, // classesWithoutHost: string|null\n  undefined, // residualClasses: string|null\n  0, // classBindings: TStylingRange;\n  0) : {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    propertyBindings: null,\n    flags: 0,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: null,\n    outputs: null,\n    tViews: null,\n    next: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0,\n    styleBindings: 0\n  };\n\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n\n  return tNode;\n}\n\nfunction generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {\n  for (let publicName in inputAliasMap) {\n    if (inputAliasMap.hasOwnProperty(publicName)) {\n      propStore = propStore === null ? {} : propStore;\n      const internalName = inputAliasMap[publicName];\n\n      if (propStore.hasOwnProperty(publicName)) {\n        propStore[publicName].push(directiveDefIdx, internalName);\n      } else {\n        propStore[publicName] = [directiveDefIdx, internalName];\n      }\n    }\n  }\n\n  return propStore;\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\n\n\nfunction initializeInputAndOutputAliases(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];\n  let inputsStore = null;\n  let outputsStore = null;\n\n  for (let i = start; i < end; i++) {\n    const directiveDef = tViewData[i];\n    const directiveInputs = directiveDef.inputs; // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n\n    const initialInputs = tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(directiveInputs, tNodeAttrs) : null;\n    inputsFromAttrs.push(initialInputs);\n    inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);\n    outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);\n  }\n\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= 16\n      /* TNodeFlags.hasClassInput */\n      ;\n    }\n\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= 32\n      /* TNodeFlags.hasStyleInput */\n      ;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\n\n\nfunction mapPropName(name) {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\n\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView);\n  let inputData = tNode.inputs;\n  let dataValue;\n\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & 3\n  /* TNodeType.AnyRNode */\n  ) {\n    propName = mapPropName(propName);\n\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n\n      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n\n      ngDevMode.rendererSetProperty++;\n    } // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n\n\n    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n    renderer.setProperty(element, propName, value);\n  } else if (tNode.type & 12\n  /* TNodeType.AnyContainer */\n  ) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n/** If node is an OnPush component, marks its LView dirty. */\n\n\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n\n  if (!(childComponentLView[FLAGS] & 16\n  /* LViewFlags.CheckAlways */\n  )) {\n    childComponentLView[FLAGS] |= 32\n    /* LViewFlags.Dirty */\n    ;\n  }\n}\n\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n\n  if (type & 3\n  /* TNodeType.AnyRNode */\n  ) {\n    if (value == null) {\n      renderer.removeAttribute(element, attrName);\n    } else {\n      renderer.setAttribute(element, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(`bindings=${JSON.stringify({\n      [attrName]: debugValue\n    }, null, 2)}`);\n    renderer.setValue(element, textContent);\n  }\n}\n\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n  if (type & (3\n  /* TNodeType.AnyRNode */\n  | 4\n  /* TNodeType.Container */\n  )) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n    }\n  }\n}\n/**\n * Instantiate a root component.\n */\n\n\nfunction instantiateRootComponent(tView, lView, def) {\n  const rootTNode = getCurrentTNode();\n\n  if (tView.firstCreatePass) {\n    if (def.providersResolver) def.providersResolver(def);\n    const directiveIndex = allocExpando(tView, lView, 1, null);\n    ngDevMode && assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');\n    configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);\n    initializeInputAndOutputAliases(tView, rootTNode);\n  }\n\n  const directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);\n  attachPatchData(directive, lView);\n  const native = getNativeByTNode(rootTNode, lView);\n\n  if (native) {\n    attachPatchData(native, lView);\n  }\n\n  return directive;\n}\n/**\n * Resolve the matched directives on a node.\n */\n\n\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n  let hasDirectives = false;\n\n  if (getBindingsEnabled()) {\n    const directiveDefs = findDirectiveDefMatches(tView, lView, tNode);\n    const exportsMap = localRefs === null ? null : {\n      '': -1\n    };\n\n    if (directiveDefs !== null) {\n      hasDirectives = true;\n      initTNodeFlags(tNode, tView.data.length, directiveDefs.length); // When the same token is provided by several directives on the same node, some rules apply in\n      // the viewEngine:\n      // - viewProviders have priority over providers\n      // - the last directive in NgModule.declarations has priority over the previous one\n      // So to match these rules, the order in which providers are added in the arrays is very\n      // important.\n\n      for (let i = 0; i < directiveDefs.length; i++) {\n        const def = directiveDefs[i];\n        if (def.providersResolver) def.providersResolver(def);\n      }\n\n      let preOrderHooksFound = false;\n      let preOrderCheckHooksFound = false;\n      let directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);\n      ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n\n      for (let i = 0; i < directiveDefs.length; i++) {\n        const def = directiveDefs[i]; // Merge the attrs in the order of matches. This assumes that the first directive is the\n        // component itself, so that the component has the least priority.\n\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n        saveNameToExportMap(directiveIdx, def, exportsMap);\n        if (def.contentQueries !== null) tNode.flags |= 8\n        /* TNodeFlags.hasContentQuery */\n        ;\n        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 128\n        /* TNodeFlags.hasHostBindings */\n        ;\n        const lifeCycleHooks = def.type.prototype; // Only push a node index into the preOrderHooks array if this is the first\n        // pre-order hook found on this node.\n\n        if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n          // We will push the actual hook function into this array later during dir instantiation.\n          // We cannot do it now because we must ensure hooks are registered in the same\n          // order that directives are created (i.e. injection order).\n          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);\n          preOrderHooksFound = true;\n        }\n\n        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);\n          preOrderCheckHooksFound = true;\n        }\n\n        directiveIdx++;\n      }\n\n      initializeInputAndOutputAliases(tView, tNode);\n    }\n\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  } // Merge the template attrs last so that they have the highest priority.\n\n\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  return hasDirectives;\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param lView `LView` current `LView`\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\n\n\nfunction registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const hostBindings = def.hostBindings;\n\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [];\n    }\n\n    const elementIndx = ~tNode.index;\n\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\n\n\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n  let i = hostBindingOpCodes.length;\n\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n\n  return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\n\n\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n\n  attachPatchData(native, lView);\n  const initialInputs = tNode.initialInputs;\n\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i];\n    const isComponent = isComponentDef(def);\n\n    if (isComponent) {\n      ngDevMode && assertTNodeType(tNode, 3\n      /* TNodeType.AnyRNode */\n      );\n      addComponentLogic(lView, tNode, def);\n    }\n\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n    }\n\n    if (isComponent) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = directive;\n    }\n  }\n}\n\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n\n  try {\n    setSelectedIndex(elementIndex);\n\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex];\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\n\n\nfunction invokeHostBindingsInCreationMode(def, directive) {\n  if (def.hostBindings !== null) {\n    def.hostBindings(1\n    /* RenderFlags.Create */\n    , directive);\n  }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\n\n\nfunction findDirectiveDefMatches(tView, viewData, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, 3\n  /* TNodeType.AnyRNode */\n  | 12\n  /* TNodeType.AnyContainer */\n  );\n  const registry = tView.directiveRegistry;\n  let matches = null;\n\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i];\n\n      if (isNodeMatchingSelectorList(tNode, def.selectors,\n      /* isProjectionMode */\n      false)) {\n        matches || (matches = ngDevMode ? new MatchesArray() : []);\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(tNode, 2\n            /* TNodeType.Element */\n            , `\"${tNode.value}\" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);\n\n            if (tNode.flags & 2\n            /* TNodeFlags.isComponentHost */\n            ) {\n              // If another component has been matched previously, it's the first element in the\n              // `matches` array, see how we store components/directives in `matches` below.\n              throwMultipleComponentError(tNode, matches[0].type, def.type);\n            }\n          }\n\n          markAsComponentHost(tView, tNode); // The component is always stored first with directives after.\n\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n\n  return matches;\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting appropriate TNode flags;\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\n\n\nfunction markAsComponentHost(tView, hostTNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  hostTNode.flags |= 2\n  /* TNodeFlags.isComponentHost */\n  ;\n  (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\n\n\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  if (localRefs) {\n    const localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : []; // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null) throw new RuntimeError(-301\n      /* RuntimeErrorCode.EXPORT_NOT_FOUND */\n      , ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\n\n\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\n\n\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  tNode.flags |= 1\n  /* TNodeFlags.isDirectiveHost */\n  ; // When the first directive is created on a node, save the index\n\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\n\n\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true)); // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n  registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\n\nfunction addComponentLogic(lView, hostTNode, def) {\n  const native = getNativeByTNode(hostTNode, lView);\n  const tView = getOrCreateComponentTView(def); // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 32\n  /* LViewFlags.Dirty */\n  : 16\n  /* LViewFlags.CheckAlways */\n  , native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null, null)); // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n\n  lView[hostTNode.index] = componentView;\n}\n\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(tNode, 2\n    /* TNodeType.Element */\n    , `Attempted to set attribute \\`${name}\\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);\n  }\n\n  const element = getNativeByTNode(tNode, lView);\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\n\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n    renderer.setAttribute(element, name, strValue, namespace);\n  }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\n\n\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n  const initialInputs = initialInputData[directiveIndex];\n\n  if (initialInputs !== null) {\n    const setInput = def.setInput;\n\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n\n      if (setInput !== null) {\n        def.setInput(instance, value, publicName, privateName);\n      } else {\n        instance[privateName] = value;\n      }\n\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView);\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs The list of inputs from the directive def\n * @param attrs The static attrs on this node\n */\n\n\nfunction generateInitialInputs(inputs, attrs) {\n  let inputsToStore = null;\n  let i = 0;\n\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n\n    if (attrName === 0\n    /* AttributeMarker.NamespaceURI */\n    ) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === 5\n    /* AttributeMarker.ProjectAs */\n    ) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    } // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n\n\n    if (typeof attrName === 'number') break;\n\n    if (inputs.hasOwnProperty(attrName)) {\n      if (inputsToStore === null) inputsToStore = [];\n      inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);\n    }\n\n    i += 2;\n  }\n\n  return inputsToStore;\n} //////////////////////////\n//// ViewContainer & View\n//////////////////////////\n// Not sure why I need to do `any` here but TS complains later.\n\n\nconst LContainerArray = class LContainer extends Array {};\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\n\nfunction createLContainer(hostNative, currentView, native, tNode) {\n  ngDevMode && assertLView(currentView); // https://jsperf.com/array-literal-vs-new-array-really\n\n  const lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native\n  true, // Boolean `true` in this position signifies that this is an `LContainer`\n  false, // has transplanted views\n  currentView, // parent\n  null, // next\n  0, // transplanted views to refresh count\n  tNode, // t_host\n  native, // native,\n  null, // view refs\n  null);\n  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n  ngDevMode && attachLContainerDebug(lContainer);\n  return lContainer;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\n\n\nfunction refreshEmbeddedViews(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      const embeddedTView = embeddedLView[TVIEW];\n      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n      }\n    }\n  }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\n\n\nfunction markTransplantedViewsForRefresh(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;\n    const movedViews = lContainer[MOVED_VIEWS];\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i];\n      const insertionLContainer = movedLView[PARENT];\n      ngDevMode && assertLContainer(insertionLContainer); // We don't want to increment the counter if the moved LView was already marked for\n      // refresh.\n\n      if ((movedLView[FLAGS] & 512\n      /* LViewFlags.RefreshTransplantedView */\n      ) === 0) {\n        updateTransplantedViewCount(insertionLContainer, 1);\n      } // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n      // those that aren't (declaration component === insertion component). In the latter case,\n      // it's fine to add the flag, as we will clear it immediately in\n      // `refreshEmbeddedViews` for the view currently being refreshed.\n\n\n      movedLView[FLAGS] |= 512\n      /* LViewFlags.RefreshTransplantedView */\n      ;\n    }\n  }\n} /////////////\n\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\n\n\nfunction refreshComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n\n  if (viewAttachedToChangeDetector(componentView)) {\n    const tView = componentView[TVIEW];\n\n    if (componentView[FLAGS] & (16\n    /* LViewFlags.CheckAlways */\n    | 32\n    /* LViewFlags.Dirty */\n    )) {\n      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      refreshContainsDirtyView(componentView);\n    }\n  }\n}\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\n\n\nfunction refreshContainsDirtyView(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        if (embeddedLView[FLAGS] & 512\n        /* LViewFlags.RefreshTransplantedView */\n        ) {\n          const embeddedTView = embeddedLView[TVIEW];\n          ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n          refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n        } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n          refreshContainsDirtyView(embeddedLView);\n        }\n      }\n    }\n  }\n\n  const tView = lView[TVIEW]; // Refresh child component views.\n\n  const components = tView.components;\n\n  if (components !== null) {\n    for (let i = 0; i < components.length; i++) {\n      const componentView = getComponentLViewByIndex(components[i], lView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n\n      if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(componentView);\n      }\n    }\n  }\n}\n\nfunction renderComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\n\n\nfunction syncViewWithBlueprint(tView, lView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\n\n\nfunction addToViewTree(lView, lViewOrLContainer) {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n} ///////////////////////////////\n//// Change detection\n///////////////////////////////\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\n\n\nfunction markViewDirty(lView) {\n  while (lView) {\n    lView[FLAGS] |= 32\n    /* LViewFlags.Dirty */\n    ;\n    const parent = getLViewParent(lView); // Stop traversing up as soon as you find a root view that wasn't attached to any container\n\n    if (isRootView(lView) && !parent) {\n      return lView;\n    } // continue otherwise\n\n\n    lView = parent;\n  }\n\n  return null;\n}\n\nfunction detectChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n  const rendererFactory = lView[RENDERER_FACTORY]; // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n  if (!checkNoChangesMode && rendererFactory.begin) rendererFactory.begin();\n\n  try {\n    refreshView(tView, lView, tView.template, context);\n  } catch (error) {\n    if (notifyErrorHandler) {\n      handleError(lView, error);\n    }\n\n    throw error;\n  } finally {\n    if (!checkNoChangesMode && rendererFactory.end) rendererFactory.end();\n  }\n}\n\nfunction checkNoChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n  setIsInCheckNoChangesMode(true);\n\n  try {\n    detectChangesInternal(tView, lView, context, notifyErrorHandler);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  viewQueryFn(flags, component);\n} ///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\n\n\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n\n      if (interpolationParts.length > 0) {\n        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n\nfunction getOrCreateLViewCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n}\n\nfunction getOrCreateTViewCleanup(tView) {\n  return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\n\n\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index]);\n  }\n\n  return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\n\n\nfunction handleError(lView, error) {\n  const injector = lView[INJECTOR$1];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\n\n\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++];\n    const privateName = inputs[i++];\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index];\n\n    if (def.setInput !== null) {\n      def.setInput(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\n\n\nfunction textBindingInternal(lView, index, value) {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView);\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\n\n\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles = writeToHost ? tNode.styles : null;\n  let classes = writeToHost ? tNode.classes : null;\n  let mode = 0;\n\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == 1\n      /* AttributeMarker.Classes */\n      ) {\n        classes = concatStringsWithSpace(classes, value);\n      } else if (mode == 2\n      /* AttributeMarker.Styles */\n      ) {\n        const style = value;\n        const styleValue = attrs[++i];\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n  while (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3\n    /* TNodeType.AnyRNode */\n    | 12\n    /* TNodeType.AnyContainer */\n    | 16\n    /* TNodeType.Projection */\n    | 32\n    /* TNodeType.Icu */\n    );\n    const lNode = lView[tNode.index];\n\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    } // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n\n\n    if (isLContainer(lNode)) {\n      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n        const lViewInAContainer = lNode[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n\n        if (lViewFirstChildTNode !== null) {\n          collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n      }\n    }\n\n    const tNodeType = tNode.type;\n\n    if (tNodeType & 8\n    /* TNodeType.ElementContainer */\n    ) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & 32\n    /* TNodeType.Icu */\n    ) {\n      const nextRNode = icuContainerIterate(tNode, lView);\n      let rNode;\n\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & 16\n    /* TNodeType.Projection */\n    ) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n\n  return result;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ViewRef {\n  constructor(\n  /**\n   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n   *\n   * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n   * component.\n   *\n   * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n   * view.\n   *\n   * @internal\n   */\n  _lView,\n  /**\n   * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n   * requested.\n   *\n   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n   */\n  _cdRefInjectingView) {\n    this._lView = _lView;\n    this._cdRefInjectingView = _cdRefInjectingView;\n    this._appRef = null;\n    this._attachedToViewContainer = false;\n  }\n\n  get rootNodes() {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n\n  get context() {\n    return this._lView[CONTEXT];\n  }\n\n  set context(value) {\n    this._lView[CONTEXT] = value;\n  }\n\n  get destroyed() {\n    return (this._lView[FLAGS] & 128\n    /* LViewFlags.Destroyed */\n    ) === 128\n    /* LViewFlags.Destroyed */\n    ;\n  }\n\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS];\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n\n        if (index > -1) {\n          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs, index);\n        }\n      }\n\n      this._attachedToViewContainer = false;\n    }\n\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n\n  onDestroy(callback) {\n    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n  }\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n\n\n  markForCheck() {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n\n\n  detach() {\n    this._lView[FLAGS] &= ~64\n    /* LViewFlags.Attached */\n    ;\n  }\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n\n\n  reattach() {\n    this._lView[FLAGS] |= 64\n    /* LViewFlags.Attached */\n    ;\n  }\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n\n\n  detectChanges() {\n    detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n\n\n  checkNoChanges() {\n    if (ngDevMode) {\n      checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n    }\n  }\n\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(902\n      /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */\n      , ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n\n    this._attachedToViewContainer = true;\n  }\n\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._lView[TVIEW], this._lView);\n  }\n\n  attachToAppRef(appRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(902\n      /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */\n      , ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n\n    this._appRef = appRef;\n  }\n\n}\n/** @internal */\n\n\nclass RootViewRef extends ViewRef {\n  constructor(_view) {\n    super(_view);\n    this._view = _view;\n  }\n\n  detectChanges() {\n    const lView = this._view;\n    const tView = lView[TVIEW];\n    const context = lView[CONTEXT];\n    detectChangesInternal(tView, lView, context, false);\n  }\n\n  checkNoChanges() {\n    if (ngDevMode) {\n      const lView = this._view;\n      const tView = lView[TVIEW];\n      const context = lView[CONTEXT];\n      checkNoChangesInternal(tView, lView, context, false);\n    }\n  }\n\n  get context() {\n    return null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef$1(component);\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n\n}\n\nfunction toRefArray(map) {\n  const array = [];\n\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({\n        propName: minified,\n        templateName: nonMinified\n      });\n    }\n  }\n\n  return array;\n}\n\nfunction getNamespace(elementName) {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\n\n\nclass ChainedInjector {\n  constructor(injector, parentInjector) {\n    this.injector = injector;\n    this.parentInjector = parentInjector;\n  }\n\n  get(token, notFoundValue, flags) {\n    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value;\n    }\n\n    return this.parentInjector.get(token, notFoundValue, flags);\n  }\n\n}\n/**\n * ComponentFactory interface implementation.\n */\n\n\nclass ComponentFactory extends ComponentFactory$1 {\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n\n  get inputs() {\n    return toRefArray(this.componentDef.inputs);\n  }\n\n  get outputs() {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n    environmentInjector = environmentInjector || this.ngModule;\n    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;\n\n    if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n      realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n    }\n\n    const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n    const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n\n    if (rendererFactory === null) {\n      throw new RuntimeError(407\n      /* RuntimeErrorCode.RENDERER_NOT_FOUND */\n      , ngDevMode && 'Angular was not able to inject a renderer (RendererFactory2). ' + 'Likely this is due to a broken DI hierarchy. ' + 'Make sure that any injector used to create this component has a correct parent.');\n    }\n\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef); // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n\n    const elementName = this.componentDef.selectors[0][0] || 'div';\n    const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace(elementName));\n    const rootFlags = this.componentDef.onPush ? 32\n    /* LViewFlags.Dirty */\n    | 256\n    /* LViewFlags.IsRoot */\n    : 16\n    /* LViewFlags.CheckAlways */\n    | 256\n    /* LViewFlags.IsRoot */\n    ; // Create the root view. Uses empty TView and ContentTemplate.\n\n    const rootTView = createTView(0\n    /* TViewType.Root */\n    , null, null, 1, 0, null, null, null, null, null);\n    const rootLView = createLView(null, rootTView, null, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector, null); // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n\n    enterView(rootLView);\n    let component;\n    let tElementNode;\n\n    try {\n      const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);\n\n      if (hostRNode) {\n        if (rootSelectorOrNode) {\n          setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n        } else {\n          // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n          // is not defined), also apply attributes and classes extracted from component selector.\n          // Extract attributes and classes from the first selector only to match VE behavior.\n          const {\n            attrs,\n            classes\n          } = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);\n\n          if (attrs) {\n            setUpAttributes(hostRenderer, hostRNode, attrs);\n          }\n\n          if (classes && classes.length > 0) {\n            writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n          }\n        }\n      }\n\n      tElementNode = getTNode(rootTView, HEADER_OFFSET);\n\n      if (projectableNodes !== undefined) {\n        const projection = tElementNode.projection = [];\n\n        for (let i = 0; i < this.ngContentSelectors.length; i++) {\n          const nodesforSlot = projectableNodes[i]; // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n          // case). Here we do normalize passed data structure to be an array of arrays to avoid\n          // complex checks down the line.\n          // We also normalize the length of the passed in projectable nodes (to match the number of\n          // <ng-container> slots defined by a component).\n\n          projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n        }\n      } // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n\n\n      component = createRootComponent(componentView, this.componentDef, rootLView, [LifecycleHooksFeature]);\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n\n    return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n  }\n\n}\n\nconst componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\n\nfunction injectComponentFactoryResolver() {\n  return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\n\n\nclass ComponentRef extends ComponentRef$1 {\n  constructor(componentType, instance, location, _rootLView, _tNode) {\n    super();\n    this.location = location;\n    this._rootLView = _rootLView;\n    this._tNode = _tNode;\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n    this.componentType = componentType;\n  }\n\n  setInput(name, value) {\n    const inputData = this._tNode.inputs;\n    let dataValue;\n\n    if (inputData !== null && (dataValue = inputData[name])) {\n      const lView = this._rootLView;\n      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n      markDirtyIfOnPush(lView, this._tNode.index);\n    } else {\n      if (ngDevMode) {\n        const cmpNameForError = stringifyForError(this.componentType);\n        let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n        message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n        reportUnknownPropertyError(message);\n      }\n    }\n  }\n\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n\n  destroy() {\n    this.hostView.destroy();\n  }\n\n  onDestroy(callback) {\n    this.hostView.onDestroy(callback);\n  }\n\n} // TODO: A hack to not pull in the NullInjector from @angular/core.\n\n\nconst NULL_INJECTOR = {\n  get: (token, notFoundValue) => {\n    throwProviderNotFoundError(token, 'NullInjector');\n  }\n};\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\n\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {\n  const tView = rootView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(rootView, index);\n  rootView[index] = rNode; // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n\n  const tNode = getOrCreateTNode(tView, index, 2\n  /* TNodeType.Element */\n  , '#host', null);\n  const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;\n\n  if (mergedAttrs !== null) {\n    computeStaticStyling(tNode, mergedAttrs, true);\n\n    if (rNode !== null) {\n      setUpAttributes(hostRenderer, rNode, mergedAttrs);\n\n      if (tNode.classes !== null) {\n        writeDirectClass(hostRenderer, rNode, tNode.classes);\n      }\n\n      if (tNode.styles !== null) {\n        writeDirectStyle(hostRenderer, rNode, tNode.styles);\n      }\n    }\n  }\n\n  const viewRenderer = rendererFactory.createRenderer(rNode, def);\n  const componentView = createLView(rootView, getOrCreateComponentTView(def), null, def.onPush ? 32\n  /* LViewFlags.Dirty */\n  : 16\n  /* LViewFlags.CheckAlways */\n  , rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null, null);\n\n  if (tView.firstCreatePass) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n    markAsComponentHost(tView, tNode);\n    initTNodeFlags(tNode, rootView.length, 1);\n  }\n\n  addToViewTree(rootView, componentView); // Store component view at node index, with node as the HOST\n\n  return rootView[index] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\n\n\nfunction createRootComponent(componentView, componentDef, rootLView, hostFeatures) {\n  const tView = rootLView[TVIEW]; // Create directive instance with factory() and store at next index in viewData\n\n  const component = instantiateRootComponent(tView, rootLView, componentDef); // Root view only contains an instance of this component,\n  // so we use a reference to that component instance as a context.\n\n  componentView[CONTEXT] = rootLView[CONTEXT] = component;\n\n  if (hostFeatures !== null) {\n    for (const feature of hostFeatures) {\n      feature(component, componentDef);\n    }\n  } // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n\n\n  if (componentDef.contentQueries) {\n    const tNode = getCurrentTNode();\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    componentDef.contentQueries(1\n    /* RenderFlags.Create */\n    , component, tNode.directiveStart);\n  }\n\n  const rootTNode = getCurrentTNode();\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n\n  if (tView.firstCreatePass && (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {\n    setSelectedIndex(rootTNode.index);\n    const rootTView = rootLView[TVIEW];\n    registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);\n    invokeHostBindingsInCreationMode(componentDef, component);\n  }\n\n  return component;\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\n\n\nfunction LifecycleHooksFeature() {\n  const tNode = getCurrentTNode();\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵInheritDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain = [definition];\n\n  while (superType) {\n    let superDef = undefined;\n\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(903\n        /* RuntimeErrorCode.INVALID_INHERITANCE */\n        , ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n      } // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n\n\n      superDef = superType.ɵdir;\n    }\n\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef); // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n\n        const writeableDef = definition;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs); // Merge hostBindings\n\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings); // Merge queries\n\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries); // Merge inputs and outputs\n\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs); // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = definition.data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      } // Run parent features\n\n\n      const features = superDef.features;\n\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n\n          if (feature && feature.ngInherit) {\n            feature(definition);\n          } // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n\n\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\n\n\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n  let hostVars = 0;\n  let hostAttrs = null; // We process the inheritance order from the base to the leaves here.\n\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i]; // For each `hostVars`, we need to add the superclass amount.\n\n    def.hostVars = hostVars += def.hostVars; // for each `hostAttrs` we need to merge it with superclass.\n\n    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\n\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\n\nfunction inheritViewQuery(definition, superViewQuery) {\n  const prevViewQuery = definition.viewQuery;\n\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\n\nfunction inheritContentQueries(definition, superContentQueries) {\n  const prevContentQueries = definition.contentQueries;\n\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\n\nfunction inheritHostBindings(definition, superHostBindings) {\n  const prevHostBindings = definition.hostBindings;\n\n  if (prevHostBindings) {\n    definition.hostBindings = (rf, ctx) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\n\n\nconst COPY_DIRECTIVE_FIELDS = [// The child class should use the providers of its parent.\n'providersResolver' // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n// as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\n\nconst COPY_COMPONENT_FIELDS = [// The child class should use the template function of its parent, including all template\n// semantics.\n'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors', // The child class should use the CSS styles of its parent, including all styling semantics.\n'styles', 'encapsulation', // The child class should be checked by the runtime in the same way as its parent.\n'schemas'];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\n\nfunction ɵɵCopyDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let superDef = undefined;\n\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir;\n  } // Needed because `definition` fields are readonly.\n\n\n  const defAny = definition; // Copy over any fields that apply to either directives or components.\n\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet _symbolIterator = null;\n\nfunction getSymbolIterator() {\n  if (!_symbolIterator) {\n    const Symbol = _global$1['Symbol'];\n\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n\n  return _symbolIterator;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction isIterable(obj) {\n  return obj !== null && typeof obj === 'object' && obj[getSymbolIterator()] !== undefined;\n}\n\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n  getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop\n}\n\nfunction areIterablesEqual(a, b, comparator) {\n  const iterator1 = a[getSymbolIterator()]();\n  const iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[getSymbolIterator()]();\n    let item;\n\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\n\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction devModeEqual(a, b) {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(misko): consider inlining\n\n/** Updates binding and returns the value. */\n\n\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\n\n\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\n\n\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n      } // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n\n\n      return false;\n    }\n\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\n\n\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\n\n\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\n\n\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n\n  return ɵɵattribute;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\n\n\nfunction interpolationV(lView, values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n\n  setBindingIndex(bindingIndex);\n\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  } // Build the updated content\n\n\n  let content = values[0];\n\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n\n  return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\n\n\nfunction interpolation1(lView, prefix, v0, suffix) {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\n\n\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\n\n\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\n\n\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\n\n\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\n\n\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\n\n\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\n\n\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;\n}\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n  }\n\n  return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n\n  return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n\n  return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n\n  return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n\n  return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n\n  return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n\n  return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n\n  return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n\n  if (interpolated !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n\n      storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n\n  return ɵɵattributeInterpolateV;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\n\n\nfunction detectChanges(component) {\n  const view = getComponentViewByInstance(component);\n  detectChangesInternal(view[TVIEW], view, component);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts; // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n\n  const tNode = getOrCreateTNode(tView, index, 4\n  /* TNodeType.Container */\n  , tagName || null, getConstant(tViewConsts, attrsIndex));\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n  const embeddedTView = tNode.tViews = createTView(2\n  /* TViewType.Embedded */\n  , tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);\n\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n\n  return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, false);\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  appendChild(tView, lView, comment, tNode);\n  attachPatchData(comment, lView);\n  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Store a value in the `data` at a given `index`. */\n\n\nfunction store(tView, lView, index, value) {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n\n  lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵreference(index) {\n  const contextLView = getContextLView();\n  return load(contextLView, HEADER_OFFSET + index);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵproperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n\n  return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\n\n\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n  const inputs = tNode.inputs;\n  const property = isClassBased ? 'class' : 'style'; // We support both 'class' and `className` hence the fallback.\n\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 2\n  /* TNodeType.Element */\n  , name, attrs);\n  const hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n\n  if (ngDevMode) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const renderer = lView[RENDERER];\n  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());\n  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, true);\n  const mergedAttrs = tNode.mergedAttrs;\n\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, native, mergedAttrs);\n  }\n\n  const classes = tNode.classes;\n\n  if (classes !== null) {\n    writeDirectClass(renderer, native, classes);\n  }\n\n  const styles = tNode.styles;\n\n  if (styles !== null) {\n    writeDirectStyle(renderer, native, styles);\n  }\n\n  if ((tNode.flags & 64\n  /* TNodeFlags.isDetached */\n  ) !== 64\n  /* TNodeFlags.isDetached */\n  ) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  } // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n\n\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n\n  increaseElementDepthCount();\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n\n  return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵelementEnd() {\n  let currentTNode = getCurrentTNode();\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, 3\n  /* TNodeType.AnyRNode */\n  );\n  decreaseElementDepthCount();\n  const tView = getTView();\n\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n\n  return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 8\n  /* TNodeType.ElementContainer */\n  , 'ng-container', attrs); // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n\n  const localRefs = getConstant(tViewConsts, localRefsIndex);\n  resolveDirectives(tView, lView, tNode, localRefs);\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, true);\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const native = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n  appendChild(tView, lView, native, tNode);\n  attachPatchData(native, lView);\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n\n  return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵelementContainerEnd() {\n  let currentTNode = getCurrentTNode();\n  const tView = getTView();\n\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  ngDevMode && assertTNodeType(currentTNode, 8\n  /* TNodeType.ElementContainer */\n  );\n\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n\n  return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵgetCurrentView() {\n  return getLView();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determine if the argument is shaped like a Promise\n */\n\n\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\n\n\nfunction isSubscribable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\n\n\nconst isObservable = isSubscribable;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\n\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture, eventTargetResolver);\n  return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n  const tNode = getCurrentTNode();\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);\n  return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\n\n\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n  const tCleanup = tView.cleanup;\n\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP];\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      } // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n\n\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n  const context = lView[CONTEXT]; // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  ngDevMode && assertTNodeType(tNode, 3\n  /* TNodeType.AnyRNode */\n  | 12\n  /* TNodeType.AnyContainer */\n  );\n  let processOutputs = true; // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n\n  if (tNode.type & 3\n  /* TNodeType.AnyRNode */\n  || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView);\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index; // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    // There might be cases where multiple directives on the same element try to register an event\n    // handler function for the same event. In this situation we want to avoid registration of\n    // several native listeners as each registration would be intercepted by NgZone and\n    // trigger change detection. This would mean that a single user action would result in several\n    // change detections being invoked. To avoid this situation we want to have only one call to\n    // native handler registration (for the same element and same type of event).\n    //\n    // In order to have just one native event handler in presence of multiple handler functions,\n    // we just register a first handler function as a native event listener and then chain\n    // (coalesce) other handler functions on top of the first native handler function.\n\n    let existingListener = null; // Please note that the coalescing described here doesn't happen for events specifying an\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n    // view engine.\n    // Also, we don't have to search for existing listeners is there are no directives\n    // matching on a given node as we can't register multiple event handlers for the same event in\n    // a template (this would mean having duplicate attributes).\n\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\n      existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n    }\n\n    if (existingListener !== null) {\n      // Attach a new listener to coalesced listeners list, maintaining the order in which\n      // listeners are registered. For performance reasons, we keep a reference to the last\n      // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n      // the entire set each time we need to add a new listener.\n      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n      lastListenerFn.__ngNextListenerFn__ = listenerFn;\n      existingListener.__ngLastListenerFn__ = listenerFn;\n      processOutputs = false;\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn, false\n      /** preventDefault */\n      );\n      const cleanupFn = renderer.listen(target, eventName, listenerFn);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n      lCleanup.push(listenerFn, cleanupFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn, false\n    /** preventDefault */\n    );\n  } // subscribe to directive outputs\n\n\n  const outputs = tNode.outputs;\n  let props;\n\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i];\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n        }\n\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\n\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n  try {\n    profiler(6\n    /* ProfilerEvent.OutputStart */\n    , context, listenerFn); // Only explicitly returning false from a listener should preventDefault\n\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(7\n    /* ProfilerEvent.OutputEnd */\n    , context, listenerFn);\n  }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\n\n\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    } // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n\n\n    const startView = tNode.flags & 2\n    /* TNodeFlags.isComponentHost */\n    ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView);\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e); // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n\n    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n    }\n\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault(); // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n\n      e.returnValue = false;\n    }\n\n    return result;\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵnextContext(level = 1) {\n  return nextContextImpl(level);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\n\n\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i]; // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    } // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n\n\n    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue,\n    /* isProjectionMode */\n    true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n\n  return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵprojectionDef(projectionSlots) {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);\n    const tails = projectionHeads.slice();\n    let componentChild = componentNode.child;\n\n    while (componentChild !== null) {\n      const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex].projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n\n        tails[slotIndex] = componentChild;\n      }\n\n      componentChild = componentChild.next;\n    }\n  }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16\n  /* TNodeType.Projection */\n  , null, attrs || null); // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex; // `<ng-content>` has no content\n\n  setCurrentTNodeAsNotParent();\n\n  if ((tProjectionNode.flags & 64\n  /* TNodeFlags.isDetached */\n  ) !== 64\n  /* TNodeFlags.isDetached */\n  ) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n\n  return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n\n  return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n\n  return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n\n  return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n\n  return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n\n  return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n\n  return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n\n  return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n\n      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n\n  return ɵɵpropertyInterpolateV;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\n\n\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\n\n\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey;\n\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n\n    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n\n  if (isHostBinding) {\n    // We are inserting host bindings\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0; // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead); // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\n      } // The \"previous\" of the template binding head should point to this host binding\n\n\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0); // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n      } // if we don't have template, the head points to template-tail, and needs to be advanced.\n\n\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n    }\n\n    tmplTail = index;\n  } // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n\n\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n  }\n\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\n\n\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n\n  if (residual != null\n  /* or undefined */\n  && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n  }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\n\n\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n  const tStylingAtIndex = tData[index + 1];\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false; // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor];\n    const tStyleRangeAtCursor = tData[cursor + 1];\n\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\n\n\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n\n  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that\n  // location so we must assume that we have a match.\n  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it\n  // contains a match.\n  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n\n  return false;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\n\n\nconst parserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\n\nfunction getLastParsedKey(text) {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\n\n\nfunction getLastParsedValue(text) {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\n\n\nfunction parseClassName(text) {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\n\n\nfunction parseClassNameNext(text, index) {\n  const end = parserState.textEnd;\n\n  if (end === index) {\n    return -1;\n  }\n\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\n\n\nfunction parseStyle(text) {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\n\n\nfunction parseStyleNext(text, startIndex) {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, 58\n  /* CharCode.COLON */\n  );\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, 59\n  /* CharCode.SEMI_COLON */\n  );\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\n\n\nfunction resetParserState(text) {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\n\n\nfunction consumeWhitespace(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32\n  /* CharCode.SPACE */\n  ) {\n    startIndex++;\n  }\n\n  return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\n\n\nfunction consumeClassToken(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32\n  /* CharCode.SPACE */\n  ) {\n    startIndex++;\n  }\n\n  return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\n\n\nfunction consumeStyleKey(text, startIndex, endIndex) {\n  let ch;\n\n  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45\n  /* CharCode.DASH */\n  || ch === 95\n  /* CharCode.UNDERSCORE */\n  || (ch & -33\n  /* CharCode.UPPER_CASE */\n  ) >= 65\n  /* CharCode.A */\n  && (ch & -33\n  /* CharCode.UPPER_CASE */\n  ) <= 90\n  /* CharCode.Z */\n  || ch >= 48\n  /* CharCode.ZERO */\n  && ch <= 57\n  /* CharCode.NINE */\n  )) {\n    startIndex++;\n  }\n\n  return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\n\n\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n\n    startIndex++;\n  }\n\n  return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\n\n\nfunction consumeStyleValue(text, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n\n  let ch2 = -1; // 2nd previous character\n\n  let ch3 = -1; // 3rd previous character\n\n  let i = startIndex;\n  let lastChIndex = i;\n\n  while (i < endIndex) {\n    const ch = text.charCodeAt(i++);\n\n    if (ch === 59\n    /* CharCode.SEMI_COLON */\n    ) {\n      return lastChIndex;\n    } else if (ch === 34\n    /* CharCode.DOUBLE_QUOTE */\n    || ch === 39\n    /* CharCode.SINGLE_QUOTE */\n    ) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (startIndex === i - 4 && // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n    ch3 === 85\n    /* CharCode.U */\n    && ch2 === 82\n    /* CharCode.R */\n    && ch1 === 76\n    /* CharCode.L */\n    && ch === 40\n    /* CharCode.OPEN_PAREN */\n    ) {\n      lastChIndex = i = consumeQuotedText(text, 41\n      /* CharCode.CLOSE_PAREN */\n      , i, endIndex);\n    } else if (ch > 32\n    /* CharCode.SPACE */\n    ) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & -33\n    /* CharCode.UPPER_CASE */\n    ;\n  }\n\n  return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\n\n\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n\n  let index = startIndex;\n\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n\n    if (ch == quoteCharCode && ch1 !== 92\n    /* CharCode.BACK_SLASH */\n    ) {\n      return index;\n    }\n\n    if (ch == 92\n    /* CharCode.BACK_SLASH */\n    && ch1 === 92\n    /* CharCode.BACK_SLASH */\n    ) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();\n}\n\nfunction malformedStyleError(text, expecting, index) {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.slice(index + 1) + `'. Expecting '${expecting}'.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleProp(prop, value, suffix) {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵclassProp(className, value) {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMap(styles) {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\n\n\nfunction styleStringParser(keyValueArray, text) {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMap(classes) {\n  checkStylingMap(keyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\n\n\nfunction classStringParser(keyValueArray, text) {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\n\n\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n  const lView = getLView();\n  const tView = getTView(); // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n\n  const bindingIndex = incrementBindingIndex(2);\n\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()];\n    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\n\n\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n\n  const lView = getLView();\n\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()];\n\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n      } // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n\n\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      } // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n\n\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n    }\n  }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\n\n\nfunction isInHostBindings(tView, bindingIndex) {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\n\n\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()];\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\n\n\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased); // We know that if we have styling binding in template we can't have residual.\n\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1]\n          /* unwrap previous statics */\n          , isClassBased);\n          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n\n  if (residual !== undefined) {\n    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;\n  }\n\n  return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\n\n\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n\n  return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\n\n\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\n\n\nfunction collectResidual(tData, tNode, isClassBased) {\n  let residual = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.'); // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = tData[i].hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n  }\n\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\n\n\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast];\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n\n  return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\n\n\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n  const desiredMarker = isClassBased ? 1\n  /* AttributeMarker.Classes */\n  : 2\n  /* AttributeMarker.Styles */\n  ;\n  let currentMarker = -1\n  /* AttributeMarker.ImplicitAttributes */\n  ;\n\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i];\n\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n          }\n\n          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n\n  return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\n\n\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n  if (value == null\n  /*|| value === undefined */\n  || value === '') return EMPTY_ARRAY;\n  const styleKeyValueArray = [];\n  const unwrappedValue = unwrapSafeValue(value);\n\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n\n  return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\n\n\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\n\n\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n  if (oldKeyValueArray === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY;\n  }\n\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey = null;\n    let setValue = undefined;\n\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\n\n\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n  if (!(tNode.type & 3\n  /* TNodeType.AnyRNode */\n  )) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1];\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;\n\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n\n    const rNode = getNativeByIndex(getSelectedIndex(), lView);\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\n\n\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value = undefined;\n\n  while (index > 0) {\n    const rawKey = tData[index];\n    const containsStatics = Array.isArray(rawKey); // Unwrap the key if we contain static values.\n\n    const key = containsStatics ? rawKey[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;\n\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey, prop);\n    }\n\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n\n    const tRange = tData[index + 1];\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n\n    if (residual != null\n    /** OR residual !=== undefined */\n    ) {\n      value = keyValueArrayGet(residual, prop);\n    }\n  }\n\n  return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\n\n\nfunction isStylingValuePresent(value) {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\n\n\nfunction normalizeSuffix(value, suffix) {\n  if (value == null\n  /** || value === undefined */\n  ) {// do nothing\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n\n  return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\n\n\nfunction hasStylingInputShadow(tNode, isClassBased) {\n  return (tNode.flags & (isClassBased ? 16\n  /* TNodeFlags.hasClassInput */\n  : 32\n  /* TNodeFlags.hasStyleInput */\n  )) !== 0;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵtext(index, value = '') {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1\n  /* TNodeType.Text */\n  , value, null) : tView.data[adjustedIndex];\n  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n  appendChild(tView, lView, textNative, tNode); // Text nodes are self closing.\n\n  setCurrentTNode(tNode, false);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate(v0) {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵtextInterpolateV(values) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n\n  return ɵɵtextInterpolateV;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\n\n\nfunction ɵɵclassMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\n\n\nfunction ɵɵstyleMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\n\n\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolateV;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n\n  return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n\n  return ɵɵsyntheticHostProperty;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\n\n\nif (typeof ngI18nClosureMode === 'undefined') {\n  // These property accesses can be ignored because ngI18nClosureMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n  (function () {\n    // tslint:disable-next-line:no-toplevel-property-access\n    _global$1['ngI18nClosureMode'] = // TODO(FW-1250): validate that this actually, you know, works.\n    // tslint:disable-next-line:no-toplevel-property-access\n    typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n  })();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY.\n\n\nconst u = undefined;\n\nfunction plural(val) {\n  const n = val,\n        i = Math.floor(Math.abs(val)),\n        v = val.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\n\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\n\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\n\nfunction registerLocaleData(data, localeId, extraData) {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\n\n\nfunction findLocaleData(locale) {\n  const normalizedLocale = normalizeLocale(locale);\n  let match = getLocaleData(normalizedLocale);\n\n  if (match) {\n    return match;\n  } // let's try to find a parent locale\n\n\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new RuntimeError(701\n  /* RuntimeErrorCode.MISSING_LOCALE_DATA */\n  , ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\n\n\nfunction getLocaleCurrencyCode(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\n\n\nfunction getLocalePluralCase(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\n\n\nfunction getLocaleData(normalizedLocale) {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = _global$1.ng && _global$1.ng.common && _global$1.ng.common.locales && _global$1.ng.common.locales[normalizedLocale];\n  }\n\n  return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\n\n\nfunction unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\n\n\nvar LocaleDataIndex;\n\n(function (LocaleDataIndex) {\n  LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n  LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n  LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n  LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n  LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n  LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n  LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n  LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\n\n\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\n\nfunction getPluralCase(value, locale) {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\n\n\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\n\nconst USD_CURRENCY_CODE = 'USD';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\n\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\n\nconst ICU_MARKER = {\n  marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\n\nvar I18nCreateOpCode;\n\n(function (I18nCreateOpCode) {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n\n  I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n\n  I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {})); // Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\n\nconst unusedValueExportToPlacateAjd$2 = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\n\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\n\nfunction setLocaleId(localeId) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n\n  if (typeof localeId === 'string') {\n    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\n\n\nfunction getLocaleId() {\n  return LOCALE_ID;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\n\n\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\n\n\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent = childRNode;\n    let anchorRNode = null;\n\n    if (!(childTNode.type & 3\n    /* TNodeType.AnyRNode */\n    )) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n\n    if (i18nParent !== null && (childTNode.flags & 2\n    /* TNodeFlags.isComponentHost */\n    ) === 0) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\n\n\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n  // Start with Rule1\n  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n  previousTNodes.push(newTNode);\n\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i]; // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\n\nfunction isI18nText(tNode) {\n  return !(tNode.type & 64\n  /* TNodeType.Placeholder */\n  );\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\n\nfunction getInsertBeforeIndex(tNode) {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\n\nfunction setInsertBeforeIndex(tNode, value) {\n  const index = tNode.insertBeforeIndex;\n\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\n\n\nfunction getTIcu(tView, index) {\n  const value = tView.data[index];\n  if (value === null || typeof value === 'string') return null;\n\n  if (ngDevMode && !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n  } // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n\n\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\n\n\nfunction setTIcu(tView, index, tIcu) {\n  const tNode = tView.data[index];\n  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, 32\n    /* TNodeType.Icu */\n    );\n    tNode.value = tIcu;\n  }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\n\n\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [null\n    /* may be updated to number later */\n    , index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    insertBeforeIndex.push(index);\n  }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\n\n\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n  const tNode = createTNodeAtIndex(tView, index, 64\n  /* TNodeType.Placeholder */\n  , null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\n\n\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n  const currentCase = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\n\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n  return mergedCode >>> 17\n  /* IcuCreateOpCode.SHIFT_PARENT */\n  ;\n}\n\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n  return (mergedCode & 131070\n  /* IcuCreateOpCode.MASK_REF */\n  ) >>> 1\n  /* IcuCreateOpCode.SHIFT_REF */\n  ;\n}\n\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n  return mergedCode & 1\n  /* IcuCreateOpCode.MASK_INSTRUCTION */\n  ;\n}\n\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << 17\n  /* IcuCreateOpCode.SHIFT_PARENT */\n  | refIdx << 1\n  /* IcuCreateOpCode.SHIFT_REF */\n  ;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\n\n\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\n\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\n\nfunction setMaskBit(hasChange) {\n  if (hasChange) {\n    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);\n  }\n\n  changeMaskCounter++;\n}\n\nfunction applyI18n(tView, lView, index) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index]; // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n\n    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  } // Reset changeMask & maskBit to default for the next update cycle\n\n\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\n\n\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n  const renderer = lView[RENDERER];\n\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n    }\n\n    if (appendNow && parentRNode !== null) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\n\n\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER]; // `rootIdx` represents the node into which all inserts happen.\n\n  let rootIdx = null; // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n\n  let rootRNode;\n\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i];\n\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = createTextNode(renderer, opCode);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 1\n      /* IcuCreateOpCode.MASK_INSTRUCTION */\n      ) {\n        case 0\n        /* IcuCreateOpCode.AppendChild */\n        :\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = nativeParentNode(renderer, anchorRNode);\n          }\n\n          let insertInFrontOf;\n          let parentRNode;\n\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]);\n          } // FIXME(misko): Refactor with `processI18nText`\n\n\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref'); // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n\n            const child = lView[refIdx];\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n\n          break;\n\n        case 1\n        /* IcuCreateOpCode.Attr */\n        :\n          const elementNodeIndex = opCode >>> 1\n          /* IcuCreateOpCode.SHIFT_REF */\n          ;\n          const attrName = mutableOpCodes[++i];\n          const attrValue = mutableOpCodes[++i]; // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n\n          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n          break;\n\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(700\n            /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */\n            , `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i];\n          const commentNodeIndex = mutableOpCodes[++i];\n\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n\n            attachPatchData(commentRNode, lView);\n          }\n\n          break;\n\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i];\n          const elementNodeIndex = mutableOpCodes[++i];\n\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] = createElementNode(renderer, tagName, null); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n\n            attachPatchData(elementRNode, lView);\n          }\n\n          break;\n\n        default:\n          ngDevMode && throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\n\n\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i]; // Number of opCodes to skip until next set of update codes\n\n    const skipCodes = updateOpCodes[++i];\n\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> 2\n            /* I18nUpdateOpCode.SHIFT_REF */\n            ;\n\n            switch (opCode & 3\n            /* I18nUpdateOpCode.MASK_OPCODE */\n            ) {\n              case 1\n              /* I18nUpdateOpCode.Attr */\n              :\n                const propName = updateOpCodes[++j];\n                const sanitizeFn = updateOpCodes[++j];\n                const tNodeOrTagName = tView.data[nodeIndex];\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                } else {\n                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                }\n\n                break;\n\n              case 0\n              /* I18nUpdateOpCode.Text */\n              :\n                const rText = lView[nodeIndex];\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n\n              case 2\n              /* I18nUpdateOpCode.IcuSwitch */\n              :\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                break;\n\n              case 3\n              /* I18nUpdateOpCode.IcuUpdate */\n              :\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1];\n\n      if (opCode > 0 && (opCode & 3\n      /* I18nUpdateOpCode.MASK_OPCODE */\n      ) === 3\n      /* I18nUpdateOpCode.IcuUpdate */\n      ) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> 2\n        /* I18nUpdateOpCode.SHIFT_REF */\n        ;\n        const tIcu = getTIcu(tView, nodeIndex);\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n\n    i += skipCodes;\n  }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\n\n\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex; // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n\n      mask = -1;\n    }\n\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\n\n\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n    }\n  }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\n\n\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i];\n\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n      }\n    }\n  }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\n\n\nfunction getCaseIndex(icuExpression, bindingValue) {\n  let index = icuExpression.cases.indexOf(bindingValue);\n\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1\n      /* IcuType.plural */\n      :\n        {\n          const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n          index = icuExpression.cases.indexOf(resolvedCase);\n\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n\n          break;\n        }\n\n      case 0\n      /* IcuType.select */\n      :\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n\n  return index === -1 ? null : index;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction loadIcuContainerVisitor() {\n  const _stack = [];\n\n  let _index = -1;\n\n  let _lView;\n\n  let _removes;\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n\n\n  function icuContainerIteratorStart(tIcuContainerNode, lView) {\n    _lView = lView;\n\n    while (_stack.length) _stack.pop();\n\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext;\n  }\n\n  function enterIcu(tIcu, lView) {\n    _index = 0;\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n\n    if (currentCase !== null) {\n      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n      _removes = tIcu.remove[currentCase];\n    } else {\n      _removes = EMPTY_ARRAY;\n    }\n  }\n\n  function icuContainerIteratorNext() {\n    if (_index < _removes.length) {\n      const removeOpCode = _removes[_index++];\n      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n\n      if (removeOpCode > 0) {\n        const rNode = _lView[removeOpCode];\n        ngDevMode && assertDomNode(rNode);\n        return rNode;\n      } else {\n        _stack.push(_index, _removes); // ICUs are represented by negative indices\n\n\n        const tIcuIndex = ~removeOpCode;\n        const tIcu = _lView[TVIEW].data[tIcuIndex];\n        ngDevMode && assertTIcu(tIcu);\n        enterIcu(tIcu, _lView);\n        return icuContainerIteratorNext();\n      }\n    } else {\n      if (_stack.length === 0) {\n        return null;\n      } else {\n        _removes = _stack.pop();\n        _index = _stack.pop();\n        return icuContainerIteratorNext();\n      }\n    }\n  }\n\n  return icuContainerIteratorStart;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\n\n\nfunction i18nCreateOpCodesToString(opcodes) {\n  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n\n  return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\n\n\nfunction i18nUpdateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n\n  function consumeOpCode(value) {\n    const ref = value >>> 2\n    /* I18nUpdateOpCode.SHIFT_REF */\n    ;\n    const opCode = value & 3\n    /* I18nUpdateOpCode.MASK_OPCODE */\n    ;\n\n    switch (opCode) {\n      case 0\n      /* I18nUpdateOpCode.Text */\n      :\n        return `(lView[${ref}] as Text).textContent = $$$`;\n\n      case 1\n      /* I18nUpdateOpCode.Attr */\n      :\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n\n      case 2\n      /* I18nUpdateOpCode.IcuSwitch */\n      :\n        return `icuSwitchCase(${ref}, $$$)`;\n\n      case 3\n      /* I18nUpdateOpCode.IcuUpdate */\n      :\n        return `icuUpdateCase(${ref})`;\n    }\n\n    throw new Error('unexpected OpCode');\n  }\n\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements = [];\n    let statement = '';\n\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n\n  return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\n\n\nfunction icuCreateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n\n  function consumeOpCode(opCode) {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case 0\n      /* IcuCreateOpCode.AppendChild */\n      :\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n\n      case 1\n      /* IcuCreateOpCode.Attr */\n      :\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n\n  let lastRef = -1;\n\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n\n  return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\n\n\nfunction i18nRemoveOpCodesToString(opcodes) {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i];\n\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n\n  return lines;\n}\n\nclass OpCodeParser {\n  constructor(codes) {\n    this.i = 0;\n    this.codes = codes;\n  }\n\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n\n  consumeNumber() {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n\n  consumeString() {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n\n  consumeFunction() {\n    let value = this.codes[this.i++];\n\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n\n    throw new Error('expecting function in OpCode');\n  }\n\n  consumeNumberOrString() {\n    let value = this.codes[this.i++];\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n\n  consumeNumberStringOrMarker() {\n    let value = this.codes[this.i++];\n\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {\n      return value;\n    }\n\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\n\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\n\nfunction replaceNgsp(value) {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\n\n\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes = [];\n  const updateOpCodes = [];\n  const existingTNodeStack = [[]];\n\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression = part; // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n\n          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === 47\n      /* CharCode.SLASH */\n      ;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, 42\n      /* CharCode.STAR */\n      , 35\n      /* CharCode.HASH */\n      );\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n\n      if (isClosing) {\n        existingTNodeStack.shift();\n        setCurrentTNode(getCurrentParentTNode(), false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n      }\n    }\n  }\n\n  tView.data[index] = {\n    create: createOpCodes,\n    update: updateOpCodes\n  };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\n\n\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n\n  createOpCodes.push(opCode, text === null ? '' : text); // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n\n  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32\n  /* TNodeType.Icu */\n  : 1\n  /* TNodeType.Text */\n  , text === null ? ngDevMode ? '{{?}}' : '' : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false\n  /* Text nodes are self closing */\n  );\n\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n\n  return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\n\n\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n  }\n}\n/**\n * See `i18nAttributes` above.\n */\n\n\nfunction i18nAttributesFirstPass(tView, index, values) {\n  const previousElement = getCurrentTNode();\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes = [];\n\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        } // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n\n\n        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n      }\n    }\n\n    tView.data[index] = updateOpCodes;\n  }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\n\n\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length; // Location of mask\n\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n\n  const startIndex = maskIndex + 2; // location of first allocation.\n\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n\n  updateOpCodes.push(destinationNode << 2\n  /* I18nUpdateOpCode.SHIFT_REF */\n  | (attrName ? 1\n  /* I18nUpdateOpCode.Attr */\n  : 0\n  /* I18nUpdateOpCode.Text */\n  ));\n\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\n\n\nfunction countBindings(opCodes) {\n  let count = 0;\n\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i]; // Bindings are negative numbers.\n\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n\n  return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\n\n\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\n\nfunction isRootTemplateMessage(subTemplateIndex) {\n  return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\n\n\nfunction removeInnerTemplateTranslation(message) {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.slice(index);\n  return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\n\n\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\n\n\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus = [];\n\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value) - 1; // Replace nested ICU expression by a comment node\n\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n\n    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\n  }\n\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\n\n\nfunction parseICUBlock(pattern) {\n  const cases = [];\n  const values = [];\n  let icuType = 1\n  /* IcuType.plural */\n  ;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0\n      /* IcuType.select */\n      ;\n    } else {\n      icuType = 1\n      /* IcuType.plural */\n      ;\n    }\n\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n  const parts = i18nParseTextIntoPartsAndICU(pattern); // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n\n    if (icuType === 1\n    /* IcuType.plural */\n    ) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n\n    if (key.length) {\n      cases.push(key);\n    }\n\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  } // TODO(ocombe): support ICU expressions in attributes, see #21615\n\n\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\n\n\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n  if (!pattern) {\n    return [];\n  }\n\n  let prevPos = 0;\n  const braceStack = [];\n  const results = [];\n  const braces = /[{}]/g; // lastIndex doesn't get set to 0 so we have to.\n\n  braces.lastIndex = 0;\n  let match;\n\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n\n    if (match[0] == '}') {\n      braceStack.pop();\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n\n      braceStack.push('{');\n    }\n  }\n\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\n\n\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n  const create = [];\n  const remove = [];\n  const update = [];\n\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n\n  if (inertRootNode) {\n    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\n\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode;\n        const tagName = element.tagName.toLowerCase();\n\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i);\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP); // we assume the input string is safe, unless it's using a binding\n\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see https://g.co/ng/security#xss)`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          } // Parse the children of this node (if any)\n\n\n          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n\n        break;\n\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n\n        if (hasBinding) {\n          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n\n        break;\n\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression = nestedIcus[nestedIcuIndex]; // Create the comment node that will anchor the ICU expression\n\n          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n\n        break;\n    }\n\n    currentNode = currentNode.nextSibling;\n  }\n\n  return bindingMask;\n}\n\nfunction addRemoveNode(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\n\nfunction addRemoveNestedIcu(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2\n  /* I18nUpdateOpCode.SHIFT_REF */\n  | 2\n  /* I18nUpdateOpCode.IcuSwitch */\n  );\n}\n\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n  update.push(bindingMask, 1, index << 2\n  /* I18nUpdateOpCode.SHIFT_REF */\n  | 3\n  /* I18nUpdateOpCode.IcuUpdate */\n  );\n}\n\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n\n  create.push(text, createAtIdx, icuCreateOpCode(0\n  /* IcuCreateOpCode.AppendChild */\n  , appendToParentIdx, createAtIdx));\n}\n\nfunction addCreateAttribute(create, newIndex, attr) {\n  create.push(newIndex << 1\n  /* IcuCreateOpCode.SHIFT_REF */\n  | 1\n  /* IcuCreateOpCode.Attr */\n  , attr.name, attr.value);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// i18nPostprocess consts\n\n\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\n\nfunction i18nPostprocess(message, replacements = {}) {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result = message;\n\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches = {};\n    const templateIdsStack = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n      const content = phs || tmpl;\n      const placeholders = matches[content] || [];\n\n      if (!placeholders.length) {\n        content.split('|').forEach(placeholder => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0; // find placeholder index that matches current template id\n\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      } // update template id stack based on the current tag extracted\n\n\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      } // remove processed tag from the list\n\n\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  } // return current result if no replacements specified\n\n\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n\n\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n    return replacements.hasOwnProperty(key) ? replacements[key] : match;\n  });\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n\n  result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key];\n\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n\n      return list.shift();\n    }\n\n    return match;\n  });\n  return result;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant(tView.consts, messageIndex);\n  const parentTNode = getCurrentParentTNode();\n\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n  }\n\n  const tI18n = tView.data[adjustedIndex];\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView); // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n\n  const insertInFrontOf = parentTNode && parentTNode.type & 8\n  /* TNodeType.ElementContainer */\n  ? lView[parentTNode.index] : null;\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18nEnd() {\n  setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant(tView.consts, attrsIndex);\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18nExp(value) {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18nApply(index) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n  return i18nPostprocess(message, replacements);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\n\n\nfunction providersResolver(def, providers, viewProviders) {\n  const tView = getTView();\n\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def); // The list of view providers is processed first, and the flags are updated\n\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true); // Then, the list of providers is processed, and the flags are updated\n\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\n\n\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n  provider = resolveForwardRef(provider);\n\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    let providerFactory = providerToFactory(provider);\n    const tNode = getCurrentTNode();\n    const beginIndex = tNode.providerIndexes & 1048575\n    /* TNodeProviderIndexes.ProvidersStartIndexMask */\n    ;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount = tNode.providerIndexes >> 20\n    /* TNodeProviderIndexes.CptViewProvidersCountShift */\n    ;\n\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576\n          /* TNodeProviderIndexes.CptViewProvidersCountShifter */\n          ;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576\n          /* TNodeProviderIndexes.CptViewProvidersCountShifter */\n          ;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);\n      }\n\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\n\n\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n\n      if (!providerIsTypeProvider && provider.multi) {\n        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\n\n\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  if (isComponentProvider) {\n    multiFactory.componentProviders++;\n  }\n\n  return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\n\n\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n\n  return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\n\n\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n  return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\n\n\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n  const factories = this.multi;\n  let result;\n\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders;\n    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode); // Copy the section of the array which contains `multi` `providers` from the component\n\n    result = multiProviders.slice(0, componentCount); // Insert the `viewProvider` instances.\n\n    multiResolve(factories, result); // Copy the section of the array which contains `multi` `providers` from other directives\n\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = []; // Insert the `viewProvider` instances.\n\n    multiResolve(factories, result);\n  }\n\n  return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\n\n\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i];\n    result.push(factory());\n  }\n\n  return result;\n}\n/**\n * Creates a multi factory.\n */\n\n\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = (def, processProvidersFn) => {\n      return providersResolver(def, //\n      processProvidersFn ? processProvidersFn(providers) : providers, //\n      viewProviders);\n    };\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\n\n\nclass NgModuleRef$1 {}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\n\n\nclass NgModuleFactory$1 {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\n\n\nfunction createNgModule(ngModule, parentInjector) {\n  return new NgModuleRef(ngModule, parentInjector ?? null);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\n\n\nconst createNgModuleRef = createNgModule;\n\nclass NgModuleRef extends NgModuleRef$1 {\n  constructor(ngModuleType, _parent) {\n    super();\n    this._parent = _parent; // tslint:disable-next-line:require-internal-with-underscore\n\n    this._bootstrapComponents = [];\n    this.destroyCbs = []; // When bootstrapping a module we have a dependency graph that looks like this:\n    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n    // circular dependency which will result in a runtime error, because the injector doesn't\n    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n    // and providing it, rather than letting the injector resolve it.\n\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = maybeUnwrapFn$1(ngModuleDef.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], stringify(ngModuleType), new Set(['environment'])); // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n\n    this._r3Injector.resolveInjectorInitializers();\n\n    this.instance = this._r3Injector.get(ngModuleType);\n  }\n\n  get injector() {\n    return this._r3Injector;\n  }\n\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs.push(callback);\n  }\n\n}\n\nclass NgModuleFactory extends NgModuleFactory$1 {\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n\n  create(parentInjector) {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n\n}\n\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n  constructor(providers, parent, source) {\n    super();\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    this.instance = null;\n    const injector = new R3Injector([...providers, {\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], parent || getNullInjector(), source, new Set(['environment']));\n    this.injector = injector;\n    injector.resolveInjectorInitializers();\n  }\n\n  destroy() {\n    this.injector.destroy();\n  }\n\n  onDestroy(callback) {\n    this.injector.onDestroy(callback);\n  }\n\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n * @developerPreview\n */\n\n\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n  const adapter = new EnvironmentNgModuleRefAdapter(providers, parent, debugName);\n  return adapter.injector;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\n\n\nclass StandaloneService {\n  constructor(_injector) {\n    this._injector = _injector;\n    this.cachedInjectors = new Map();\n  }\n\n  getOrCreateStandaloneInjector(componentDef) {\n    if (!componentDef.standalone) {\n      return null;\n    }\n\n    if (!this.cachedInjectors.has(componentDef.id)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;\n      this.cachedInjectors.set(componentDef.id, standaloneInjector);\n    }\n\n    return this.cachedInjectors.get(componentDef.id);\n  }\n\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n\n}\n/** @nocollapse */\n\n\nStandaloneService.ɵprov = ɵɵdefineInjectable({\n  token: StandaloneService,\n  providedIn: 'environment',\n  factory: () => new StandaloneService(ɵɵinject(EnvironmentInjector))\n});\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\n\nfunction ɵɵStandaloneFeature(definition) {\n  definition.getStandaloneInjector = parentInjector => {\n    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getComponent(element) {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n\n  if (context.component === undefined) {\n    const lView = context.lView;\n\n    if (lView === null) {\n      return null;\n    }\n\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n\n  return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getContext(element) {\n  assertDomElement(element);\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getOwningComponent(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n  let parent;\n\n  while (lView[TVIEW].type === 2\n  /* TViewType.Embedded */\n  && (parent = getLViewParent(lView))) {\n    lView = parent;\n  }\n\n  return lView[FLAGS] & 256\n  /* LViewFlags.IsRoot */\n  ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getRootComponents(elementOrDir) {\n  const lView = readPatchedLView(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getInjector(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n  const tNode = lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\n\n\nfunction getInjectionTokens(element) {\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex];\n  const providerTokens = [];\n  const startIndex = tNode.providerIndexes & 1048575\n  /* TNodeProviderIndexes.ProvidersStartIndexMask */\n  ;\n  const endIndex = tNode.directiveEnd;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n\n    providerTokens.push(value);\n  }\n\n  return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getDirectives(node) {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n\n  const context = getLContext(node);\n  const lView = context ? context.lView : null;\n\n  if (lView === null) {\n    return [];\n  }\n\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n\n  if (!tView?.data[nodeIndex]) {\n    return [];\n  }\n\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n  } // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n\n\n  return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getDirectiveMetadata(directiveOrComponentInstance) {\n  const {\n    constructor\n  } = directiveOrComponentInstance;\n\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  } // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n\n\n  const componentDef = getComponentDef$1(constructor);\n\n  if (componentDef) {\n    return {\n      inputs: componentDef.inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default\n    };\n  }\n\n  const directiveDef = getDirectiveDef(constructor);\n\n  if (directiveDef) {\n    return {\n      inputs: directiveDef.inputs,\n      outputs: directiveDef.outputs\n    };\n  }\n\n  return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\n\n\nfunction getLocalRefs(target) {\n  const context = getLContext(target);\n  if (context === null) return {};\n\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n\n    if (lView === null) {\n      return {};\n    }\n\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n\n  return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getHostElement(componentOrDirective) {\n  return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\n\n\nfunction getRenderedText(component) {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\n\n\nfunction getListeners(element) {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners = [];\n\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n\n      if (typeof firstParam === 'string') {\n        const name = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]);\n        const callback = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++]; // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n\n        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture,\n            type\n          });\n        }\n      }\n    }\n  }\n\n  listeners.sort(sortListeners);\n  return listeners;\n}\n\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\n\n\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n/**\n * Returns the attached `DebugNode` instance for an element in the DOM.\n *\n * @param element DOM element which is owned by an existing component's view.\n */\n\n\nfunction getDebugNode(element) {\n  if (ngDevMode && !(element instanceof Node)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n\n  const lContext = getLContext(element);\n  const lView = lContext ? lContext.lView : null;\n\n  if (lView === null) {\n    return null;\n  }\n\n  const nodeIndex = lContext.nodeIndex;\n\n  if (nodeIndex !== -1) {\n    const valueInLView = lView[nodeIndex]; // this means that value in the lView is a component with its own\n    // data. In this situation the TNode is not accessed at the same spot.\n\n    const tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);\n    ngDevMode && assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');\n    return buildDebugNode(tNode, lView);\n  }\n\n  return null;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\n\n\nfunction getComponentLView(target) {\n  const lContext = getLContext(target);\n  const nodeIndx = lContext.nodeIndex;\n  const lView = lContext.lView;\n  ngDevMode && assertLView(lView);\n  const componentLView = lView[nodeIndx];\n  ngDevMode && assertLView(componentLView);\n  return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\n\n\nfunction assertDomElement(value) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\n\n\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  return noSideEffects(() => {\n    const clazz = type;\n\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = { ...clazz.propDecorators,\n          ...propDecorators\n        };\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\n\n\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\n\n\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\n\n\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\n\n\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\n\n\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\n\n\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpipe(index, pipeName) {\n  const tView = getTView();\n  let pipeDef;\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex];\n  }\n\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\n\n\nfunction getPipeDef(name, registry) {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n\n  if (ngDevMode) {\n    throw new RuntimeError(-302\n    /* RuntimeErrorCode.PIPE_NOT_FOUND */\n    , getPipeNotFoundErrorMessage(name));\n  }\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\n\n\nfunction getPipeNotFoundErrorMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'declared or imported in this module'}`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpipeBind1(index, slotOffset, v1) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);\n}\n\nfunction isPure(lView, index) {\n  return lView[TVIEW].data[index].pure;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass EventEmitter_ extends Subject {\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  emit(value) {\n    super.next(value);\n  }\n\n  subscribe(observerOrNext, error, complete) {\n    let nextFn = observerOrNext;\n\n    let errorFn = error || (() => null);\n\n    let completeFn = complete;\n\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n\n    if (this.__isAsync) {\n      errorFn = _wrapInTimeout(errorFn);\n\n      if (nextFn) {\n        nextFn = _wrapInTimeout(nextFn);\n      }\n\n      if (completeFn) {\n        completeFn = _wrapInTimeout(completeFn);\n      }\n    }\n\n    const sink = super.subscribe({\n      next: nextFn,\n      error: errorFn,\n      complete: completeFn\n    });\n\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n\n    return sink;\n  }\n\n}\n\nfunction _wrapInTimeout(fn) {\n  return value => {\n    setTimeout(fn, undefined, value);\n  };\n}\n/**\n * @publicApi\n */\n\n\nconst EventEmitter = EventEmitter_;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction symbolIterator() {\n  return this._results[getSymbolIterator()]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\n\n\nclass QueryList {\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(_emitDistinctChangesOnly = false) {\n    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n    this.dirty = true;\n    this._results = [];\n    this._changesDetected = false;\n    this._changes = null;\n    this.length = 0;\n    this.first = undefined;\n    this.last = undefined; // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [getSymbolIterator()](): Iterator<T> { ... }\n\n    const symbol = getSymbolIterator();\n    const proto = QueryList.prototype;\n    if (!proto[symbol]) proto[symbol] = symbolIterator;\n  }\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n\n\n  get changes() {\n    return this._changes || (this._changes = new EventEmitter());\n  }\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n\n\n  get(index) {\n    return this._results[index];\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n\n\n  map(fn) {\n    return this._results.map(fn);\n  }\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n\n\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n\n\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n\n\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n\n\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n\n\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n\n\n  toArray() {\n    return this._results.slice();\n  }\n\n  toString() {\n    return this._results.toString();\n  }\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n\n\n  reset(resultsTree, identityAccessor) {\n    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n    // QueryList (but not for QueryList itself.)\n    const self = this;\n    self.dirty = false;\n    const newResultFlat = flatten$1(resultsTree);\n\n    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n      self._results = newResultFlat;\n      self.length = newResultFlat.length;\n      self.last = newResultFlat[this.length - 1];\n      self.first = newResultFlat[0];\n    }\n  }\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n\n\n  notifyOnChanges() {\n    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);\n  }\n  /** internal */\n\n\n  setDirty() {\n    this.dirty = true;\n  }\n  /** internal */\n\n\n  destroy() {\n    this.changes.complete();\n    this.changes.unsubscribe();\n  }\n\n}\n\nSymbol.iterator;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\n\nclass TemplateRef {}\n/**\n * @internal\n * @nocollapse\n */\n\n\nTemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;\nconst ViewEngineTemplateRef = TemplateRef; // TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\n\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n  constructor(_declarationLView, _declarationTContainer, elementRef) {\n    super();\n    this._declarationLView = _declarationLView;\n    this._declarationTContainer = _declarationTContainer;\n    this.elementRef = elementRef;\n  }\n\n  createEmbeddedView(context, injector) {\n    const embeddedTView = this._declarationTContainer.tViews;\n    const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16\n    /* LViewFlags.CheckAlways */\n    , null, embeddedTView.declTNode, null, null, null, null, injector || null);\n    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n    const declarationViewLQueries = this._declarationLView[QUERIES];\n\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n\n    renderView(embeddedTView, embeddedLView, context);\n    return new ViewRef(embeddedLView);\n  }\n\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\n\nfunction injectTemplateRef() {\n  return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\n\n\nfunction createTemplateRef(hostTNode, hostLView) {\n  if (hostTNode.type & 4\n  /* TNodeType.Container */\n  ) {\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\n\n\nclass ViewContainerRef {}\n/**\n * @internal\n * @nocollapse\n */\n\n\nViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\n\nfunction injectViewContainerRef() {\n  const previousTNode = getCurrentTNode();\n  return createContainerRef(previousTNode, getLView());\n}\n\nconst VE_ViewContainerRef = ViewContainerRef; // TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\n\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(_lContainer, _hostTNode, _hostLView) {\n    super();\n    this._lContainer = _lContainer;\n    this._hostTNode = _hostTNode;\n    this._hostLView = _hostLView;\n  }\n\n  get element() {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n\n  get injector() {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n  /** @deprecated No replacement */\n\n\n  get parentInjector() {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[injectorIndex + 8\n      /* NodeInjectorOffset.TNODE */\n      ];\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n\n  clear() {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n\n  get(index) {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n\n  get length() {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n\n  createEmbeddedView(templateRef, context, indexOrOptions) {\n    let index;\n    let injector;\n\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n\n    const viewRef = templateRef.createEmbeddedView(context || {}, injector);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index; // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + 'which to insert the new component\\'s host view into this container)');\n      }\n\n      index = indexOrOptions;\n    } else {\n      if (ngDevMode) {\n        assertDefined(getComponentDef$1(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);\n        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + 'and a number (representing an index at which to insert the new component\\'s ' + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');\n      }\n\n      const options = indexOrOptions || {};\n\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n    }\n\n    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef$1(componentFactoryOrType));\n    const contextInjector = injector || this.parentInjector; // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n\n    if (!environmentInjector && componentFactory.ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector; // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n\n\n      const result = _injector.get(EnvironmentInjector, null);\n\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, environmentInjector);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n\n  insert(viewRef, index) {\n    const lView = viewRef._lView;\n    const tView = lView[TVIEW];\n\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n      const prevIdx = this.indexOf(viewRef); // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT];\n        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.'); // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n\n        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    } // Logical operation of adding `LView` to `LContainer`\n\n\n    const adjustedIdx = this._adjustIndex(index);\n\n    const lContainer = this._lContainer;\n    insertView(tView, lView, lContainer, adjustedIdx); // Physical operation of adding the DOM nodes.\n\n    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n\n    if (parentRNode !== null) {\n      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n\n    viewRef.attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n    return viewRef;\n  }\n\n  move(viewRef, newIndex) {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n\n    return this.insert(viewRef, newIndex);\n  }\n\n  indexOf(viewRef) {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n\n  remove(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n\n  detach(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n\n    const view = detachView(this._lContainer, adjustedIdx);\n    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new ViewRef(view) : null;\n  }\n\n  _adjustIndex(index, shift = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`); // +1 because it's legal to insert at the end.\n\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n\n    return index;\n  }\n\n};\n\nfunction getViewRefs(lContainer) {\n  return lContainer[VIEW_REFS];\n}\n\nfunction getOrCreateViewRefs(lContainer) {\n  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\n\n\nfunction createContainerRef(hostTNode, hostLView) {\n  ngDevMode && assertTNodeType(hostTNode, 12\n  /* TNodeType.AnyContainer */\n  | 3\n  /* TNodeType.AnyRNode */\n  );\n  let lContainer;\n  const slotValue = hostLView[hostTNode.index];\n\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    let commentNode; // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n\n    if (hostTNode.type & 8\n    /* TNodeType.ElementContainer */\n    ) {\n      commentNode = unwrapRNode(slotValue);\n    } else {\n      // If the host is a regular element, we have to insert a comment node manually which will\n      // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n      // manipulation to insert it.\n      const renderer = hostLView[RENDERER];\n      ngDevMode && ngDevMode.rendererCreateComment++;\n      commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n      const hostNative = getNativeByTNode(hostTNode, hostLView);\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n    }\n\n    hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);\n    addToViewTree(hostLView, lContainer);\n  }\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\n\nconst unusedValueExportToPlacateAjd$1 = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\n\nconst unusedValueExportToPlacateAjd = 1;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$6 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd;\n\nclass LQuery_ {\n  constructor(queryList) {\n    this.queryList = queryList;\n    this.matches = null;\n  }\n\n  clone() {\n    return new LQuery_(this.queryList);\n  }\n\n  setDirty() {\n    this.queryList.setDirty();\n  }\n\n}\n\nclass LQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n\n  createEmbeddedView(tView) {\n    const tQueries = tView.queries;\n\n    if (tQueries !== null) {\n      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries = []; // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n\n      return new LQueries_(viewLQueries);\n    }\n\n    return null;\n  }\n\n  insertView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  detachView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  dirtyQueriesWithMatches(tView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n\n}\n\nclass TQueryMetadata_ {\n  constructor(predicate, flags, read = null) {\n    this.predicate = predicate;\n    this.flags = flags;\n    this.read = read;\n  }\n\n}\n\nclass TQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n\n  elementStart(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n\n  elementEnd(tNode) {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n\n  embeddedTView(tNode) {\n    let queriesForTemplateRef = null;\n\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n\n  template(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n\n  getByIndex(index) {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n\n  get length() {\n    return this.queries.length;\n  }\n\n  track(tquery) {\n    this.queries.push(tquery);\n  }\n\n}\n\nclass TQuery_ {\n  constructor(metadata, nodeIndex = -1) {\n    this.metadata = metadata;\n    this.matches = null;\n    this.indexInDeclarationView = -1;\n    this.crossesNgTemplate = false;\n    /**\n     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n     * elements in a template.\n     */\n\n    this._appliesToNextNode = true;\n    this._declarationNodeIndex = nodeIndex;\n  }\n\n  elementStart(tView, tNode) {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n\n  elementEnd(tNode) {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n\n  template(tView, tNode) {\n    this.elementStart(tView, tNode);\n  }\n\n  embeddedTView(tNode, childQueryIndex) {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true; // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n\n    return null;\n  }\n\n  isApplyingToNode(tNode) {\n    if (this._appliesToNextNode && (this.metadata.flags & 1\n    /* QueryFlags.descendants */\n    ) !== 1\n    /* QueryFlags.descendants */\n    ) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent; // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n\n      while (parent !== null && parent.type & 8\n      /* TNodeType.ElementContainer */\n      && parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n\n    return this._appliesToNextNode;\n  }\n\n  matchTNode(tView, tNode) {\n    const predicate = this.metadata.predicate;\n\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name)); // Also try matching the name to a provider since strings can be used as DI tokens too.\n\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if (predicate === TemplateRef) {\n        if (tNode.type & 4\n        /* TNodeType.Container */\n        ) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n\n  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n\n      if (read !== null) {\n        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4\n        /* TNodeType.Container */\n        ) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n\n  addMatch(tNodeIdx, matchIdx) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\n\n\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  const localNames = tNode.localNames;\n\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1];\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction createResultByTNodeType(tNode, currentView) {\n  if (tNode.type & (3\n  /* TNodeType.AnyRNode */\n  | 8\n  /* TNodeType.ElementContainer */\n  )) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & 4\n  /* TNodeType.Container */\n  ) {\n    return createTemplateRef(tNode, currentView);\n  }\n\n  return null;\n}\n\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n  }\n}\n\nfunction createSpecialToken(lView, tNode, read) {\n  if (read === ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, 3\n    /* TNodeType.AnyRNode */\n    | 12\n    /* TNodeType.AnyContainer */\n    );\n    return createContainerRef(tNode, lView);\n  } else {\n    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n  }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\n\n\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n  const lQuery = lView[QUERIES].queries[queryIndex];\n\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result = [];\n\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx];\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n\n    lQuery.matches = result;\n  }\n\n  return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\n\n\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n  const tQuery = tView.queries.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2]);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n        const declarationLContainer = lView[-tNodeIdx];\n        ngDevMode && assertLContainer(declarationLContainer); // collect matches for views inserted in this container\n\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        } // collect matches for views created from this declaration container and inserted into\n        // different containers\n\n\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵqueryRefresh(queryList) {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n  setCurrentQueryIndex(queryIndex + 1);\n  const tQuery = getTQuery(tView, queryIndex);\n\n  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2\n  /* QueryFlags.isStatic */\n  ) === 2\n  /* QueryFlags.isStatic */\n  )) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵviewQuery(predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n\n    if ((flags & 2\n    /* QueryFlags.isStatic */\n    ) === 2\n    /* QueryFlags.isStatic */\n    ) {\n      tView.staticViewQueries = true;\n    }\n  }\n\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode();\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n\n    if ((flags & 2\n    /* QueryFlags.isStatic */\n    ) === 2\n    /* QueryFlags.isStatic */\n    ) {\n      tView.staticContentQueries = true;\n    }\n  }\n\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵloadQuery() {\n  return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\n\nfunction loadQueryInternal(lView, queryIndex) {\n  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n  return lView[QUERIES].queries[queryIndex].queryList;\n}\n\nfunction createLQuery(tView, lView, flags) {\n  const queryList = new QueryList((flags & 4\n  /* QueryFlags.emitDistinctChangesOnly */\n  ) === 4\n  /* QueryFlags.emitDistinctChangesOnly */\n  );\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES].queries.push(new LQuery_(queryList));\n}\n\nfunction createTQuery(tView, metadata, nodeIndex) {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\n\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n  }\n}\n\nfunction getTQuery(tView, index) {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries.getByIndex(index);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\n\n\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n  return createTemplateRef(tNode, lView);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\n\n\nconst angularCoreEnv = (() => ({\n  'ɵɵattribute': ɵɵattribute,\n  'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n  'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n  'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n  'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n  'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n  'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n  'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n  'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n  'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n  'ɵɵdefineComponent': ɵɵdefineComponent,\n  'ɵɵdefineDirective': ɵɵdefineDirective,\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵdefineNgModule': ɵɵdefineNgModule,\n  'ɵɵdefinePipe': ɵɵdefinePipe,\n  'ɵɵdirectiveInject': ɵɵdirectiveInject,\n  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinjectAttribute': ɵɵinjectAttribute,\n  'ɵɵinvalidFactory': ɵɵinvalidFactory,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n  'ɵɵresetView': ɵɵresetView,\n  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n  'ɵɵProvidersFeature': ɵɵProvidersFeature,\n  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n  'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n  'ɵɵnextContext': ɵɵnextContext,\n  'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n  'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n  'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n  'ɵɵenableBindings': ɵɵenableBindings,\n  'ɵɵdisableBindings': ɵɵdisableBindings,\n  'ɵɵelementStart': ɵɵelementStart,\n  'ɵɵelementEnd': ɵɵelementEnd,\n  'ɵɵelement': ɵɵelement,\n  'ɵɵelementContainerStart': ɵɵelementContainerStart,\n  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n  'ɵɵelementContainer': ɵɵelementContainer,\n  'ɵɵpureFunction0': ɵɵpureFunction0,\n  'ɵɵpureFunction1': ɵɵpureFunction1,\n  'ɵɵpureFunction2': ɵɵpureFunction2,\n  'ɵɵpureFunction3': ɵɵpureFunction3,\n  'ɵɵpureFunction4': ɵɵpureFunction4,\n  'ɵɵpureFunction5': ɵɵpureFunction5,\n  'ɵɵpureFunction6': ɵɵpureFunction6,\n  'ɵɵpureFunction7': ɵɵpureFunction7,\n  'ɵɵpureFunction8': ɵɵpureFunction8,\n  'ɵɵpureFunctionV': ɵɵpureFunctionV,\n  'ɵɵgetCurrentView': ɵɵgetCurrentView,\n  'ɵɵrestoreView': ɵɵrestoreView,\n  'ɵɵlistener': ɵɵlistener,\n  'ɵɵprojection': ɵɵprojection,\n  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n  'ɵɵpipeBind1': ɵɵpipeBind1,\n  'ɵɵpipeBind2': ɵɵpipeBind2,\n  'ɵɵpipeBind3': ɵɵpipeBind3,\n  'ɵɵpipeBind4': ɵɵpipeBind4,\n  'ɵɵpipeBindV': ɵɵpipeBindV,\n  'ɵɵprojectionDef': ɵɵprojectionDef,\n  'ɵɵhostProperty': ɵɵhostProperty,\n  'ɵɵproperty': ɵɵproperty,\n  'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n  'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n  'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n  'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n  'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n  'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n  'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n  'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n  'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n  'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n  'ɵɵpipe': ɵɵpipe,\n  'ɵɵqueryRefresh': ɵɵqueryRefresh,\n  'ɵɵviewQuery': ɵɵviewQuery,\n  'ɵɵloadQuery': ɵɵloadQuery,\n  'ɵɵcontentQuery': ɵɵcontentQuery,\n  'ɵɵreference': ɵɵreference,\n  'ɵɵclassMap': ɵɵclassMap,\n  'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n  'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n  'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n  'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n  'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n  'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n  'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n  'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n  'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n  'ɵɵstyleMap': ɵɵstyleMap,\n  'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n  'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n  'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n  'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n  'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n  'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n  'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n  'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n  'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n  'ɵɵstyleProp': ɵɵstyleProp,\n  'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n  'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n  'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n  'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n  'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n  'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n  'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n  'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n  'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n  'ɵɵclassProp': ɵɵclassProp,\n  'ɵɵadvance': ɵɵadvance,\n  'ɵɵtemplate': ɵɵtemplate,\n  'ɵɵtext': ɵɵtext,\n  'ɵɵtextInterpolate': ɵɵtextInterpolate,\n  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n  'ɵɵi18n': ɵɵi18n,\n  'ɵɵi18nAttributes': ɵɵi18nAttributes,\n  'ɵɵi18nExp': ɵɵi18nExp,\n  'ɵɵi18nStart': ɵɵi18nStart,\n  'ɵɵi18nEnd': ɵɵi18nEnd,\n  'ɵɵi18nApply': ɵɵi18nApply,\n  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n  'ɵɵresolveWindow': ɵɵresolveWindow,\n  'ɵɵresolveDocument': ɵɵresolveDocument,\n  'ɵɵresolveBody': ɵɵresolveBody,\n  'ɵɵsetComponentScope': ɵɵsetComponentScope,\n  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n  'ɵɵregisterNgModuleType': registerNgModuleType,\n  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n  'ɵɵsanitizeScript': ɵɵsanitizeScript,\n  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n  'forwardRef': forwardRef,\n  'resolveForwardRef': resolveForwardRef\n}))();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction patchModuleCompilation() {// Does nothing, but exists as a target for patching.\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction isModuleWithProviders$1(value) {\n  return value.ngModule !== undefined;\n}\n\nfunction isNgModule$1(value) {\n  return !!getNgModuleDef(value);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\n\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\n\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\n\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\n\n\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n\n  return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\n\n\nfunction compileNgModule(moduleType, ngModule = {}) {\n  patchModuleCompilation();\n  compileNgModuleDefs(moduleType, ngModule);\n\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType, ngModule.id);\n  } // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n\n\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\n\n\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n\n        const compiler = getCompilerFacade({\n          usage: 0\n          /* JitCompilerUsage.Decorator */\n          ,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten$1(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten$1(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten$1(ngModule.schemas) : null,\n          id: ngModule.id || null\n        }); // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n\n      return ngModuleDef;\n    }\n  });\n  let ngFactoryDef = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0\n          /* JitCompilerUsage.Decorator */\n          ,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0\n        });\n      }\n\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]\n        };\n        const compiler = getCompilerFacade({\n          usage: 0\n          /* JitCompilerUsage.Decorator */\n          ,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n\nfunction generateStandaloneInDeclarationsError(type, location) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` + 'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\n\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n  if (verifiedNgModule.get(moduleType)) return; // skip verifications of standalone components, directives and pipes\n\n  if (isStandalone(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef;\n\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType);\n\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDef(moduleType, true);\n  }\n\n  const errors = [];\n  const declarations = maybeUnwrapFn$1(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn$1(ngModuleDef.imports);\n  flatten$1(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn$1(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach(declarationType => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten$1(imports.map(computeCombinedExports)).map(resolveForwardRef)];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n\n  if (ngModule) {\n    ngModule.imports && flatten$1(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n      verifySemanticsOfNgModuleImport(mod, moduleType);\n      verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n    ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n  } // Throw Error if any errors were detected.\n\n\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  } ////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n\n  function verifyDirectivesHaveSelector(type) {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n\n    if (!getComponentDef$1(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n\n  function verifyNotStandalone(type, moduleType) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n\n    if (def?.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef$1(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';\n\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n\n  function verifyDeclarationIsUnique(type, suppressErrors) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n\n  function verifyCorrectBootstrapType(type) {\n    type = resolveForwardRef(type);\n\n    if (!getComponentDef$1(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` + `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` + `function for bootstrap instead.`);\n    }\n  }\n\n  function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n\n    if (getComponentDef$1(type)) {\n      // We know we are component\n      const component = getAnnotation(type, 'Component');\n\n      if (component && component.entryComponents) {\n        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n      }\n    }\n  }\n\n  function verifySemanticsOfNgModuleImport(type, importingModule) {\n    type = resolveForwardRef(type);\n    const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n\n    const pipeDef = getPipeDef$1(type);\n\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\n\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\n\nfunction getAnnotation(type, name) {\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n\n      if (proto.ngMetadataName == name) {\n        annotation = decorator;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\n\n\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\n\nfunction resetCompiledComponents() {\n  ownerNgModule = new WeakMap();\n  verifiedNgModule = new WeakMap();\n  moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\n\n\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type); // a standalone component, directive or pipe\n\n  if (ngModuleDef === null) {\n    return [type];\n  }\n\n  return [...flatten$1(maybeUnwrapFn$1(ngModuleDef.exports).map(type => {\n    const ngModuleDef = getNgModuleDef(type);\n\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\n\n\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration;\n      const componentDef = getComponentDef$1(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\n\n\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef$1(dir) : getDirectiveDef(dir)).filter(def => !!def);\n\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n\n  componentDef.schemas = transitiveScopes.schemas; // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n\n  componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\n\n\nfunction transitiveScopesFor(type) {\n  if (isNgModule$1(type)) {\n    return transitiveScopesForNgModule(type);\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set([type]),\n          pipes: new Set()\n        }\n      };\n    }\n\n    const pipeDef = getPipeDef$1(type);\n\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set(),\n          pipes: new Set([type])\n        }\n      };\n    }\n  } // TODO: change the error message to be more user-facing and take standalone into account\n\n\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\n\n\nfunction transitiveScopesForNgModule(moduleType) {\n  const def = getNgModuleDef(moduleType, true);\n\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n\n  const scopes = {\n    schemas: def.schemas || null,\n    compilation: {\n      directives: new Set(),\n      pipes: new Set()\n    },\n    exported: {\n      directives: new Set(),\n      pipes: new Set()\n    }\n  };\n  maybeUnwrapFn$1(def.imports).forEach(imported => {\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(imported);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n  maybeUnwrapFn$1(def.declarations).forEach(declared => {\n    const declaredWithDefs = declared;\n\n    if (getPipeDef$1(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n  maybeUnwrapFn$1(def.exports).forEach(exported => {\n    const exportedType = exported; // Either the type is a module, a pipe, or a component/directive (which may not have a\n    // ɵcmp as it might be compiled asynchronously).\n\n    if (isNgModule$1(exportedType)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedType);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef$1(exportedType)) {\n      scopes.exported.pipes.add(exportedType);\n    } else {\n      scopes.exported.directives.add(exportedType);\n    }\n  });\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\n\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders$1(value)) {\n    return value.ngModule;\n  }\n\n  return value;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet _nextReferenceId = 0;\n\nclass MetadataOverrider {\n  constructor() {\n    this._references = new Map();\n  }\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n\n\n  overrideMetadata(metadataClass, oldMetadata, override) {\n    const props = {};\n\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach(prop => props[prop] = oldMetadata[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n      }\n\n      setMetadata(props, override.set);\n    }\n\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n\n    return new metadataClass(props);\n  }\n\n}\n\nfunction removeMetadata(metadata, remove, references) {\n  const removeObjects = new Set();\n\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n\n    if (Array.isArray(removeValue)) {\n      removeValue.forEach(value => {\n        removeObjects.add(_propHashKey(prop, value, references));\n      });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n\n    if (Array.isArray(propValue)) {\n      metadata[prop] = propValue.filter(value => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata, add) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n\n    if (propValue != null && Array.isArray(propValue)) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata, set) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName, propValue, references) {\n  let nextObjectId = 0;\n  const objectIds = new Map();\n\n  const replacer = (key, value) => {\n    if (value !== null && typeof value === 'object') {\n      if (objectIds.has(value)) {\n        return objectIds.get(value);\n      } // Record an id for this object such that any later references use the object's id instead\n      // of the object itself, in order to break cyclic pointers in objects.\n\n\n      objectIds.set(value, `ɵobj#${nextObjectId++}`); // The first time an object is seen the object itself is serialized.\n\n      return value;\n    } else if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref, references) {\n  let id = references.get(ref);\n\n  if (!id) {\n    id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n\n  return id;\n}\n\nfunction _valueProps(obj) {\n  const props = []; // regular public props\n\n  Object.keys(obj).forEach(prop => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  }); // getters\n\n  let proto = obj;\n\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach(protoProp => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n\n  return props;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\n\nclass OverrideResolver {\n  constructor() {\n    this.overrides = new Map();\n    this.resolved = new Map();\n  }\n\n  addOverride(type, override) {\n    const overrides = this.overrides.get(type) || [];\n    overrides.push(override);\n    this.overrides.set(type, overrides);\n    this.resolved.delete(type);\n  }\n\n  setOverrides(overrides) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => {\n      this.addOverride(type, override);\n    });\n  }\n\n  getAnnotation(type) {\n    const annotations = reflection.annotations(type); // Try to find the nearest known Type annotation and make sure that this annotation is an\n    // instance of the type we are looking for, so we can use it for resolution. Note: there might\n    // be multiple known annotations found due to the fact that Components can extend Directives (so\n    // both Directive and Component annotations would be present), so we always check if the known\n    // annotation has the right type.\n\n    for (let i = annotations.length - 1; i >= 0; i--) {\n      const annotation = annotations[i];\n      const isKnownType = annotation instanceof Directive || annotation instanceof Component || annotation instanceof Pipe || annotation instanceof NgModule;\n\n      if (isKnownType) {\n        return annotation instanceof this.type ? annotation : null;\n      }\n    }\n\n    return null;\n  }\n\n  resolve(type) {\n    let resolved = this.resolved.get(type) || null;\n\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n\n      if (resolved) {\n        const overrides = this.overrides.get(type);\n\n        if (overrides) {\n          const overrider = new MetadataOverrider();\n          overrides.forEach(override => {\n            resolved = overrider.overrideMetadata(this.type, resolved, override);\n          });\n        }\n      }\n\n      this.resolved.set(type, resolved);\n    }\n\n    return resolved;\n  }\n\n}\n\nclass DirectiveResolver extends OverrideResolver {\n  get type() {\n    return Directive;\n  }\n\n}\n\nclass ComponentResolver extends OverrideResolver {\n  get type() {\n    return Component;\n  }\n\n}\n\nclass PipeResolver extends OverrideResolver {\n  get type() {\n    return Pipe;\n  }\n\n}\n\nclass NgModuleResolver extends OverrideResolver {\n  get type() {\n    return NgModule;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TestingModuleOverride;\n\n(function (TestingModuleOverride) {\n  TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n  TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\n\nfunction isTestingModuleOverride(value) {\n  return value === TestingModuleOverride.DECLARATION || value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\n\nfunction assertNoStandaloneComponents(types, resolver, location) {\n  types.forEach(type => {\n    const component = resolver.resolve(type);\n\n    if (component && component.standalone) {\n      throw new Error(generateStandaloneInDeclarationsError(type, location));\n    }\n  });\n}\n\nclass TestBedCompiler {\n  constructor(platform, additionalModuleTypes) {\n    this.platform = platform;\n    this.additionalModuleTypes = additionalModuleTypes;\n    this.originalComponentResolutionQueue = null; // Testing module configuration\n\n    this.declarations = [];\n    this.imports = [];\n    this.providers = [];\n    this.schemas = []; // Queues of components/directives/pipes that should be recompiled.\n\n    this.pendingComponents = new Set();\n    this.pendingDirectives = new Set();\n    this.pendingPipes = new Set(); // Keep track of all components and directives, so we can patch Providers onto defs later.\n\n    this.seenComponents = new Set();\n    this.seenDirectives = new Set(); // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n\n    this.overriddenModules = new Set(); // Store resolved styles for Components that have template overrides present and `styleUrls`\n    // defined at the same time.\n\n    this.existingComponentStyles = new Map();\n    this.resolvers = initResolvers();\n    this.componentToModuleScope = new Map(); // Map that keeps initial version of component/directive/pipe defs in case\n    // we compile a Type again, thus overriding respective static fields. This is\n    // required to make sure we restore defs to their initial states between test runs.\n    // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an\n    // NgModule), store all of them in a map.\n\n    this.initialNgDefs = new Map(); // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n    // defs in case TestBed makes changes to the originals.\n\n    this.defCleanupOps = [];\n    this._injector = null;\n    this.compilerProviders = null;\n    this.providerOverrides = [];\n    this.rootProviderOverrides = []; // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n    // module's provider list.\n\n    this.providerOverridesByModule = new Map();\n    this.providerOverridesByToken = new Map();\n    this.scopesWithOverriddenProviders = new Set();\n    this.testModuleRef = null;\n\n    class DynamicTestModule {}\n\n    this.testModuleType = DynamicTestModule;\n  }\n\n  setCompilerProviders(providers) {\n    this.compilerProviders = providers;\n    this._injector = null;\n  }\n\n  configureTestingModule(moduleDef) {\n    // Enqueue any compilation tasks for the directly declared component.\n    if (moduleDef.declarations !== undefined) {\n      // Verify that there are no standalone components\n      assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n      this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n      this.declarations.push(...moduleDef.declarations);\n    } // Enqueue any compilation tasks for imported modules.\n\n\n    if (moduleDef.imports !== undefined) {\n      this.queueTypesFromModulesArray(moduleDef.imports);\n      this.imports.push(...moduleDef.imports);\n    }\n\n    if (moduleDef.providers !== undefined) {\n      this.providers.push(...moduleDef.providers);\n    }\n\n    if (moduleDef.schemas !== undefined) {\n      this.schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  overrideModule(ngModule, override) {\n    this.overriddenModules.add(ngModule); // Compile the module right away.\n\n    this.resolvers.module.addOverride(ngModule, override);\n    const metadata = this.resolvers.module.resolve(ngModule);\n\n    if (metadata === null) {\n      throw invalidTypeError(ngModule.name, 'NgModule');\n    }\n\n    this.recompileNgModule(ngModule, metadata); // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n    // new declarations or imported modules. Ingest any possible new types and add them to the\n    // current queue.\n\n    this.queueTypesFromModulesArray([ngModule]);\n  }\n\n  overrideComponent(component, override) {\n    this.verifyNoStandaloneFlagOverrides(component, override);\n    this.resolvers.component.addOverride(component, override);\n    this.pendingComponents.add(component);\n  }\n\n  overrideDirective(directive, override) {\n    this.verifyNoStandaloneFlagOverrides(directive, override);\n    this.resolvers.directive.addOverride(directive, override);\n    this.pendingDirectives.add(directive);\n  }\n\n  overridePipe(pipe, override) {\n    this.verifyNoStandaloneFlagOverrides(pipe, override);\n    this.resolvers.pipe.addOverride(pipe, override);\n    this.pendingPipes.add(pipe);\n  }\n\n  verifyNoStandaloneFlagOverrides(type, override) {\n    if (override.add?.hasOwnProperty('standalone') || override.set?.hasOwnProperty('standalone') || override.remove?.hasOwnProperty('standalone')) {\n      throw new Error(`An override for the ${type.name} class has the \\`standalone\\` flag. ` + `Changing the \\`standalone\\` flag via TestBed overrides is not supported.`);\n    }\n  }\n\n  overrideProvider(token, provider) {\n    let providerDef;\n\n    if (provider.useFactory !== undefined) {\n      providerDef = {\n        provide: token,\n        useFactory: provider.useFactory,\n        deps: provider.deps || [],\n        multi: provider.multi\n      };\n    } else if (provider.useValue !== undefined) {\n      providerDef = {\n        provide: token,\n        useValue: provider.useValue,\n        multi: provider.multi\n      };\n    } else {\n      providerDef = {\n        provide: token\n      };\n    }\n\n    const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n    const providedIn = injectableDef === null ? null : resolveForwardRef$1(injectableDef.providedIn);\n    const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n    overridesBucket.push(providerDef); // Keep overrides grouped by token as well for fast lookups using token\n\n    this.providerOverridesByToken.set(token, providerDef);\n\n    if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n      const existingOverrides = this.providerOverridesByModule.get(providedIn);\n\n      if (existingOverrides !== undefined) {\n        existingOverrides.push(providerDef);\n      } else {\n        this.providerOverridesByModule.set(providedIn, [providerDef]);\n      }\n    }\n  }\n\n  overrideTemplateUsingTestingModule(type, template) {\n    const def = type[ɵNG_COMP_DEF];\n\n    const hasStyleUrls = () => {\n      const metadata = this.resolvers.component.resolve(type);\n      return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n    };\n\n    const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls(); // In Ivy, compiling a component does not require knowing the module providing the\n    // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n    // overrideComponent. Important: overriding template requires full Component re-compilation,\n    // which may fail in case styleUrls are also present (thus Component is considered as required\n    // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n    // preserve current styles available on Component def and restore styles back once compilation\n    // is complete.\n\n    const override = overrideStyleUrls ? {\n      template,\n      styles: [],\n      styleUrls: []\n    } : {\n      template\n    };\n    this.overrideComponent(type, {\n      set: override\n    });\n\n    if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n      this.existingComponentStyles.set(type, def.styles);\n    } // Set the component's scope to be the testing module.\n\n\n    this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n  }\n\n  compileComponents() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.clearComponentResolutionQueue(); // Run compilers for all queued types.\n\n\n      let needsAsyncResources = _this.compileTypesSync(); // compileComponents() should not be async unless it needs to be.\n\n\n      if (needsAsyncResources) {\n        let resourceLoader;\n\n        let resolver = url => {\n          if (!resourceLoader) {\n            resourceLoader = _this.injector.get(ResourceLoader);\n          }\n\n          return Promise.resolve(resourceLoader.get(url));\n        };\n\n        yield resolveComponentResources(resolver);\n      }\n    })();\n  }\n\n  finalize() {\n    // One last compile\n    this.compileTypesSync(); // Create the testing module itself.\n\n    this.compileTestModule();\n    this.applyTransitiveScopes();\n    this.applyProviderOverrides(); // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n    // Components have `styleUrls` fields defined and template override was requested.\n\n    this.patchComponentsWithExistingStyles(); // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n    // every component.\n\n    this.componentToModuleScope.clear();\n    const parentInjector = this.platform.injector;\n    this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector); // ApplicationInitStatus.runInitializers() is marked @internal to core.\n    // Cast it to any before accessing it.\n\n    this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers(); // Set locale ID after running app initializers, since locale information might be updated while\n    // running initializers. This is also consistent with the execution order while bootstrapping an\n    // app (see `packages/core/src/application_ref.ts` file).\n\n    const localeId = this.testModuleRef.injector.get(LOCALE_ID$1, ɵDEFAULT_LOCALE_ID);\n    ɵsetLocaleId(localeId);\n    return this.testModuleRef;\n  }\n  /**\n   * @internal\n   */\n\n\n  _compileNgModuleSync(moduleType) {\n    this.queueTypesFromModulesArray([moduleType]);\n    this.compileTypesSync();\n    this.applyProviderOverrides();\n    this.applyProviderOverridesInScope(moduleType);\n    this.applyTransitiveScopes();\n  }\n  /**\n   * @internal\n   */\n\n\n  _compileNgModuleAsync(moduleType) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.queueTypesFromModulesArray([moduleType]);\n\n      yield _this2.compileComponents();\n\n      _this2.applyProviderOverrides();\n\n      _this2.applyProviderOverridesInScope(moduleType);\n\n      _this2.applyTransitiveScopes();\n    })();\n  }\n  /**\n   * @internal\n   */\n\n\n  _getModuleResolver() {\n    return this.resolvers.module;\n  }\n  /**\n   * @internal\n   */\n\n\n  _getComponentFactories(moduleType) {\n    return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n      const componentDef = declaration.ɵcmp;\n      componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n      return factories;\n    }, []);\n  }\n\n  compileTypesSync() {\n    // Compile all queued components, directives, pipes.\n    let needsAsyncResources = false;\n    this.pendingComponents.forEach(declaration => {\n      needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n      const metadata = this.resolvers.component.resolve(declaration);\n\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Component');\n      }\n\n      this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n      ɵcompileComponent(declaration, metadata);\n    });\n    this.pendingComponents.clear();\n    this.pendingDirectives.forEach(declaration => {\n      const metadata = this.resolvers.directive.resolve(declaration);\n\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Directive');\n      }\n\n      this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n      ɵcompileDirective(declaration, metadata);\n    });\n    this.pendingDirectives.clear();\n    this.pendingPipes.forEach(declaration => {\n      const metadata = this.resolvers.pipe.resolve(declaration);\n\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Pipe');\n      }\n\n      this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n      ɵcompilePipe(declaration, metadata);\n    });\n    this.pendingPipes.clear();\n    return needsAsyncResources;\n  }\n\n  applyTransitiveScopes() {\n    if (this.overriddenModules.size > 0) {\n      // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n      // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n      // collect all affected modules and reset scopes to force their re-calculation.\n      const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n      const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n\n      if (affectedModules.size > 0) {\n        affectedModules.forEach(moduleType => {\n          this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n          moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n        });\n      }\n    }\n\n    const moduleToScope = new Map();\n\n    const getScopeOfModule = moduleType => {\n      if (!moduleToScope.has(moduleType)) {\n        const isTestingModule = isTestingModuleOverride(moduleType);\n        const realType = isTestingModule ? this.testModuleType : moduleType;\n        moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n      }\n\n      return moduleToScope.get(moduleType);\n    };\n\n    this.componentToModuleScope.forEach((moduleType, componentType) => {\n      const moduleScope = getScopeOfModule(moduleType);\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs'); // `tView` that is stored on component def contains information about directives and pipes\n      // that are in the scope of this component. Patching component scope will cause `tView` to be\n      // changed. Store original `tView` before patching scope, so the `tView` (including scope\n      // information) is restored back to its previous/original state before running next test.\n\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n      ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n    });\n    this.componentToModuleScope.clear();\n  }\n\n  applyProviderOverrides() {\n    const maybeApplyOverrides = field => type => {\n      const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n      const metadata = resolver.resolve(type);\n\n      if (this.hasProviderOverrides(metadata.providers)) {\n        this.patchDefWithProviderOverrides(type, field);\n      }\n    };\n\n    this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n    this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n    this.seenComponents.clear();\n    this.seenDirectives.clear();\n  }\n  /**\n   * Applies provider overrides to a given type (either an NgModule or a standalone component)\n   * and all imported NgModules and standalone components recursively.\n   */\n\n\n  applyProviderOverridesInScope(type) {\n    const hasScope = isStandaloneComponent(type) || isNgModule(type); // The function can be re-entered recursively while inspecting dependencies\n    // of an NgModule or a standalone component. Exit early if we come across a\n    // type that can not have a scope (directive or pipe) or the type is already\n    // processed earlier.\n\n    if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {\n      return;\n    }\n\n    this.scopesWithOverriddenProviders.add(type); // NOTE: the line below triggers JIT compilation of the module injector,\n    // which also invokes verification of the NgModule semantics, which produces\n    // detailed error messages. The fact that the code relies on this line being\n    // present here is suspicious and should be refactored in a way that the line\n    // below can be moved (for ex. after an early exit check below).\n\n    const injectorDef = type[ɵNG_INJ_DEF]; // No provider overrides, exit early.\n\n    if (this.providerOverridesByToken.size === 0) return;\n\n    if (isStandaloneComponent(type)) {\n      // Visit all component dependencies and override providers there.\n      const def = getComponentDef(type);\n      const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n\n      for (const dependency of dependencies) {\n        this.applyProviderOverridesInScope(dependency);\n      }\n    } else {\n      const providers = [...injectorDef.providers, ...(this.providerOverridesByModule.get(type) || [])];\n\n      if (this.hasProviderOverrides(providers)) {\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, type);\n        this.storeFieldOfDefOnType(type, ɵNG_INJ_DEF, 'providers');\n        injectorDef.providers = this.getOverriddenProviders(providers);\n      } // Apply provider overrides to imported modules recursively\n\n\n      const moduleDef = type[ɵNG_MOD_DEF];\n      const imports = maybeUnwrapFn(moduleDef.imports);\n\n      for (const importedModule of imports) {\n        this.applyProviderOverridesInScope(importedModule);\n      } // Also override the providers on any ModuleWithProviders imports since those don't appear in\n      // the moduleDef.\n\n\n      for (const importedModule of flatten(injectorDef.imports)) {\n        if (isModuleWithProviders(importedModule)) {\n          this.defCleanupOps.push({\n            object: importedModule,\n            fieldName: 'providers',\n            originalValue: importedModule.providers\n          });\n          importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n        }\n      }\n    }\n  }\n\n  patchComponentsWithExistingStyles() {\n    this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n    this.existingComponentStyles.clear();\n  }\n\n  queueTypeArray(arr, moduleType) {\n    for (const value of arr) {\n      if (Array.isArray(value)) {\n        this.queueTypeArray(value, moduleType);\n      } else {\n        this.queueType(value, moduleType);\n      }\n    }\n  }\n\n  recompileNgModule(ngModule, metadata) {\n    // Cache the initial ngModuleDef as it will be overwritten.\n    this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n    this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n    ɵcompileNgModuleDefs(ngModule, metadata);\n  }\n\n  queueType(type, moduleType) {\n    const component = this.resolvers.component.resolve(type);\n\n    if (component) {\n      // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n      // missing. That might happen in case a class without any Angular decorators extends another\n      // class where Component/Directive/Pipe decorator is defined.\n      if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n        this.pendingComponents.add(type);\n      }\n\n      this.seenComponents.add(type); // Keep track of the module which declares this component, so later the component's scope\n      // can be set correctly. If the component has already been recorded here, then one of several\n      // cases is true:\n      // * the module containing the component was imported multiple times (common).\n      // * the component is declared in multiple modules (which is an error).\n      // * the component was in 'declarations' of the testing module, and also in an imported module\n      //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n      // * overrideTemplateUsingTestingModule was called for the component in which case the module\n      //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n      //\n      // If the component was previously in the testing module's 'declarations' (meaning the\n      // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n      // real module, which was imported. This pattern is understood to mean that the component\n      // should use its original scope, but that the testing module should also contain the\n      // component in its scope.\n      //\n      // Note: standalone components have no associated NgModule, so the `moduleType` can be `null`.\n\n      if (moduleType !== null && (!this.componentToModuleScope.has(type) || this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION)) {\n        this.componentToModuleScope.set(type, moduleType);\n      }\n\n      return;\n    }\n\n    const directive = this.resolvers.directive.resolve(type);\n\n    if (directive) {\n      if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n        this.pendingDirectives.add(type);\n      }\n\n      this.seenDirectives.add(type);\n      return;\n    }\n\n    const pipe = this.resolvers.pipe.resolve(type);\n\n    if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n      this.pendingPipes.add(type);\n      return;\n    }\n  }\n\n  queueTypesFromModulesArray(arr) {\n    // Because we may encounter the same NgModule while processing the imports and exports of an\n    // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n    // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n    const processedNgModuleDefs = new Set();\n\n    const queueTypesFromModulesArrayRecur = arr => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          queueTypesFromModulesArrayRecur(value);\n        } else if (hasNgModuleDef(value)) {\n          const def = value.ɵmod;\n\n          if (processedNgModuleDefs.has(def)) {\n            continue;\n          }\n\n          processedNgModuleDefs.add(def); // Look through declarations, imports, and exports, and queue\n          // everything found there.\n\n          this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n        } else if (isModuleWithProviders(value)) {\n          queueTypesFromModulesArrayRecur([value.ngModule]);\n        } else if (isStandaloneComponent(value)) {\n          this.queueType(value, null);\n          const def = getComponentDef(value);\n          const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n          dependencies.forEach(dependency => {\n            // Note: in AOT, the `dependencies` might also contain regular\n            // (NgModule-based) Component, Directive and Pipes, so we handle\n            // them separately and proceed with recursive process for standalone\n            // Components and NgModules only.\n            if (isStandaloneComponent(dependency) || hasNgModuleDef(dependency)) {\n              queueTypesFromModulesArrayRecur([dependency]);\n            } else {\n              this.queueType(dependency, null);\n            }\n          });\n        }\n      }\n    };\n\n    queueTypesFromModulesArrayRecur(arr);\n  } // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n  // that import (even transitively) an overridden one. For all affected modules we need to\n  // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n  // of this function is to collect all affected modules in a set for further processing. Example:\n  // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n  // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n  // invalidated with the override.\n\n\n  collectModulesAffectedByOverrides(arr) {\n    const seenModules = new Set();\n    const affectedModules = new Set();\n\n    const calcAffectedModulesRecur = (arr, path) => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          // If the value is an array, just flatten it (by invoking this function recursively),\n          // keeping \"path\" the same.\n          calcAffectedModulesRecur(value, path);\n        } else if (hasNgModuleDef(value)) {\n          if (seenModules.has(value)) {\n            // If we've seen this module before and it's included into \"affected modules\" list, mark\n            // the whole path that leads to that module as affected, but do not descend into its\n            // imports, since we already examined them before.\n            if (affectedModules.has(value)) {\n              path.forEach(item => affectedModules.add(item));\n            }\n\n            continue;\n          }\n\n          seenModules.add(value);\n\n          if (this.overriddenModules.has(value)) {\n            path.forEach(item => affectedModules.add(item));\n          } // Examine module imports recursively to look for overridden modules.\n\n\n          const moduleDef = value[ɵNG_MOD_DEF];\n          calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n        }\n      }\n    };\n\n    calcAffectedModulesRecur(arr, []);\n    return affectedModules;\n  }\n  /**\n   * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.\n   * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of\n   * an NgModule). If there is a def in a set already, don't override it, since\n   * an original one should be restored at the end of a test.\n   */\n\n\n  maybeStoreNgDef(prop, type) {\n    if (!this.initialNgDefs.has(type)) {\n      this.initialNgDefs.set(type, new Map());\n    }\n\n    const currentDefs = this.initialNgDefs.get(type);\n\n    if (!currentDefs.has(prop)) {\n      const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n      currentDefs.set(prop, currentDef);\n    }\n  }\n\n  storeFieldOfDefOnType(type, defField, fieldName) {\n    const def = type[defField];\n    const originalValue = def[fieldName];\n    this.defCleanupOps.push({\n      object: def,\n      fieldName,\n      originalValue\n    });\n  }\n  /**\n   * Clears current components resolution queue, but stores the state of the queue, so we can\n   * restore it later. Clearing the queue is required before we try to compile components (via\n   * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n   */\n\n\n  clearComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue === null) {\n      this.originalComponentResolutionQueue = new Map();\n    }\n\n    clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n  }\n  /*\n   * Restores component resolution queue to the previously saved state. This operation is performed\n   * as a part of restoring the state after completion of the current set of tests (that might\n   * potentially mutate the state).\n   */\n\n\n  restoreComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue !== null) {\n      restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n      this.originalComponentResolutionQueue = null;\n    }\n  }\n\n  restoreOriginalState() {\n    // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n    // case there were multiple overrides for the same field).\n    forEachRight(this.defCleanupOps, op => {\n      op.object[op.fieldName] = op.originalValue;\n    }); // Restore initial component/directive/pipe defs\n\n    this.initialNgDefs.forEach((defs, type) => {\n      defs.forEach((descriptor, prop) => {\n        if (!descriptor) {\n          // Delete operations are generally undesirable since they have performance\n          // implications on objects they were applied to. In this particular case, situations\n          // where this code is invoked should be quite rare to cause any noticeable impact,\n          // since it's applied only to some test cases (for example when class with no\n          // annotations extends some @Component) when we need to clear 'ɵcmp' field on a given\n          // class to restore its original state (before applying overrides and running tests).\n          delete type[prop];\n        } else {\n          Object.defineProperty(type, prop, descriptor);\n        }\n      });\n    });\n    this.initialNgDefs.clear();\n    this.scopesWithOverriddenProviders.clear();\n    this.restoreComponentResolutionQueue(); // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n\n    ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n  }\n\n  compileTestModule() {\n    class RootScopeModule {}\n\n    ɵcompileNgModuleDefs(RootScopeModule, {\n      providers: [...this.rootProviderOverrides]\n    });\n    const ngZone = new NgZone({\n      enableLongStackTrace: true\n    });\n    const providers = [{\n      provide: NgZone,\n      useValue: ngZone\n    }, {\n      provide: Compiler,\n      useFactory: () => new R3TestCompiler(this)\n    }, ...this.providers, ...this.providerOverrides];\n    const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []]; // clang-format off\n\n    ɵcompileNgModuleDefs(this.testModuleType, {\n      declarations: this.declarations,\n      imports,\n      schemas: this.schemas,\n      providers\n    },\n    /* allowDuplicateDeclarationsInRoot */\n    true); // clang-format on\n\n    this.applyProviderOverridesInScope(this.testModuleType);\n  }\n\n  get injector() {\n    if (this._injector !== null) {\n      return this._injector;\n    }\n\n    const providers = [];\n    const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n    compilerOptions.forEach(opts => {\n      if (opts.providers) {\n        providers.push(opts.providers);\n      }\n    });\n\n    if (this.compilerProviders !== null) {\n      providers.push(...this.compilerProviders);\n    } // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n\n\n    class CompilerModule {}\n\n    ɵcompileNgModuleDefs(CompilerModule, {\n      providers\n    });\n    const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n    this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n    return this._injector;\n  } // get overrides for a specific provider (if any)\n\n\n  getSingleProviderOverrides(provider) {\n    const token = getProviderToken(provider);\n    return this.providerOverridesByToken.get(token) || null;\n  }\n\n  getProviderOverrides(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return []; // There are two flattening operations here. The inner flatten() operates on the metadata's\n    // providers and applies a mapping function which retrieves overrides for each incoming\n    // provider. The outer flatten() then flattens the produced overrides array. If this is not\n    // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n    // providers array and contaminate any error messages that might be generated.\n\n    return flatten(flatten(providers, provider => this.getSingleProviderOverrides(provider) || []));\n  }\n\n  getOverriddenProviders(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    const flattenedProviders = flatten(providers);\n    const overrides = this.getProviderOverrides(flattenedProviders);\n    const overriddenProviders = [...flattenedProviders, ...overrides];\n    const final = [];\n    const seenOverriddenProviders = new Set(); // We iterate through the list of providers in reverse order to make sure provider overrides\n    // take precedence over the values defined in provider list. We also filter out all providers\n    // that have overrides, keeping overridden values only. This is needed, since presence of a\n    // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n\n    forEachRight(overriddenProviders, provider => {\n      const token = getProviderToken(provider);\n\n      if (this.providerOverridesByToken.has(token)) {\n        if (!seenOverriddenProviders.has(token)) {\n          seenOverriddenProviders.add(token); // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n          // make sure that provided override takes highest precedence and is not combined with\n          // other instances of the same multi provider.\n\n          final.unshift({ ...provider,\n            multi: false\n          });\n        }\n      } else {\n        final.unshift(provider);\n      }\n    });\n    return final;\n  }\n\n  hasProviderOverrides(providers) {\n    return this.getProviderOverrides(providers).length > 0;\n  }\n\n  patchDefWithProviderOverrides(declaration, field) {\n    const def = declaration[field];\n\n    if (def && def.providersResolver) {\n      this.maybeStoreNgDef(field, declaration);\n      const resolver = def.providersResolver;\n\n      const processProvidersFn = providers => this.getOverriddenProviders(providers);\n\n      this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n\n      def.providersResolver = ngDef => resolver(ngDef, processProvidersFn);\n    }\n  }\n\n}\n\nfunction initResolvers() {\n  return {\n    module: new NgModuleResolver(),\n    component: new ComponentResolver(),\n    directive: new DirectiveResolver(),\n    pipe: new PipeResolver()\n  };\n}\n\nfunction isStandaloneComponent(value) {\n  const def = getComponentDef(value);\n  return !!def?.standalone;\n}\n\nfunction getComponentDef(value) {\n  return value.ɵcmp ?? null;\n}\n\nfunction hasNgModuleDef(value) {\n  return value.hasOwnProperty('ɵmod');\n}\n\nfunction isNgModule(value) {\n  return hasNgModuleDef(value);\n}\n\nfunction maybeUnwrapFn(maybeFn) {\n  return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\n\nfunction flatten(values, mapFn) {\n  const out = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten(value, mapFn));\n    } else {\n      out.push(mapFn ? mapFn(value) : value);\n    }\n  });\n  return out;\n}\n\nfunction getProviderField(provider, field) {\n  return provider && typeof provider === 'object' && provider[field];\n}\n\nfunction getProviderToken(provider) {\n  return getProviderField(provider, 'provide') || provider;\n}\n\nfunction isModuleWithProviders(value) {\n  return value.hasOwnProperty('ngModule');\n}\n\nfunction forEachRight(values, fn) {\n  for (let idx = values.length - 1; idx >= 0; idx--) {\n    fn(values[idx], idx);\n  }\n}\n\nfunction invalidTypeError(name, expectedType) {\n  return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\n\nclass R3TestCompiler {\n  constructor(testBed) {\n    this.testBed = testBed;\n  }\n\n  compileModuleSync(moduleType) {\n    this.testBed._compileNgModuleSync(moduleType);\n\n    return new ɵNgModuleFactory(moduleType);\n  }\n\n  compileModuleAsync(moduleType) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.testBed._compileNgModuleAsync(moduleType);\n      return new ɵNgModuleFactory(moduleType);\n    })();\n  }\n\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n\n    const componentFactories = this.testBed._getComponentFactories(moduleType);\n\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  compileModuleAndAllComponentsAsync(moduleType) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const ngModuleFactory = yield _this4.compileModuleAsync(moduleType);\n\n      const componentFactories = _this4.testBed._getComponentFactories(moduleType);\n\n      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    })();\n  }\n\n  clearCache() {}\n\n  clearCacheFor(type) {}\n\n  getModuleId(moduleType) {\n    const meta = this.testBed._getModuleResolver().resolve(moduleType);\n\n    return meta && meta.id || undefined;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet _nextRootElementId = 0;\n/**\n * Returns a singleton of the `TestBed` class.\n *\n * @publicApi\n */\n\nfunction getTestBed() {\n  return TestBedImpl.INSTANCE;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\n\n\nclass TestBedImpl {\n  constructor() {\n    // Properties\n    this.platform = null;\n    this.ngModule = null;\n    this._compiler = null;\n    this._testModuleRef = null;\n    this._activeFixtures = [];\n    /**\n     * Internal-only flag to indicate whether a module\n     * scoping queue has been checked and flushed already.\n     * @nodoc\n     */\n\n    this.globalCompilationChecked = false;\n  }\n\n  static get INSTANCE() {\n    return TestBedImpl._INSTANCE = TestBedImpl._INSTANCE || new TestBedImpl();\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n\n\n  static initTestEnvironment(ngModule, platform, options) {\n    const testBed = TestBedImpl.INSTANCE;\n    testBed.initTestEnvironment(ngModule, platform, options);\n    return testBed;\n  }\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n\n\n  static resetTestEnvironment() {\n    TestBedImpl.INSTANCE.resetTestEnvironment();\n  }\n\n  static configureCompiler(config) {\n    return TestBedImpl.INSTANCE.configureCompiler(config);\n  }\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n\n\n  static configureTestingModule(moduleDef) {\n    return TestBedImpl.INSTANCE.configureTestingModule(moduleDef);\n  }\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n\n\n  static compileComponents() {\n    return TestBedImpl.INSTANCE.compileComponents();\n  }\n\n  static overrideModule(ngModule, override) {\n    return TestBedImpl.INSTANCE.overrideModule(ngModule, override);\n  }\n\n  static overrideComponent(component, override) {\n    return TestBedImpl.INSTANCE.overrideComponent(component, override);\n  }\n\n  static overrideDirective(directive, override) {\n    return TestBedImpl.INSTANCE.overrideDirective(directive, override);\n  }\n\n  static overridePipe(pipe, override) {\n    return TestBedImpl.INSTANCE.overridePipe(pipe, override);\n  }\n\n  static overrideTemplate(component, template) {\n    return TestBedImpl.INSTANCE.overrideTemplate(component, template);\n  }\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n\n\n  static overrideTemplateUsingTestingModule(component, template) {\n    return TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template);\n  }\n\n  static overrideProvider(token, provider) {\n    return TestBedImpl.INSTANCE.overrideProvider(token, provider);\n  }\n\n  static inject(token, notFoundValue, flags) {\n    return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n\n\n  static get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n    return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n  }\n\n  static createComponent(component) {\n    return TestBedImpl.INSTANCE.createComponent(component);\n  }\n\n  static resetTestingModule() {\n    return TestBedImpl.INSTANCE.resetTestingModule();\n  }\n\n  static execute(tokens, fn, context) {\n    return TestBedImpl.INSTANCE.execute(tokens, fn, context);\n  }\n\n  static get platform() {\n    return TestBedImpl.INSTANCE.platform;\n  }\n\n  static get ngModule() {\n    return TestBedImpl.INSTANCE.ngModule;\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n\n\n  initTestEnvironment(ngModule, platform, options) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n\n    TestBedImpl._environmentTeardownOptions = options?.teardown;\n    TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;\n    TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;\n    this.platform = platform;\n    this.ngModule = ngModule;\n    this._compiler = new TestBedCompiler(this.platform, this.ngModule); // TestBed does not have an API which can reliably detect the start of a test, and thus could be\n    // used to track the state of the NgModule registry and reset it correctly. Instead, when we\n    // know we're in a testing scenario, we disable the check for duplicate NgModule registration\n    // completely.\n\n    ɵsetAllowDuplicateNgModuleIdsForTest(true);\n  }\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n\n\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this._compiler = null;\n    this.platform = null;\n    this.ngModule = null;\n    TestBedImpl._environmentTeardownOptions = undefined;\n    ɵsetAllowDuplicateNgModuleIdsForTest(false);\n  }\n\n  resetTestingModule() {\n    this.checkGlobalCompilationFinished();\n    ɵresetCompiledComponents();\n\n    if (this._compiler !== null) {\n      this.compiler.restoreOriginalState();\n    }\n\n    this._compiler = new TestBedCompiler(this.platform, this.ngModule); // Restore the previous value of the \"error on unknown elements\" option\n\n    ɵsetUnknownElementStrictMode$1(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT); // Restore the previous value of the \"error on unknown properties\" option\n\n    ɵsetUnknownPropertyStrictMode$1(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT); // We have to chain a couple of try/finally blocks, because each step can\n    // throw errors and we don't want it to interrupt the next step and we also\n    // want an error to be thrown at the end.\n\n    try {\n      this.destroyActiveFixtures();\n    } finally {\n      try {\n        if (this.shouldTearDownTestingModule()) {\n          this.tearDownTestingModule();\n        }\n      } finally {\n        this._testModuleRef = null;\n        this._instanceTeardownOptions = undefined;\n        this._instanceErrorOnUnknownElementsOption = undefined;\n        this._instanceErrorOnUnknownPropertiesOption = undefined;\n      }\n    }\n\n    return this;\n  }\n\n  configureCompiler(config) {\n    if (config.useJit != null) {\n      throw new Error('the Render3 compiler JiT mode is not configurable !');\n    }\n\n    if (config.providers !== undefined) {\n      this.compiler.setCompilerProviders(config.providers);\n    }\n\n    return this;\n  }\n\n  configureTestingModule(moduleDef) {\n    this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module'); // Trigger module scoping queue flush before executing other TestBed operations in a test.\n    // This is needed for the first test invocation to ensure that globally declared modules have\n    // their components scoped properly. See the `checkGlobalCompilationFinished` function\n    // description for additional info.\n\n    this.checkGlobalCompilationFinished(); // Always re-assign the options, even if they're undefined.\n    // This ensures that we don't carry them between tests.\n\n    this._instanceTeardownOptions = moduleDef.teardown;\n    this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;\n    this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties; // Store the current value of the strict mode option,\n    // so we can restore it later\n\n    this._previousErrorOnUnknownElementsOption = ɵgetUnknownElementStrictMode$1();\n    ɵsetUnknownElementStrictMode$1(this.shouldThrowErrorOnUnknownElements());\n    this._previousErrorOnUnknownPropertiesOption = ɵgetUnknownPropertyStrictMode$1();\n    ɵsetUnknownPropertyStrictMode$1(this.shouldThrowErrorOnUnknownProperties());\n    this.compiler.configureTestingModule(moduleDef);\n    return this;\n  }\n\n  compileComponents() {\n    return this.compiler.compileComponents();\n  }\n\n  inject(token, notFoundValue, flags) {\n    if (token === TestBed) {\n      return this;\n    }\n\n    const UNDEFINED = {};\n    const result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n    return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) : result;\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n\n\n  get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n    return this.inject(token, notFoundValue, flags);\n  }\n\n  execute(tokens, fn, context) {\n    const params = tokens.map(t => this.inject(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule, override) {\n    this.assertNotInstantiated('overrideModule', 'override module metadata');\n    this.compiler.overrideModule(ngModule, override);\n    return this;\n  }\n\n  overrideComponent(component, override) {\n    this.assertNotInstantiated('overrideComponent', 'override component metadata');\n    this.compiler.overrideComponent(component, override);\n    return this;\n  }\n\n  overrideTemplateUsingTestingModule(component, template) {\n    this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n    this.compiler.overrideTemplateUsingTestingModule(component, template);\n    return this;\n  }\n\n  overrideDirective(directive, override) {\n    this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this.compiler.overrideDirective(directive, override);\n    return this;\n  }\n\n  overridePipe(pipe, override) {\n    this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this.compiler.overridePipe(pipe, override);\n    return this;\n  }\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n\n\n  overrideProvider(token, provider) {\n    this.assertNotInstantiated('overrideProvider', 'override provider');\n    this.compiler.overrideProvider(token, provider);\n    return this;\n  }\n\n  overrideTemplate(component, template) {\n    return this.overrideComponent(component, {\n      set: {\n        template,\n        templateUrl: null\n      }\n    });\n  }\n\n  createComponent(type) {\n    const testComponentRenderer = this.inject(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n    const componentDef = type.ɵcmp;\n\n    if (!componentDef) {\n      throw new Error(`It looks like '${ɵstringify(type)}' has not been compiled.`);\n    } // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n\n\n    const noNgZone = this.inject(ComponentFixtureNoNgZone, false); // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n\n    const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n    const ngZone = noNgZone ? null : this.inject(NgZone, null);\n    const componentFactory = new ɵRender3ComponentFactory(componentDef);\n\n    const initComponent = () => {\n      const componentRef = componentFactory.create(Injector$1.NULL, [], `#${rootElId}`, this.testModuleRef);\n      return new ComponentFixture(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n\n    this._activeFixtures.push(fixture);\n\n    return fixture;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n\n\n  get compiler() {\n    if (this._compiler === null) {\n      throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n    }\n\n    return this._compiler;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n\n\n  get testModuleRef() {\n    if (this._testModuleRef === null) {\n      this._testModuleRef = this.compiler.finalize();\n    }\n\n    return this._testModuleRef;\n  }\n\n  assertNotInstantiated(methodName, methodDescription) {\n    if (this._testModuleRef !== null) {\n      throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` + `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n  /**\n   * Check whether the module scoping queue should be flushed, and flush it if needed.\n   *\n   * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n   * in-progress module compilation. This creates a potential hazard - the very first time the\n   * TestBed is initialized (or if it's reset without being initialized), there may be pending\n   * compilations of modules declared in global scope. These compilations should be finished.\n   *\n   * To ensure that globally declared modules have their components scoped properly, this function\n   * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n   * to any other operations, the scoping queue is flushed.\n   */\n\n\n  checkGlobalCompilationFinished() {\n    // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n    // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n    if (!this.globalCompilationChecked && this._testModuleRef === null) {\n      ɵflushModuleScopingQueueAsMuchAsPossible();\n    }\n\n    this.globalCompilationChecked = true;\n  }\n\n  destroyActiveFixtures() {\n    let errorCount = 0;\n\n    this._activeFixtures.forEach(fixture => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        errorCount++;\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e\n        });\n      }\n    });\n\n    this._activeFixtures = [];\n\n    if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n      throw Error(`${errorCount} ${errorCount === 1 ? 'component' : 'components'} ` + `threw errors during cleanup`);\n    }\n  }\n\n  shouldRethrowTeardownErrors() {\n    const instanceOptions = this._instanceTeardownOptions;\n    const environmentOptions = TestBedImpl._environmentTeardownOptions; // If the new teardown behavior hasn't been configured, preserve the old behavior.\n\n    if (!instanceOptions && !environmentOptions) {\n      return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    } // Otherwise use the configured behavior or default to rethrowing.\n\n\n    return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ?? this.shouldTearDownTestingModule();\n  }\n\n  shouldThrowErrorOnUnknownElements() {\n    // Check if a configuration has been provided to throw when an unknown element is found\n    return this._instanceErrorOnUnknownElementsOption ?? TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;\n  }\n\n  shouldThrowErrorOnUnknownProperties() {\n    // Check if a configuration has been provided to throw when an unknown property is found\n    return this._instanceErrorOnUnknownPropertiesOption ?? TestBedImpl._environmentErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;\n  }\n\n  shouldTearDownTestingModule() {\n    return this._instanceTeardownOptions?.destroyAfterEach ?? TestBedImpl._environmentTeardownOptions?.destroyAfterEach ?? TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n  }\n\n  tearDownTestingModule() {\n    // If the module ref has already been destroyed, we won't be able to get a test renderer.\n    if (this._testModuleRef === null) {\n      return;\n    } // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n    // last step, but the injector will be destroyed as a part of the module ref destruction.\n\n\n    const testRenderer = this.inject(TestComponentRenderer);\n\n    try {\n      this._testModuleRef.destroy();\n    } catch (e) {\n      if (this.shouldRethrowTeardownErrors()) {\n        throw e;\n      } else {\n        console.error('Error during cleanup of a testing module', {\n          component: this._testModuleRef.instance,\n          stacktrace: e\n        });\n      }\n    } finally {\n      testRenderer.removeAllRootElements?.();\n    }\n  }\n\n}\n\nTestBedImpl._INSTANCE = null;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @publicApi\n */\n\nconst TestBed = TestBedImpl;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`. Note: this function\n * (imported from the `@angular/core/testing` package) can **only** be used to inject dependencies\n * in tests. To inject dependencies in your application code, use the [`inject`](api/core/inject)\n * function from the `@angular/core` package instead.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * @publicApi\n */\n\nfunction inject(tokens, fn) {\n  const testBed = TestBedImpl.INSTANCE; // Not using an arrow function to preserve context passed from call site\n\n  return function () {\n    return testBed.execute(tokens, fn, this);\n  };\n}\n/**\n * @publicApi\n */\n\n\nclass InjectSetupWrapper {\n  constructor(_moduleDef) {\n    this._moduleDef = _moduleDef;\n  }\n\n  _addModule() {\n    const moduleDef = this._moduleDef();\n\n    if (moduleDef) {\n      TestBedImpl.configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens, fn) {\n    const self = this; // Not using an arrow function to preserve context passed from call site\n\n    return function () {\n      self._addModule();\n\n      return inject(tokens, fn).call(this);\n    };\n  }\n\n}\n\nfunction withModule(moduleDef, fn) {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      const testBed = TestBedImpl.INSTANCE;\n\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n\n      return fn.apply(this);\n    };\n  }\n\n  return new InjectSetupWrapper(() => moduleDef);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst _global = typeof window === 'undefined' ? global : window; // Reset the test providers and the fake async zone before each test.\n\n\nif (_global.beforeEach) {\n  _global.beforeEach(getCleanupHook(false));\n} // We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\n\n\nif (_global.afterEach) {\n  _global.afterEach(getCleanupHook(true));\n}\n\nfunction getCleanupHook(expectedTeardownValue) {\n  return () => {\n    const testBed = TestBedImpl.INSTANCE;\n\n    if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n      testBed.resetTestingModule();\n      resetFakeAsyncZone();\n    }\n  };\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\n\n\nconst __core_private_testing_placeholder__ = '';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };","map":{"version":3,"names":["getDebugNode","getDebugNode$1","RendererFactory2","RendererFactory2$1","InjectionToken","InjectionToken$1","ɵstringify","ɵReflectionCapabilities","Directive","Component","Pipe","NgModule","ɵgetInjectableDef","resolveForwardRef","resolveForwardRef$1","ɵNG_COMP_DEF","ɵRender3NgModuleRef","ApplicationInitStatus","LOCALE_ID","LOCALE_ID$1","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","ɵRender3ComponentFactory","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","ɵNG_MOD_DEF","ɵtransitiveScopesFor","ɵpatchComponentDefWithScope","ɵNG_INJ_DEF","ɵcompileNgModuleDefs","NgZone","Compiler","COMPILER_OPTIONS","ɵNgModuleFactory","ModuleWithComponentFactories","Injector","Injector$1","InjectFlags","InjectFlags$1","ɵsetAllowDuplicateNgModuleIdsForTest","ɵresetCompiledComponents","ɵsetUnknownElementStrictMode","ɵsetUnknownElementStrictMode$1","ɵsetUnknownPropertyStrictMode","ɵsetUnknownPropertyStrictMode$1","ɵgetUnknownElementStrictMode","ɵgetUnknownElementStrictMode$1","ɵgetUnknownPropertyStrictMode","ɵgetUnknownPropertyStrictMode$1","ɵflushModuleScopingQueueAsMuchAsPossible","ResourceLoader","Subject","Subscription","waitForAsync","fn","_Zone","Zone","Promise","reject","asyncTest","__symbol__","async","ComponentFixture","constructor","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","error","_tick","checkNoChanges","run","autoDetectChanges","autoDetect","Error","isStable","whenStable","resolve","res","_getRenderer","_renderer","undefined","injector","get","whenRenderingDone","renderer","destroy","unsubscribe","current","fakeAsyncTestModule","fakeAsyncTestModuleNotLoadedErrorMessage","resetFakeAsyncZone","fakeAsync","tick","millis","tickOptions","processNewMacroTasksSynchronously","flush","maxTurns","discardPeriodicTasks","flushMicrotasks","TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT","THROW_ON_UNKNOWN_ELEMENTS_DEFAULT","THROW_ON_UNKNOWN_PROPERTIES_DEFAULT","TestComponentRenderer","insertRootElement","rootElementId","removeAllRootElements","ComponentFixtureAutoDetect","ComponentFixtureNoNgZone","resolveComponentResources","resourceResolver","componentResolved","urlMap","Map","cachedResourceResolve","url","promise","resp","set","then","unwrapResponse","componentResourceResolutionQueue","forEach","component","type","promises","templateUrl","push","template","styleUrls","styles","styleOffset","length","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","clearResolutionOfComponentResourcesQueue","componentDefPendingResolution","Set","maybeQueueResolutionOfComponentResources","metadata","componentNeedsResolution","add","isComponentDefPendingResolution","has","hasOwnProperty","old","restoreComponentResolutionQueue","queue","clear","_","isComponentResourceResolutionQueueEmpty","size","response","text","delete","_global$1","globalThis","global","window","self","WorkerGlobalScope","FactoryTarget","R3TemplateDependencyKind","ViewEncapsulation$1","ViewEncapsulation","getCompilerFacade","request","globalNg","ɵcompilerFacade","ngDevMode","console","kind","message","name","usage","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","stringify","token","Array","isArray","map","join","overriddenName","toString","newLineIndex","substring","concatStringsWithSpace","before","after","__forward_ref__","forwardRef","forwardRefFn","isForwardRef","ɵɵdefineInjectable","opts","providedIn","factory","value","defineInjectable","ɵɵdefineInjector","options","providers","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","isInjectable","field","getInheritedInjectableDef","def","typeName","getTypeName","warn","match","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","ERROR_DETAILS_PAGE_BASE_URL","RuntimeError","code","formatRuntimeError","fullCode","Math","abs","errorMessage","trim","addPeriodSeparator","separator","Type","Function","isType","v","assertNumber","actual","msg","throwError","assertNumberInRange","minInclusive","maxInclusive","assertLessThanOrEqual","assertGreaterThanOrEqual","assertString","assertFunction","assertEqual","expected","assertNotEqual","assertSame","assertNotSame","assertLessThan","assertGreaterThan","assertNotDefined","assertDefined","comparison","assertDomNode","node","Node","assertIndexInRange","arr","maxLen","assertOneOf","validValues","JSON","addAllToArray","items","i","arrayEquals","a","b","identityAccessor","valueA","valueB","flatten$1","list","dst","item","slice","deepForEach","input","addToArray","removeFromArray","pop","newArray","arraySplice","array","count","arrayInsert","end","previousEnd","arrayInsert2","value1","value2","arrayInsertSorted","arrayIndexOfSorted","arrayRemoveSorted","_arrayIndexOfSorted","keyValueArraySet","keyValueArray","keyValueArrayIndexOf","keyValueArrayGet","keyValueArrayDelete","shift","start","middle","noSideEffects","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","call","annotationInstance","TypeDecorator","cls","annotations","Object","defineProperty","prototype","create","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","meta","unshift","ES5_DELEGATE_CTOR","ES2015_INHERITED_CLASS","ES2015_INHERITED_CLASS_WITH_CTOR","ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR","isDelegateCtor","typeStr","test","ReflectionCapabilities","reflect","_reflect","t","_zipTypesAndAnnotations","paramTypes","paramAnnotations","result","concat","_ownParameters","parentCtor","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","keys","prop","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","getPrototypeOf","ngDevModeResetPerfCounters","locationString","newCounters","namedConstructors","firstCreatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererAppendChild","rendererInsertBefore","rendererCreateComment","allowNgDevModeTrue","initNgDevMode","renderStringify","String","stringifyForError","throwCyclicDependencyError","path","depPath","throwMixedMultiProviderError","throwInvalidProviderError","ngModuleType","provider","providerDetail","ɵproviders","throwProviderNotFoundError","injectorName","injectorDetails","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","Optional","assertInjectImplementationNotEqual","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","_currentInjector","setCurrentInjector","former","injectInjectorOnly","Default","ɵɵinject","ɵɵinvalidFactoryDep","inject$1","optional","host","skipSelf","injectArgs","types","arg","j","flag","getInjectFlag","attachInjectFlag","decorator","catchInjectorError","e","injectorErrorName","tokenPath","formatError","obj","charAt","context","parts","replace","Inject","Self","SkipSelf","Host","ChangeDetectionStrategy","ChangeDetectorStatus","isDefaultChangeDetectionStrategy","changeDetectionStrategy","EMPTY_OBJ","EMPTY_ARRAY","freeze","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","componentDefCount","ɵɵdefineComponent","componentDefinition","standalone","declaredInputs","providersResolver","decls","vars","consts","ngContentSelectors","hostBindings","hostVars","hostAttrs","contentQueries","inputs","outputs","exportAs","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","dependencies","getStandaloneInjector","selectors","viewQuery","features","data","encapsulation","Emulated","id","setInput","schemas","feature","invertObject","extractDirectiveDef","filter","nonNull","getPipeDef$1","ɵɵsetComponentScope","directives","pipes","getComponentDef$1","getDirectiveDef","ɵɵdefineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","ngModuleDef","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","ɵɵdefinePipe","pipeDef","pure","onDestroy","ngOnDestroy","isStandalone","throwNotFound","HOST","TVIEW","FLAGS","PARENT","NEXT","TRANSPLANTED_VIEWS_TO_REFRESH","T_HOST","CLEANUP","CONTEXT","INJECTOR$1","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","HEADER_OFFSET","TViewTypeAsString","unusedValueExportToPlacateAjd$8","TYPE","HAS_TRANSPLANTED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","unusedValueExportToPlacateAjd$7","isLView","isLContainer","isContentQueryHost","isComponentHost","isDirectiveHost","isComponentDef","isRootView","assertTNodeForLView","lView","assertTNodeForTView","assertTNode","tView_","assertTIcu","tIcu","currentCaseLViewIndex","assertComponentType","assertNgModuleType","assertCurrentTNodeIsParent","isParent","assertHasParent","parent","assertDataNext","assertLContainer","assertLViewOrUndefined","assertLView","assertFirstCreatePass","errMessage","assertFirstUpdatePass","firstUpdatePass","assertDirectiveDef","assertIndexInDeclRange","assertBetween","bindingStartIndex","assertIndexInVarsRange","expandoStartIndex","assertIndexInExpandoRange","lower","upper","assertProjectionSlots","projection","assertParentView","assertNodeInjector","injectorIndex","getFactoryDef","hasFactoryDef","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","definition","ngOnChanges","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","ngInherit","simpleChangesStore","getSimpleChangesStore","privateName","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","store","profilerCallback","setProfiler","profiler","event","hookOrListener","SVG_NAMESPACE","SVG_NAMESPACE_URI","MATH_ML_NAMESPACE","MATH_ML_NAMESPACE_URI","getNamespaceUri","namespace","toLowerCase","unwrapRNode","unwrapLView","unwrapLContainer","getNativeByIndex","getNativeByTNode","getNativeByTNodeOrNull","getTNode","load","view","getComponentLViewByIndex","nodeIndex","hostView","slotValue","isCreationMode","viewAttachedToChangeDetector","viewAttachedToContainer","getConstant","resetPreOrderHookFlags","updateTransplantedViewCount","lContainer","amount","viewOrContainer","instructionState","lFrame","createLFrame","bindingsEnabled","_isInCheckNoChangesMode","specOnlyIsInstructionStateEmpty","getElementDepthCount","elementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","ɵɵenableBindings","ɵɵdisableBindings","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","ɵɵresetView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","setCurrentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","setCurrentTNodeAsParent","getContextLView","isInCheckNoChangesMode","setIsInCheckNoChangesMode","mode","getBindingRoot","bindingRootIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","isInI18nBlock","inI18n","setInI18nBlock","setBindingRootForHostBindings","currentDirectiveIndex","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","tData","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","parentTNode","parentLView","allocLFrame","enterView","newView","newLFrame","selectedIndex","currentNamespace","firstChild","currentLFrame","childLFrame","child","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","walkUpViews","nestingLevel","currentView","getSelectedIndex","setSelectedIndex","getSelectedTNode","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","getNamespace$1","registerPreOrderHooks","directiveIndex","directiveDef","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","directiveStart","directiveEnd","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","hooks","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","currentNodeIndex","startIndex","nodeIndexLimit","max","lastNodeIndexFound","hook","isInitHook","callHook","directive","indexWithintInitPhase","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","isFactory","unusedValueExportToPlacateAjd$6","toTNodeTypeAsString","tNodeType","unusedValueExportToPlacateAjd$5","hasClassInput","hasStyleInput","assertTNodeType","expectedTypes","assertPureTNodeType","setUpAttributes","native","attrs","namespaceURI","attrName","attrVal","setAttribute","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","mergeHostAttrs","src","srcMarker","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","hasParentInjector","parentLocation","getParentInjectorIndex","parentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","NOT_FOUND","bloomAdd","bloomHash","mask","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentData","footer","declarationViewOffset","lViewCursor","getTNodeFromLView","diPublicInInjector","injectAttributeImpl","attrNameToInject","classes","attrsLength","notFoundValueOrThrow","lookupTokenUsingModuleInjector","moduleInjector","previousInjectImplementation","getOrCreateInjectable","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","previousIncludeViewProviders","success","tokenId","createNodeInjector","injectorView","isFirstHostTNode","NodeInjector","_tNode","_lView","ɵɵgetInheritedFactory","ownConstructor","ownFactory","getFactoryOf","objectPrototype","currentLView","nodeInjectorValue","embeddedViewInjector","embeddedViewInjectorValue","tViewType","ɵɵinjectAttribute","Attribute","attributeName","getReflect","reflectDependencies","convertDependencies","deps","dep","reflectDependency","attribute","param","proto","modules","checkForDuplicateNgModules","assertSameOrNotExisting","incoming","registerNgModuleType","existing","clearModulesForTest","getRegisteredNgModuleType","setAllowDuplicateNgModuleIdsForTest","allowDuplicates","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","body","INTERPOLATION_DELIMITER","maybeUnwrapFn$1","DOCUMENT","setDocument","document","getDocument","policy$1","getPolicy$1","trustedTypes","createPolicy","createHTML","s","createScript","createScriptURL","trustedHTMLFromString","html","trustedScriptFromString","script","trustedScriptURLFromString","newTrustedFunctionForDev","fnArgs","fnBody","bind","policy","getPolicy","trustedHTMLFromStringBypass","trustedScriptFromStringBypass","trustedScriptURLFromStringBypass","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","getInertBodyHelper","defaultDoc","inertDocumentHelper","InertDocumentHelper","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","DOMParser","parseFromString","removeChild","inertDocument","implementation","createHTMLDocument","inertHtml","createElement","appendChild","inertBodyElement","templateEl","innerHTML","inertBody","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","attrib","removeAttribute","childNode","nodeType","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","_sanitizeUrl","tagSet","tags","split","merge","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","parentNode","tagName","nodeName","elAttr","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","isTemplateElement","content","SecurityContext","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵtrustConstantHtml","raw","ɵɵtrustConstantResourceUrl","getUrlSanitizer","tag","ɵɵsanitizeUrlOrResourceUrl","validateAgainstEventProperties","startsWith","validateAgainstEventAttributes","_desc","multi","ENVIRONMENT_INITIALIZER","INJECTOR","INJECTOR_DEF_TYPES","NullInjector","importProvidersFrom","sources","internalImportProvidersFrom","checkForStandaloneCmp","providersOut","dedup","injectorTypesWithProviders","cmpDef","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","ngModule","validateProvider","container","parents","defType","injDef","defName","isDuplicate","importTypesWithProviders","imported","provide","useFactory","useValue","defProviders","injectorType","containerType","isTypeProvider","isValueProvider","isFactoryProvider","isExistingProvider","classRef","useClass","USE_VALUE$1","useExisting","isClassProvider","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR$1","getNullInjector","EnvironmentInjector","R3Injector","scopes","records","_ngOnDestroyHooks","_onDestroyHooks","_destroyed","forEachSingleProvider","processProvider","makeRecord","record","injectorDefTypes","destroyed","assertNotDestroyed","service","callback","runInContext","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","resolveInjectorInitializers","initializers","initializer","tokens","providerToRecord","multiRecord","hasOnDestroy","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","providerToFactory","isImportedNgModuleProviders","unwrappedProvider","hasDeps","ComponentRef$1","ComponentFactory$1","noComponentFactoryError","ERROR_COMPONENT","getComponent$1","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","NULL","injectElementRef","createElementRef","ElementRef","unwrapElementRef","Renderer2Interceptor","Renderer2","injectRenderer2","nodeAtIndex","Sanitizer","Version","full","major","minor","patch","VERSION","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","shouldThrowErrorOnUnknownElement","shouldThrow","shouldThrowErrorOnUnknownProperty","validateElementIsKnown","hasDirectives","isUnknown","HTMLUnknownElement","customElements","matchingSchemas","isHostStandalone","isHostComponentStandalone","templateLocation","getTemplateLocationDetails","isPropertyValid","handleUnknownPropertyError","importLocation","KNOWN_CONTROL_FLOW_DIRECTIVES","correspondingImport","reportUnknownPropertyError","getDeclarationComponentDef","declarationLView","componentDef","hostComponentDef","componentClassName","schema","ERROR_ORIGINAL_ERROR","wrappedError","originalError","getOriginalError","ErrorHandler","_console","handleError","_findOriginalError","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","normalizeDebugBindingName","camelCaseToDashCase","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","TRACKED_LVIEWS","uniqueIdCounter","getUniqueLViewId","registerLView","getLViewById","unregisterLView","LContext","lViewId","getLContext","mpValue","readPatchedData","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","createLContext","attachPatchData","rElement","parentContext","getComponentViewByInstance","patchedData","MONKEY_PATCH_KEY_NAME","readPatchedLView","traverseNextElement","componentIndices","components","elementComponentIndex","componentView","rootComponentView","rootComponent","directiveInstance","directiveIndexStart","directiveIndexEnd","includeComponents","directiveStartIndex","directiveEndIndex","getComponentAtNodeIndex","discoverLocalRefs","localNames","localIndex","assertStandaloneComponentType","assertComponentDef","throwMultipleComponentError","first","second","throwErrorIfNoChangesMode","creationMode","currValue","constructDetailsForInterpolation","rootIndex","expressionIndex","changedValue","prefix","chunks","newValue","slotIdx","getExpressionChangedErrorDetails","idx","matches","RegExp","RendererStyleFlags2","_icuContainerIterate","icuContainerIterate","tIcuContainerNode","ensureIcuContainerVisitorLoaded","loader","unusedValueExportToPlacateAjd$4","unusedValueExportToPlacateAjd$3","getLViewParent","getRootView","componentOrLView","getRootContext","viewOrComponent","rootView","getFirstLContainer","getNearestLContainer","getNextLContainer","unusedValueToPlacateAjd$2","applyToElementOrContainer","action","lNodeToHandle","beforeNode","isComponent","rNode","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","destroyNode","applyContainer","createTextNode","createText","updateTextNode","setValue","createCommentNode","createComment","createElementNode","removeViewFromContainer","applyView","addViewToContainer","parentNativeNode","renderDetachView","destroyViewTree","lViewOrLContainer","cleanUpView","firstView","insertView","indexInContainer","containerLength","declarationLContainer","trackMovedView","lQueries","declarationContainer","movedViews","insertedLContainer","insertedComponentLView","declaredComponentLView","detachMovedView","declarationViewIndex","insertionLContainer","detachView","removeIndex","viewToDetach","removedLView","destroyLView","executeOnDestroys","processCleanups","tCleanup","cleanup","lCleanup","lastLCleanupIndex","idxOrTargetGetter","listener","useCaptureOrSubIdx","removeEventListener","instanceCleanupFn","toCall","callContext","getParentRElement","getClosestRElement","None","isMove","insertBefore","nativeAppendOrInsertBefore","nativeRemoveChild","isHostElement","isTemplateNode","nativeParentNode","nativeNextSibling","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","setI18nHandling","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","nextRNode","projectionNodes","getProjectionNodes","componentHost","viewIndexInContainer","nextViewIndex","firstTNodeOfView","nativeParent","applyNodes","parentRElement","isProjection","rawSlotValue","applyProjectionRecursive","projectionNext","applyProjection","tProjectionNode","componentLView","componentNode","nodeToProjectOrRNodes","nodeToProject","projectedComponentLView","anchor","applyStyling","isClassBased","removeClass","addClass","DashCase","removeStyle","isImportant","endsWith","Important","setStyle","writeDirectStyle","writeDirectClass","classIndexOf","className","classToSearch","foundIndex","unusedValueToPlacateAjd$1","NG_TEMPLATE_SELECTOR","isCssClassMatching","cssClassToMatch","isProjectionMode","isInlineTemplate","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","selector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","nodeAttr","attr","isSelectorInSelectorList","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","currentChunk","valueOrMarker","attrValue","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","NO_CHANGE","__brand__","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","hooksInitPhaseCompleted","angularCoreDiEnv","compileInjectable","ngFactoryDef","compiler","getInjectableMetadata","compileFactory","typeArgumentCount","Injectable","configurable","USE_VALUE","isUseClassProvider","isUseValueProvider","isUseFactoryProvider","isUseExistingProvider","srcMeta","compilerMeta","createInjector","additionalProviders","createInjectorWithoutInjectorInstances","findFirstClosedCycle","constructResolvingPath","reversed","reverse","tokenStrs","k","injectionError","constructResolvingMessage","errMsg","addKey","injectors","noProviderError","cyclicDependencyError","instantiationError","originalException","originalStack","invalidProviderError","noAnnotationError","params","signature","ii","parameter","outOfBoundsError","mixingMultiProvidersWithRegularProvidersError","provider1","provider2","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","multiProvider","resolvedFactory","ResolvedReflectiveFactory","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","resolveReflectiveProvider","resolveReflectiveProviders","normalized","_normalizeProviders","resolved","resolvedProviderMap","mergeResolvedReflectiveProviders","from","normalizedProvidersMap","resolvedProvider","_extractToken","some","p","_createDependency","paramMetadata","UNDEFINED","ReflectiveInjector","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_parent","_constructionCounter","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","_new","_getMaxNumberOfObjects","_instantiate","_getByReflectiveDependency","stack","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","inj_","_mapProviders","ɵɵdirectiveInject","ɵɵinvalidFactory","createNamedArrayType","toTStylingRange","prev","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrev","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","getTStylingRangeTail","attachDebugObject","debug","enumerable","attachDebugGetter","debugGetter","LVIEW_COMPONENT_CACHE","LVIEW_EMBEDDED_CACHE","LVIEW_ROOT","LVIEW_COMPONENT","LVIEW_EMBEDDED","cloneToLViewFromTViewBlueprint","debugTView","getLViewToClone","LRootView","LComponentView","LEmbeddedView","componentArray","nameSuffix","embeddedArray","lastIndexOf","TViewConstructor","TView","queries","hostBindingOpCodes","staticViewQueries","staticContentQueries","directiveRegistry","pipeRegistry","incompleteFirstPass","_decls","_vars","template_","processTNodeChildren","type_","TNode","insertBeforeIndex","directiveStylingLast","propertyBindings","mergedAttrs","initialInputs","tViews","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","debugNodeInjectorPath","buildDebugNode","flags_","styleBindings_","toDebugStyleBinding","classBindings_","providerIndexStart_","providerIndexEnd_","TNodeDebug","bindings","range","isTemplate","cursor","itemKey","itemRange","prevDuplicate","nextDuplicate","nextIndex","prevIndex","TViewData","TVIEWDATA_EMPTY","cloneToTViewData","LViewBlueprint","MatchesArray","TViewComponents","TNodeLocalNames","TNodeInitialInputs","LCleanup","TCleanup","attachLViewDebug","LViewDebug","attachLContainerDebug","LContainerDebug","toDebug","toHtml","includeChildren","textContent","COMMENT_NODE","_raw_lView","__raw__flags__","initPhaseState","firstViewPass","checkAlways","dirty","attached","isRoot","indexWithinInitPhase","hostHTML","nodes","mapToHTML","toDebugNodes","rendererFactory","childHead","childTail","declarationView","tHost","toLViewRange","expando","childViews","children","l","debugNodes","tNodeCursor","rawValue","factories","instances","buildNodeInjectorDebug","injectorResolutionPath","viewProviders","nodeInjectorDebug","bloom","toBloom","cumulativeBloom","binary","_raw_lContainer","hasTransplantedViews","views","processHostBindingOpCodes","opCode","directiveIdx","bindingRootIndx","hostBindingFn","refreshContentQueries","queryStartIdx","directiveDefIdx","refreshChildComponents","hostLView","refreshComponent","renderChildComponents","renderComponent","createLView","tHostNode","getOrCreateTNode","createTNodeAtIndex","createTNode","allocExpando","numSlotsToAlloc","initialValue","allocIdx","renderView","executeViewQueryFn","templateFn","executeTemplate","refreshView","isInCheckNoChangesPass","markTransplantedViewsForRefresh","refreshEmbeddedViews","rf","prevSelectedIndex","isUpdatePhase","preHookType","postHookType","executeContentQueries","createDirectivesInstances","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","getOrCreateComponentTView","createTView","constsOrFactory","initialViewLength","createViewBlueprint","fill","seal","createError","locateHostElement","elementOrSelector","preserveContent","ShadowDom","selectRootElement","storeCleanupWithContext","cleanupFn","getOrCreateLViewCleanup","getOrCreateTViewCleanup","tParent","generatePropertyAliases","inputAliasMap","propStore","internalName","initializeInputAndOutputAliases","tViewData","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","directiveInputs","generateInitialInputs","mapPropName","elementPropertyInternal","nativeOnly","inputData","dataValue","setInputsForProperty","markDirtyIfOnPush","setNgReflectProperties","viewIndex","childComponentLView","setNgReflectProperty","debugValue","instantiateRootComponent","rootTNode","configureViewWithDirective","resolveDirectives","localRefs","findDirectiveDefMatches","exportsMap","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","saveNameToExportMap","lifeCycleHooks","cacheMatchingLocalNames","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","lastSelectedElementIdx","addComponentLogic","setInputsFromAttrs","elementIndex","dirIndex","invokeHostBindingsInCreationMode","registry","markAsComponentHost","hostTNode","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","createRenderer","elementAttributeInternal","setElementAttribute","strValue","initialInputData","inputsToStore","LContainerArray","LContainer","createLContainer","hostNative","embeddedLView","embeddedTView","movedLView","componentHostIdx","refreshContainsDirtyView","componentTView","syncViewWithBlueprint","markViewDirty","detectChangesInternal","notifyErrorHandler","begin","checkNoChangesInternal","viewQueryFn","storePropertyBindingMetadata","propertyName","interpolationParts","propBindingIdxs","bindingMetadata","loadComponentRenderer","currentDef","errorHandler","textBindingInternal","computeStaticStyling","writeToHost","styleValue","collectNativeNodes","lNode","lViewInAContainer","lViewFirstChildTNode","nodesInSlot","ViewRef","_cdRefInjectingView","_appRef","_attachedToViewContainer","rootNodes","viewRefs","markForCheck","detach","reattach","attachToViewContainerRef","detachFromAppRef","attachToAppRef","appRef","RootViewRef","_view","ComponentFactoryResolver","ComponentFactory","toRefArray","nonMinified","minified","templateName","getNamespace","elementName","ChainedInjector","parentInjector","componentType","isBoundToModule","projectableNodes","rootSelectorOrNode","environmentInjector","realEnvironmentInjector","rootViewInjector","hostRenderer","hostRNode","rootFlags","rootTView","rootLView","tElementNode","createRootComponentView","nodesforSlot","createRootComponent","LifecycleHooksFeature","ComponentRef","componentFactoryResolver","injectComponentFactoryResolver","_rootLView","cmpNameForError","NULL_INJECTOR","viewRenderer","hostFeatures","getSuperType","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","animation","defData","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","ɵɵCopyDefinitionFeature","defAny","_symbolIterator","getSymbolIterator","Symbol","iterator","getOwnPropertyNames","isIterable","isListLikeIterable","isJsObject","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","o","devModeEqual","isListLikeIterableA","isListLikeIterableB","isAObject","isBObject","is","updateBinding","getBinding","bindingUpdated","oldValueToCompare","details","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵattribute","interpolationV","isBindingUpdated","interpolation1","v0","suffix","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","ɵɵattributeInterpolate1","interpolatedValue","ɵɵattributeInterpolate2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","interpolationInBetween","templateFirstCreatePass","attrsIndex","localRefsIndex","tViewConsts","ɵɵtemplate","adjustedIndex","comment","ɵɵreference","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","property","elementStartFirstCreatePass","elementStart","ɵɵelementStart","ɵɵelementEnd","elementEnd","ɵɵelement","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵelementContainer","ɵɵgetCurrentView","isPromise","isSubscribable","isObservable","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵsyntheticHostListener","findExistingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","isTNodeDirectiveHost","processOutputs","lCleanupIndex","existingListener","lastListenerFn","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","propsLength","minifiedName","output","subscription","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ɵɵprojectionDef","numProjectionSlots","projectionHeads","tails","componentChild","slotIndex","ɵɵprojection","selectorIndex","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","__unused_const_as_closure_does_not_like_standalone_comment_blocks__","insertTStylingBinding","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","hasTemplateBindings","previousNode","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","getLastParsedKey","getLastParsedValue","parseClassName","resetParserState","parseClassNameNext","consumeWhitespace","consumeClassToken","parseStyle","parseStyleNext","consumeStyleKey","consumeSeparator","consumeStyleValue","ch","malformedStyleError","fromCharCode","ch1","ch2","ch3","lastChIndex","consumeQuotedText","quoteCharCode","expecting","ɵɵstyleProp","checkStylingProperty","ɵɵclassProp","ɵɵstyleMap","checkStylingMap","styleKeyValueArraySet","styleStringParser","ɵɵclassMap","classStringParser","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","updateStylingMap","toStylingKeyValueArray","isHostBindings","wrapInStaticStylingKey","stylingKey","hostDirectiveDef","isFirstStylingInstructionInTemplate","collectStylingFromDirectives","collectStylingFromTAttrs","isFirstStylingInstructionInHostBinding","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","currentDirective","desiredMarker","currentMarker","styleKeyValueArray","unwrappedValue","oldKeyValueArray","newKeyValueArray","oldIndex","newIndex","oldKey","setKey","tRange","higherPriorityValue","findStylingValue","isStylingValuePresent","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","ɵɵtext","textNative","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵclassMapInterpolate1","ɵɵclassMapInterpolate2","ɵɵclassMapInterpolate3","ɵɵclassMapInterpolate4","ɵɵclassMapInterpolate5","ɵɵclassMapInterpolate6","ɵɵclassMapInterpolate7","ɵɵclassMapInterpolate8","ɵɵclassMapInterpolateV","ɵɵstyleMapInterpolate1","ɵɵstyleMapInterpolate2","ɵɵstyleMapInterpolate3","ɵɵstyleMapInterpolate4","ɵɵstyleMapInterpolate5","ɵɵstyleMapInterpolate6","ɵɵstyleMapInterpolate7","ɵɵstyleMapInterpolate8","ɵɵstyleMapInterpolateV","ɵɵstylePropInterpolate1","valueSuffix","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵhostProperty","ɵɵsyntheticHostProperty","ngI18nClosureMode","goog","getMsg","u","plural","val","n","floor","localeEn","LOCALE_DATA","registerLocaleData","localeId","extraData","LocaleDataIndex","LocaleId","ExtraData","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","getLocaleCurrencyCode","CurrencyCode","getLocalePluralCase","PluralCase","ng","common","locales","unregisterAllLocaleData","pluralMapping","getPluralCase","parseInt","DEFAULT_LOCALE_ID","USD_CURRENCY_CODE","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","unusedValueExportToPlacateAjd$2","setLocaleId","getLocaleId","tNodeInsertBeforeIndex","i18nParent","anchorRNode","i18nChild","addTNodeAndUpdateInsertBeforeIndex","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","getTIcu","setTIcu","setTNodeInsertBeforeIndex","createTNodePlaceholder","getCurrentICUCaseIndex","currentCase","getParentFromIcuCreateOpCode","mergedCode","getRefFromIcuCreateOpCode","getInstructionFromIcuCreateOpCode","icuCreateOpCode","parentIdx","refIdx","changeMask","changeMaskCounter","setMaskBit","hasChange","min","applyI18n","tI18n","updateOpCodes","update","bindingsStartIndex","applyUpdateOpCodes","applyCreateOpCodes","createOpCodes","insertInFrontOf","isComment","COMMENT","appendNow","APPEND_EAGERLY","SHIFT","applyMutableOpCodes","mutableOpCodes","rootIdx","rootRNode","textNodeIndex","caseIndex","anchorIdx","elementNodeIndex","commentValue","commentNodeIndex","commentRNode","elementRNode","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","currentIndex","activeCaseIndex","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","remove","nodeOrIcuIndex","icuExpression","bindingValue","cases","resolvedCase","loadIcuContainerVisitor","_stack","_index","_removes","icuContainerIteratorStart","enterIcu","icuContainerIteratorNext","removeOpCode","tIcuIndex","i18nCreateOpCodesToString","opcodes","lines","i18nUpdateOpCodesToString","parser","OpCodeParser","consumeOpCode","ref","consumeString","sanitizationFn","consumeFunction","hasMore","consumeNumber","statements","statement","consumeNumberOrString","opCodeText","icuCreateOpCodesToString","lastRef","consumeNumberStringOrMarker","line","i18nRemoveOpCodesToString","codes","BINDING_REGEXP","ICU_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","MARKER","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","replaceNgsp","i18nStartFirstCreatePass","parentTNodeIndex","subTemplateIndex","existingTNodeStack","getTranslationForTemplate","msgParts","i18nParseTextIntoPartsAndICU","part","i18nStartFirstCreatePassProcessTextNode","icuContainerTNode","createTNodeAndAddOpCode","mainBinding","icuNodeIndex","icuStart","isClosing","Number","existingTNodes","isICU","i18nNodeIdx","hasBinding","generateBindingUpdateOpCodes","i18nAttributesFirstPass","previousElement","previousElementIndex","countBindings","str","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","opCodes","isRootTemplateMessage","removeInnerTemplateTranslation","inTemplate","tagMatched","exec","search","bindingMask","addUpdateIcuSwitch","valueArr","nestedIcus","icuIndex","parseIcuCase","addUpdateIcuUpdate","parseICUBlock","pattern","icuType","binding","pos","blocks","prevPos","braceStack","results","braces","lastIndex","block","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","currentNode","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","addRemoveNode","isNestedIcu","nestedIcuIndex","addRemoveNestedIcu","appendToParentIdx","createAtIdx","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","i18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nStart","messageIndex","sameViewParentTNode","ɵɵi18nEnd","ɵɵi18n","ɵɵi18nAttributes","ɵɵi18nExp","ɵɵi18nApply","ɵɵi18nPostprocess","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","componentProviders","contextIndex","providerIsTypeProvider","providerIsClassProvider","classToken","existingCallbacksIndex","isComponentProvider","lData","multiResolve","componentCount","multiProviders","f","ɵɵProvidersFeature","processProvidersFn","NgModuleRef$1","NgModuleFactory$1","createNgModule","NgModuleRef","createNgModuleRef","_bootstrapComponents","destroyCbs","_r3Injector","NgModuleFactory","moduleType","EnvironmentNgModuleRefAdapter","createEnvironmentInjector","debugName","adapter","StandaloneService","_injector","cachedInjectors","getOrCreateStandaloneInjector","standaloneInjector","ɵɵStandaloneFeature","getComponent","assertDomElement","getContext","getOwningComponent","elementOrDir","getRootComponents","getInjector","getInjectionTokens","providerTokens","isDirectiveDefHack","getDirectives","Text","getDirectiveMetadata","directiveOrComponentInstance","getLocalRefs","getHostElement","componentOrDirective","getRenderedText","hostElement","getListeners","lContext","listeners","firstParam","secondParam","listenerElement","useCaptureOrIndx","sort","sortListeners","valueInLView","getComponentLView","nodeIndx","Element","setClassMetadata","clazz","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","ɵɵpureFunction3","pureFunction3Internal","ɵɵpureFunction4","pureFunction4Internal","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","pureFunctionVInternal","getPureFunctionReturnValue","returnValueIndex","lastReturnValue","bindingRoot","ɵɵpipe","pipeName","getPipeDef","pipeFactory","pipeInstance","getPipeNotFoundErrorMessage","hostIsStandalone","componentInfoMessage","verifyMessage","ɵɵpipeBind1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","EventEmitter_","isAsync","__isAsync","emit","observerOrNext","complete","nextFn","errorFn","completeFn","observer","_wrapInTimeout","sink","setTimeout","EventEmitter","symbolIterator","_results","QueryList","_emitDistinctChangesOnly","_changesDetected","_changes","last","symbol","changes","find","reduce","init","toArray","reset","resultsTree","newResultFlat","notifyOnChanges","setDirty","TemplateRef","injectTemplateRef","ViewEngineTemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","createEmbeddedView","declarationViewLQueries","createTemplateRef","ViewContainerRef","injectViewContainerRef","previousTNode","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","indexOrOptions","viewRef","insert","createComponent","componentFactoryOrType","isComponentFactory","ngModuleRef","componentFactory","contextInjector","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","getOrCreateViewRefs","move","viewRefsArr","detachedView","wasDetached","commentNode","parentOfHostNative","unusedValueExportToPlacateAjd$1","unusedValueExportToPlacateAjd","unusedValueToPlacateAjd","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","parentLQuery","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","predicate","read","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","crossesNgTemplate","_appliesToNextNode","_declarationNodeIndex","isApplyingToNode","matchTNode","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","nodeMatchIdx","directiveOrProviderIdx","matchIdx","createResultByTNodeType","createResultForNode","matchingIdx","createSpecialToken","materializeViewResults","queryIndex","lQuery","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","ɵɵqueryRefresh","ɵɵviewQuery","createTQuery","createLQuery","ɵɵcontentQuery","saveContentQueryAndDirectiveIndex","ɵɵloadQuery","loadQueryInternal","tViewContentQueries","lastSavedDirectiveIndex","ɵɵtemplateRefExtractor","angularCoreEnv","patchModuleCompilation","isModuleWithProviders$1","isNgModule$1","moduleQueue","enqueueModuleForDelayedScoping","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","verifySemanticsOfNgModuleDef","compileInjector","generateStandaloneInDeclarationsError","importingModule","verifiedNgModule","errors","unwrapModuleWithProvidersImports","modOrStandaloneCmpt","verifySemanticsOfNgModuleImport","verifyDeclarationsHaveDefinitions","verifyDirectivesHaveSelector","declarationType","verifyNotStandalone","combinedDeclarations","computeCombinedExports","verifyExportsAreDeclaredOrReExported","decl","verifyDeclarationIsUnique","verifyComponentEntryComponentsIsPartOfNgModule","getAnnotation","mod","verifyCorrectBootstrapType","verifyComponentIsPartOfNgModule","entryComponents","suppressErrors","existingModule","ownerNgModule","typeOrWithProviders","collect","__annotations__","readAnnotation","WeakMap","resetCompiledComponents","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","dir","pipe","transitiveScopesForNgModule","exported","importedScope","entry","declared","declaredWithDefs","exportedType","exportedScope","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","_valueProps","setMetadata","removeMetadata","addMetadata","references","removeObjects","removeValue","_propHashKey","propValue","addValue","nextObjectId","objectIds","replacer","_serializeReference","protoProp","desc","getOwnPropertyDescriptor","reflection","OverrideResolver","overrides","addOverride","setOverrides","isKnownType","overrider","DirectiveResolver","ComponentResolver","PipeResolver","NgModuleResolver","TestingModuleOverride","isTestingModuleOverride","DECLARATION","OVERRIDE_TEMPLATE","assertNoStandaloneComponents","resolver","TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","overriddenModules","existingComponentStyles","resolvers","initResolvers","componentToModuleScope","initialNgDefs","defCleanupOps","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByModule","providerOverridesByToken","scopesWithOverriddenProviders","testModuleRef","DynamicTestModule","testModuleType","setCompilerProviders","configureTestingModule","moduleDef","queueTypeArray","queueTypesFromModulesArray","overrideModule","module","invalidTypeError","recompileNgModule","overrideComponent","verifyNoStandaloneFlagOverrides","overrideDirective","overridePipe","overrideProvider","providerDef","overridesBucket","existingOverrides","overrideTemplateUsingTestingModule","hasStyleUrls","overrideStyleUrls","compileComponents","clearComponentResolutionQueue","needsAsyncResources","compileTypesSync","resourceLoader","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","runInitializers","_compileNgModuleSync","applyProviderOverridesInScope","_compileNgModuleAsync","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","maybeStoreNgDef","testingModuleDef","affectedModules","collectModulesAffectedByOverrides","storeFieldOfDefOnType","moduleToScope","getScopeOfModule","isTestingModule","realType","moduleScope","maybeApplyOverrides","hasProviderOverrides","patchDefWithProviderOverrides","hasScope","isStandaloneComponent","isNgModule","injectorDef","getComponentDef","dependency","getOverriddenProviders","importedModule","flatten","isModuleWithProviders","object","fieldName","originalValue","queueType","processedNgModuleDefs","queueTypesFromModulesArrayRecur","hasNgModuleDef","seenModules","calcAffectedModulesRecur","currentDefs","defField","restoreOriginalState","forEachRight","op","defs","descriptor","RootScopeModule","enableLongStackTrace","R3TestCompiler","compilerOptions","CompilerModule","CompilerModuleFactory","getSingleProviderOverrides","getProviderToken","getProviderOverrides","flattenedProviders","overriddenProviders","final","seenOverriddenProviders","ngDef","maybeFn","mapFn","out","getProviderField","expectedType","testBed","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","_nextRootElementId","getTestBed","TestBedImpl","INSTANCE","_compiler","_testModuleRef","_activeFixtures","globalCompilationChecked","_INSTANCE","initTestEnvironment","resetTestEnvironment","configureCompiler","config","overrideTemplate","inject","resetTestingModule","execute","_environmentTeardownOptions","teardown","_environmentErrorOnUnknownElementsOption","errorOnUnknownElements","_environmentErrorOnUnknownPropertiesOption","errorOnUnknownProperties","checkGlobalCompilationFinished","_previousErrorOnUnknownElementsOption","_previousErrorOnUnknownPropertiesOption","destroyActiveFixtures","shouldTearDownTestingModule","tearDownTestingModule","_instanceTeardownOptions","_instanceErrorOnUnknownElementsOption","_instanceErrorOnUnknownPropertiesOption","useJit","assertNotInstantiated","shouldThrowErrorOnUnknownElements","shouldThrowErrorOnUnknownProperties","TestBed","testComponentRenderer","rootElId","noNgZone","initComponent","fixture","methodName","methodDescription","errorCount","stacktrace","shouldRethrowTeardownErrors","instanceOptions","environmentOptions","rethrowErrors","destroyAfterEach","testRenderer","InjectSetupWrapper","_moduleDef","_addModule","withModule","_global","beforeEach","getCleanupHook","afterEach","expectedTeardownValue","__core_private_testing_placeholder__","ɵMetadataOverrider"],"sources":["C:/Users/jrenau01/IdeaProjects/PizzaDeliveryApp/PizzaApp-front/node_modules/@angular/core/fesm2020/testing.mjs"],"sourcesContent":["/**\n * @license Angular v14.2.2\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getDebugNode as getDebugNode$1, RendererFactory2 as RendererFactory2$1, InjectionToken as InjectionToken$1, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, resolveForwardRef as resolveForwardRef$1, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID as LOCALE_ID$1, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, Injector as Injector$1, InjectFlags as InjectFlags$1, ɵsetAllowDuplicateNgModuleIdsForTest, ɵresetCompiledComponents, ɵsetUnknownElementStrictMode as ɵsetUnknownElementStrictMode$1, ɵsetUnknownPropertyStrictMode as ɵsetUnknownPropertyStrictMode$1, ɵgetUnknownElementStrictMode as ɵgetUnknownElementStrictMode$1, ɵgetUnknownPropertyStrictMode as ɵgetUnknownPropertyStrictMode$1, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nfunction waitForAsync(fn) {\n    const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js');\n        };\n    }\n    const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    return function () {\n        return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/testing');\n    };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\nfunction async(fn) {\n    return waitForAsync(fn);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nclass ComponentFixture {\n    constructor(componentRef, ngZone, _autoDetect) {\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = getDebugNode$1(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(() => {\n                this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n                    next: () => {\n                        this._isStable = false;\n                    }\n                });\n                this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: () => {\n                        if (this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            this.detectChanges(true);\n                        }\n                    }\n                });\n                this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: () => {\n                        this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(() => {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (this._promise !== null) {\n                                        this._resolve(true);\n                                        this._resolve = null;\n                                        this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                this._onErrorSubscription = ngZone.onError.subscribe({\n                    next: (error) => {\n                        throw error;\n                    }\n                });\n            });\n        }\n    }\n    _tick(checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    }\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    detectChanges(checkNoChanges = true) {\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(() => {\n                this._tick(checkNoChanges);\n            });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    checkNoChanges() {\n        this.changeDetectorRef.checkNoChanges();\n    }\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    autoDetectChanges(autoDetect = true) {\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    }\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    isStable() {\n        return this._isStable && !this.ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(res => {\n                this._resolve = res;\n            });\n            return this._promise;\n        }\n    }\n    _getRenderer() {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2$1, null);\n        }\n        return this._renderer;\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     */\n    whenRenderingDone() {\n        const renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     */\n    destroy() {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    }\n}\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the `fakeAsync` zone:\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception is thrown.\n *\n * Can be used to wrap `inject()` calls.\n *\n * @param fn The function that you want to wrap in the `fakeAysnc` zone.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n *\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\n * Any arguments passed when calling this returned function will be passed through to the `fn`\n * function in the parameters when it is called.\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @param millis The number of milliseconds to advance the virtual timer.\n * @param tickOptions The options to pass to the `tick()` function.\n *\n * @usageNotes\n *\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\n * which determines whether or not to invoke new macroTasks.\n *\n * If you provide a `tickOptions` object, but do not specify a\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\n * then `processNewMacroTasksSynchronously` defaults to true.\n *\n * If you omit the `tickOptions` parameter (`tick(100))`), then\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\n *\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * The following example includes a nested timeout (new macroTask), and\n * the `tickOptions` parameter is allowed to default. In this case,\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\n * function is executed on each tick.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n * ```\n *\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\n * set to false, so the nested timeout function is not invoked.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n * ```\n *\n *\n * @publicApi\n */\nfunction tick(millis = 0, tickOptions = {\n    processNewMacroTasksSynchronously: true\n}) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis, tickOptions);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flushes any pending microtasks and simulates the asynchronous passage of time for the timers in\n * the `fakeAsync` zone by\n * draining the macrotask queue until it is empty.\n *\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\n *     throwing an error.\n * @returns The simulated time elapsed, in milliseconds.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Whether test modules should be torn down by default. */\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/** Whether unknown elements in templates should throw by default. */\nconst THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;\n/** Whether unknown properties in templates should throw by default. */\nconst THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nclass TestComponentRenderer {\n    insertRootElement(rootElementId) { }\n    removeAllRootElements() { }\n}\n/**\n * @publicApi\n */\nconst ComponentFixtureAutoDetect = new InjectionToken$1('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\nconst ComponentFixtureNoNgZone = new InjectionToken$1('ComponentFixtureNoNgZone');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    const componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    const urlMap = new Map();\n    function cachedResourceResolve(url) {\n        let promise = urlMap.get(url);\n        if (!promise) {\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component, type) => {\n        const promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n            }));\n        }\n        const styleUrls = component.styleUrls;\n        const styles = component.styles || (component.styles = []);\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then((style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            }));\n        });\n        const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nfunction isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n        component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n    const old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach((_, type) => componentDefPendingResolution.add(type));\n    componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\nconst _global$1 = ( /* @__PURE__ */(() => (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof global !== 'undefined' && global) || (typeof window !== 'undefined' && window) ||\n    (typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self))());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FactoryTarget;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nvar ViewEncapsulation$1;\n(function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getCompilerFacade(request) {\n    const globalNg = _global$1['ng'];\n    if (globalNg && globalNg.ɵcompilerFacade) {\n        return globalNg.ɵcompilerFacade;\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Log the type as an error so that a developer can easily navigate to the type from the\n        // console.\n        console.error(`JIT compilation failed for ${request.kind}`, request.type);\n        let message = `The ${request.kind} '${request\n            .type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n        if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n            message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n            message +=\n                `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n            message += '\\n';\n            message +=\n                `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n        }\n        else {\n            message +=\n                `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n        }\n        message +=\n            `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n        message +=\n            `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n        throw new Error(message);\n    }\n    else {\n        throw new Error('JIT compiler unavailable');\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (Array.isArray(token)) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n    return (before == null || before === '') ?\n        (after === null ? '' : after) :\n        ((after == null || after === '') ? before : before + ' ' + after);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n    forwardRefFn.__forward_ref__ = forwardRef;\n    forwardRefFn.toString = function () {\n        return stringify(this());\n    };\n    return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n    return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n    return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n    return {\n        token: opts.token,\n        providedIn: opts.providedIn || null,\n        factory: opts.factory,\n        value: undefined,\n    };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n    return { providers: options.providers || [], imports: options.imports || [] };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n    return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\nfunction isInjectable(type) {\n    return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n    return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n    const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n    if (def) {\n        const typeName = getTypeName(type);\n        // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n        // ngDevMode &&\n        console.warn(`DEPRECATED: DI is instantiating a token \"${typeName}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n            `This will become an error in a future version of Angular. Please add @Injectable() to the \"${typeName}\" class.`);\n        return def;\n    }\n    else {\n        return null;\n    }\n}\n/** Gets the name of a type, accounting for some cross-browser differences. */\nfunction getTypeName(type) {\n    // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers\n    // it'll always return the name of the function itself, no matter how many other functions it\n    // inherits from. On IE the function doesn't have its own `name` property, but it takes it from\n    // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most\n    // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around\n    // the issue by converting the function to a string and parsing its name out that way via a regex.\n    if (type.hasOwnProperty('name')) {\n        return type.name;\n    }\n    const match = ('' + type).match(/^function\\s*([^\\s(]+)/);\n    return match === null ? '' : match[1];\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n    return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n        type[NG_INJ_DEF] :\n        null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({ ɵprov: getClosureSafeProperty });\nconst NG_INJ_DEF = getClosureSafeProperty({ ɵinj: getClosureSafeProperty });\n// We need to keep these around so we can read off old defs if new defs are unavailable\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base URL for the error details page.\n *\n * Keep the files below in full sync:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.\n */\nclass RuntimeError extends Error {\n    constructor(code, message) {\n        super(formatRuntimeError(code, message));\n        this.code = code;\n    }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n    // Error code might be a negative number, which is a special marker that instructs the logic to\n    // generate a link to the error details page on angular.io.\n    const fullCode = `NG0${Math.abs(code)}`;\n    let errorMessage = `${fullCode}${message ? ': ' + message.trim() : ''}`;\n    if (ngDevMode && code < 0) {\n        const addPeriodSeparator = !errorMessage.match(/[.,;!?]$/);\n        const separator = addPeriodSeparator ? '.' : '';\n        errorMessage =\n            `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n    }\n    return errorMessage;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n    return typeof v === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertNumber(actual, msg) {\n    if (!(typeof actual === 'number')) {\n        throwError(msg, typeof actual, 'number', '===');\n    }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n    assertNumber(actual, 'Expected a number');\n    assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n    assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n    if (!(typeof actual === 'string')) {\n        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n    }\n}\nfunction assertFunction(actual, msg) {\n    if (!(typeof actual === 'function')) {\n        throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n    }\n}\nfunction assertEqual(actual, expected, msg) {\n    if (!(actual == expected)) {\n        throwError(msg, actual, expected, '==');\n    }\n}\nfunction assertNotEqual(actual, expected, msg) {\n    if (!(actual != expected)) {\n        throwError(msg, actual, expected, '!=');\n    }\n}\nfunction assertSame(actual, expected, msg) {\n    if (!(actual === expected)) {\n        throwError(msg, actual, expected, '===');\n    }\n}\nfunction assertNotSame(actual, expected, msg) {\n    if (!(actual !== expected)) {\n        throwError(msg, actual, expected, '!==');\n    }\n}\nfunction assertLessThan(actual, expected, msg) {\n    if (!(actual < expected)) {\n        throwError(msg, actual, expected, '<');\n    }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n    if (!(actual <= expected)) {\n        throwError(msg, actual, expected, '<=');\n    }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n    if (!(actual > expected)) {\n        throwError(msg, actual, expected, '>');\n    }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n    if (!(actual >= expected)) {\n        throwError(msg, actual, expected, '>=');\n    }\n}\nfunction assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg, actual, null, '==');\n    }\n}\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg, actual, null, '!=');\n    }\n}\nfunction throwError(msg, actual, expected, comparison) {\n    throw new Error(`ASSERTION ERROR: ${msg}` +\n        (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n    // If we're in a worker, `Node` will not be defined.\n    if (!(typeof Node !== 'undefined' && node instanceof Node) &&\n        !(typeof node === 'object' && node != null &&\n            node.constructor.name === 'WebWorkerRenderNode')) {\n        throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n    }\n}\nfunction assertIndexInRange(arr, index) {\n    assertDefined(arr, 'Array must be defined.');\n    const maxLen = arr.length;\n    if (index < 0 || index >= maxLen) {\n        throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n    }\n}\nfunction assertOneOf(value, ...validValues) {\n    if (validValues.indexOf(value) !== -1)\n        return true;\n    throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\nfunction addAllToArray(items, arr) {\n    for (let i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        let valueA = a[i];\n        let valueB = b[i];\n        if (identityAccessor) {\n            valueA = identityAccessor(valueA);\n            valueB = identityAccessor(valueB);\n        }\n        if (valueB !== valueA) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten$1(list, dst) {\n    if (dst === undefined)\n        dst = list;\n    for (let i = 0; i < list.length; i++) {\n        let item = list[i];\n        if (Array.isArray(item)) {\n            // we need to inline it.\n            if (dst === list) {\n                // Our assumption that the list was already flat was wrong and\n                // we need to clone flat since we need to write to it.\n                dst = list.slice(0, i);\n            }\n            flatten$1(item, dst);\n        }\n        else if (dst !== list) {\n            dst.push(item);\n        }\n    }\n    return dst;\n}\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        return arr.pop();\n    }\n    else {\n        return arr.splice(index, 1)[0];\n    }\n}\nfunction newArray(size, value) {\n    const list = [];\n    for (let i = 0; i < size; i++) {\n        list.push(value);\n    }\n    return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n    const length = array.length - count;\n    while (index < length) {\n        array[index] = array[index + count];\n        index++;\n    }\n    while (count--) {\n        array.pop(); // shrink the array\n    }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nfunction arrayInsert(array, index, value) {\n    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n    let end = array.length;\n    while (end > index) {\n        const previousEnd = end - 1;\n        array[end] = array[previousEnd];\n        end = previousEnd;\n    }\n    array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n    let end = array.length;\n    if (end == index) {\n        // inserting at the end.\n        array.push(value1, value2);\n    }\n    else if (end === 1) {\n        // corner case when we have less items in array than we have items to insert.\n        array.push(value2, array[0]);\n        array[0] = value1;\n    }\n    else {\n        end--;\n        array.push(array[end - 1], array[end]);\n        while (end > index) {\n            const previousEnd = end - 2;\n            array[end] = array[previousEnd];\n            end--;\n        }\n        array[index] = value1;\n        array[index + 1] = value2;\n    }\n}\n/**\n * Insert a `value` into an `array` so that the array remains sorted.\n *\n * NOTE:\n * - Duplicates are not allowed, and are ignored.\n * - This uses binary search algorithm for fast inserts.\n *\n * @param array A sorted array to insert into.\n * @param value The value to insert.\n * @returns index of the inserted value.\n */\nfunction arrayInsertSorted(array, value) {\n    let index = arrayIndexOfSorted(array, value);\n    if (index < 0) {\n        // if we did not find it insert it.\n        index = ~index;\n        arrayInsert(array, index, value);\n    }\n    return index;\n}\n/**\n * Remove `value` from a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to remove from.\n * @param value The value to remove.\n * @returns index of the removed value.\n *   - positive index if value found and removed.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     inserted)\n */\nfunction arrayRemoveSorted(array, value) {\n    const index = arrayIndexOfSorted(array, value);\n    if (index >= 0) {\n        arraySplice(array, index, 1);\n    }\n    return index;\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nfunction arrayIndexOfSorted(array, value) {\n    return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n    let index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it set it.\n        keyValueArray[index | 1] = value;\n    }\n    else {\n        index = ~index;\n        arrayInsert2(keyValueArray, index, key, value);\n    }\n    return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n    const index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it retrieve it.\n        return keyValueArray[index | 1];\n    }\n    return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n    return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nfunction keyValueArrayDelete(keyValueArray, key) {\n    const index = keyValueArrayIndexOf(keyValueArray, key);\n    if (index >= 0) {\n        // if we found it remove it.\n        arraySplice(keyValueArray, index, 2);\n    }\n    return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n    ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n    let start = 0;\n    let end = array.length >> shift;\n    while (end !== start) {\n        const middle = start + ((end - start) >> 1); // find the middle.\n        const current = array[middle << shift];\n        if (value === current) {\n            return (middle << shift);\n        }\n        else if (current > value) {\n            end = middle;\n        }\n        else {\n            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n        }\n    }\n    return ~(end << shift);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n    return { toString: fn }.toString();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function DecoratorFactory(...args) {\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call(this, ...args);\n                return this;\n            }\n            const annotationInstance = new DecoratorFactory(...args);\n            return function TypeDecorator(cls) {\n                if (typeFn)\n                    typeFn(cls, ...args);\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                    cls[ANNOTATIONS] :\n                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n                annotations.push(annotationInstance);\n                if (additionalProcessing)\n                    additionalProcessing(cls);\n                return cls;\n            };\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.ngMetadataName = name;\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    });\n}\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function ParamDecoratorFactory(...args) {\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            const annotationInstance = new ParamDecoratorFactory(...args);\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            function ParamDecorator(cls, unusedKey, index) {\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                    cls[PARAMETERS] :\n                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    return noSideEffects(() => {\n        const metaCtor = makeMetadataCtor(props);\n        function PropDecoratorFactory(...args) {\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            const decoratorInstance = new PropDecoratorFactory(...args);\n            function PropDecorator(target, name) {\n                const constructor = target.constructor;\n                // Use of Object.defineProperty is important because it creates a non-enumerable property\n                // which prevents the property from being copied during subclassing.\n                const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                    constructor[PROP_METADATA] :\n                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                if (additionalProcessing)\n                    additionalProcessing(target, name, ...args);\n            }\n            return PropDecorator;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.ngMetadataName = name;\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n    return ES5_DELEGATE_CTOR.test(typeStr) ||\n        ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n        (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr));\n}\nclass ReflectionCapabilities {\n    constructor(reflect) {\n        this._reflect = reflect || _global$1['Reflect'];\n    }\n    factory(t) {\n        return (...args) => new t(...args);\n    }\n    /** @internal */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = newArray(paramAnnotations.length);\n        }\n        else {\n            result = newArray(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] && paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    _ownParameters(type, parentCtor) {\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (isDelegateCtor(typeStr)) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        const tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return newArray(type.length);\n    }\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(type);\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            let annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    }\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            let propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            const propDecorators = typeOrFunc.propDecorators;\n            const propMetadata = {};\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    }\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    ownPropMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        const decoratorType = decoratorInvocation.type;\n        const annotationCls = decoratorType.annotationCls;\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\nfunction getParentCtor(ctor) {\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction ngDevModeResetPerfCounters() {\n    const locationString = typeof location !== 'undefined' ? location.toString() : '';\n    const newCounters = {\n        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n        firstCreatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererAppendChild: 0,\n        rendererInsertBefore: 0,\n        rendererCreateComment: 0,\n    };\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n    _global$1['ngDevMode'] = allowNgDevModeTrue && newCounters;\n    return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n    // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n    // reset the counters.\n    // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n    // yet.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (typeof ngDevMode !== 'object') {\n            ngDevModeResetPerfCounters();\n        }\n        return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n    }\n    return false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n    if (typeof value === 'string')\n        return value;\n    if (value == null)\n        return '';\n    // Use `String` so that it invokes the `toString` method of the value. Note that this\n    // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n    return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n    if (typeof value === 'function')\n        return value.name || value.toString();\n    if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n        return value.type.name || value.type.toString();\n    }\n    return renderStringify(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n    const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n    throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);\n}\nfunction throwMixedMultiProviderError() {\n    throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n    if (ngModuleType && providers) {\n        const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n        throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n    }\n    else if (provider.ɵproviders) {\n        throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    }\n    else {\n        throw new Error('Invalid provider');\n    }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n    const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n    throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for `inject` instead.\n */\nvar InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n    // writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n    return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n    ngDevMode &&\n        assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction setCurrentInjector(injector) {\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode &&\n            `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`EnvironmentInjector#runInContext\\`.`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n    return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n    throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode &&\n        `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported during instantiation of a dependency by the DI system. It can be used\n * during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject$1(token, flags = InjectFlags.Default) {\n    if (typeof flags !== 'number') {\n        // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n        // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n        // `InjectOptions` to `InjectFlags`.\n        flags = (0 /* InternalInjectFlags.Default */ | // comment to force a line break in the formatter\n            (flags.optional && 8 /* InternalInjectFlags.Optional */) |\n            (flags.host && 1 /* InternalInjectFlags.Host */) |\n            (flags.self && 2 /* InternalInjectFlags.Self */) |\n            (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */));\n    }\n    return ɵɵinject(token, flags);\n}\nfunction injectArgs(types) {\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        const arg = resolveForwardRef(types[i]);\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n            }\n            let type = undefined;\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                const meta = arg[j];\n                const flag = getInjectFlag(meta);\n                if (typeof flag === 'number') {\n                    // Special case when we handle @Inject decorator.\n                    if (flag === -1 /* DecoratorFlags.Inject */) {\n                        type = meta.token;\n                    }\n                    else {\n                        flags |= flag;\n                    }\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(ɵɵinject(type, flags));\n        }\n        else {\n            args.push(ɵɵinject(arg));\n        }\n    }\n    return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n    decorator[DI_DECORATOR_FLAG] = flag;\n    decorator.prototype[DI_DECORATOR_FLAG] = flag;\n    return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n    return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n    let context = stringify(obj);\n    if (Array.isArray(obj)) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        let parts = [];\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', (token) => ({ token })), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host = \n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nvar ChangeDetectorStatus;\n(function (ChangeDetectorStatus) {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n    // https://github.com/angular/angular/issues/44119 for additional information.\n    /**\n     * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n     * component's host element and applying the same attribute to all the CSS selectors provided\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n     *\n     * This is the default option.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    /**\n     * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n     * to any HTML element of the application regardless of their host Component.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    /**\n     * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n     * a ShadowRoot for the component's host element which is then used to encapsulate\n     * all the Component's styling.\n     */\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n    // These property accesses can be ignored because ngDevMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_OBJ);\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst NG_COMP_DEF = getClosureSafeProperty({ ɵcmp: getClosureSafeProperty });\nconst NG_DIR_DEF = getClosureSafeProperty({ ɵdir: getClosureSafeProperty });\nconst NG_PIPE_DEF = getClosureSafeProperty({ ɵpipe: getClosureSafeProperty });\nconst NG_MOD_DEF = getClosureSafeProperty({ ɵmod: getClosureSafeProperty });\nconst NG_FACTORY_DEF = getClosureSafeProperty({ ɵfac: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for component definitions. */\nlet componentDefCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n    return noSideEffects(() => {\n        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n        // See the `initNgDevMode` docstring for more information.\n        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n        const type = componentDefinition.type;\n        const standalone = componentDefinition.standalone === true;\n        const declaredInputs = {};\n        const def = {\n            type: type,\n            providersResolver: null,\n            decls: componentDefinition.decls,\n            vars: componentDefinition.vars,\n            factory: null,\n            template: componentDefinition.template || null,\n            consts: componentDefinition.consts || null,\n            ngContentSelectors: componentDefinition.ngContentSelectors,\n            hostBindings: componentDefinition.hostBindings || null,\n            hostVars: componentDefinition.hostVars || 0,\n            hostAttrs: componentDefinition.hostAttrs || null,\n            contentQueries: componentDefinition.contentQueries || null,\n            declaredInputs: declaredInputs,\n            inputs: null,\n            outputs: null,\n            exportAs: componentDefinition.exportAs || null,\n            onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n            directiveDefs: null,\n            pipeDefs: null,\n            standalone,\n            dependencies: standalone && componentDefinition.dependencies || null,\n            getStandaloneInjector: null,\n            selectors: componentDefinition.selectors || EMPTY_ARRAY,\n            viewQuery: componentDefinition.viewQuery || null,\n            features: componentDefinition.features || null,\n            data: componentDefinition.data || {},\n            encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n            id: `c${componentDefCount++}`,\n            styles: componentDefinition.styles || EMPTY_ARRAY,\n            _: null,\n            setInput: null,\n            schemas: componentDefinition.schemas || null,\n            tView: null,\n        };\n        const dependencies = componentDefinition.dependencies;\n        const feature = componentDefinition.features;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach((fn) => fn(def));\n        def.directiveDefs = dependencies ?\n            (() => (typeof dependencies === 'function' ? dependencies() : dependencies)\n                .map(extractDirectiveDef)\n                .filter(nonNull)) :\n            null;\n        def.pipeDefs = dependencies ?\n            (() => (typeof dependencies === 'function' ? dependencies() : dependencies)\n                .map(getPipeDef$1)\n                .filter(nonNull)) :\n            null;\n        return def;\n    });\n}\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n    const def = type.ɵcmp;\n    def.directiveDefs = () => (typeof directives === 'function' ? directives() : directives).map(extractDirectiveDef);\n    def.pipeDefs = () => (typeof pipes === 'function' ? pipes() : pipes).map(getPipeDef$1);\n}\nfunction extractDirectiveDef(type) {\n    return getComponentDef$1(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n    return value !== null;\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n    return noSideEffects(() => {\n        const res = {\n            type: def.type,\n            bootstrap: def.bootstrap || EMPTY_ARRAY,\n            declarations: def.declarations || EMPTY_ARRAY,\n            imports: def.imports || EMPTY_ARRAY,\n            exports: def.exports || EMPTY_ARRAY,\n            transitiveCompileScopes: null,\n            schemas: def.schemas || null,\n            id: def.id || null,\n        };\n        return res;\n    });\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n    return noSideEffects(() => {\n        const ngModuleDef = getNgModuleDef(type, true);\n        ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n        ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n        ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n    });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            let publicName = obj[minifiedKey];\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nconst ɵɵdefineDirective = ɵɵdefineComponent;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n    return {\n        type: pipeDef.type,\n        name: pipeDef.name,\n        factory: null,\n        pure: pipeDef.pure !== false,\n        standalone: pipeDef.standalone === true,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef$1(type) {\n    return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n    return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef$1(type) {\n    return type[NG_PIPE_DEF] || null;\n}\nfunction isStandalone(type) {\n    const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    return def !== null ? def.standalone : false;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n    const ngModuleDef = type[NG_MOD_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n    }\n    return ngModuleDef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nconst T_HOST = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst RENDERER_FACTORY = 10;\nconst RENDERER = 11;\nconst SANITIZER = 12;\nconst CHILD_HEAD = 13;\nconst CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 15;\nconst DECLARATION_COMPONENT_VIEW = 16;\nconst DECLARATION_LCONTAINER = 17;\nconst PREORDER_HOOK_FLAGS = 18;\nconst QUERIES = 19;\nconst ID = 20;\nconst EMBEDDED_VIEW_INJECTOR = 21;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 22;\n/**\n * Converts `TViewType` into human readable text.\n * Make sure this matches with `TViewType`\n */\nconst TViewTypeAsString = [\n    'Root',\n    'Component',\n    'Embedded', // 2\n];\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$8 = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nconst HAS_TRANSPLANTED_VIEWS = 2;\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$7 = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 8 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n    return (tNode.flags & 2 /* TNodeFlags.isComponentHost */) === 2 /* TNodeFlags.isComponentHost */;\n}\nfunction isDirectiveHost(tNode) {\n    return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\nfunction isComponentDef(def) {\n    return def.template !== null;\n}\nfunction isRootView(target) {\n    return (target[FLAGS] & 256 /* LViewFlags.IsRoot */) !== 0;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n    assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n    assertTNode(tNode);\n    tNode.hasOwnProperty('tView_') &&\n        assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n    assertDefined(tNode, 'TNode must be defined');\n    if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n        throwError('Not of type TNode, got: ' + tNode);\n    }\n}\nfunction assertTIcu(tIcu) {\n    assertDefined(tIcu, 'Expected TIcu to be defined');\n    if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n        throwError('Object is not of TIcu type.');\n    }\n}\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n    if (!getComponentDef$1(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\nfunction assertCurrentTNodeIsParent(isParent) {\n    assertEqual(isParent, true, 'currentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n    assertDefined(tNode, 'currentTNode should exist!');\n    assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertDataNext(lView, index, arr) {\n    if (arr == null)\n        arr = lView;\n    assertEqual(arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);\n}\nfunction assertLContainer(value) {\n    assertDefined(value, 'LContainer must be defined');\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n    assertDefined(value, 'LView must be defined');\n    assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n    assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n    assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n    if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n        throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n    }\n}\nfunction assertIndexInDeclRange(lView, index) {\n    const tView = lView[1];\n    assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInVarsRange(lView, index) {\n    const tView = lView[1];\n    assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n    const tView = lView[1];\n    assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n    if (!(lower <= index && index < upper)) {\n        throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n    }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n    assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage ||\n        'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n    assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n    assertIndexInExpandoRange(lView, injectorIndex);\n    assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n    assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n    assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getFactoryDef(type, throwNotFound) {\n    const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n        throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n    }\n    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nclass SimpleChange {\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange() {\n        return this.firstChange;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵNgOnChangesFeature() {\n    return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n    }\n    return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n    const simpleChangesStore = getSimpleChangesStore(this);\n    const current = simpleChangesStore?.current;\n    if (current) {\n        const previous = simpleChangesStore.previous;\n        if (previous === EMPTY_OBJ) {\n            simpleChangesStore.previous = current;\n        }\n        else {\n            // New changes are copied to the previous store, so that we don't lose history for inputs\n            // which were not changed this time\n            for (let key in current) {\n                previous[key] = current[key];\n            }\n        }\n        simpleChangesStore.current = null;\n        this.ngOnChanges(current);\n    }\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    const previous = simpleChangesStore.previous;\n    const declaredName = this.declaredInputs[publicName];\n    const previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    instance[privateName] = value;\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setProfiler = (profiler) => {\n    profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nconst profiler = function (event, instance, hookOrListener) {\n    if (profilerCallback != null /* both `null` and `undefined` */) {\n        profilerCallback(event, instance, hookOrListener);\n    }\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SVG_NAMESPACE = 'svg';\nconst SVG_NAMESPACE_URI = 'http://www.w3.org/2000/svg';\nconst MATH_ML_NAMESPACE = 'math';\nconst MATH_ML_NAMESPACE_URI = 'http://www.w3.org/1998/MathML/';\nfunction getNamespaceUri(namespace) {\n    const name = namespace.toLowerCase();\n    return name === SVG_NAMESPACE ? SVG_NAMESPACE_URI :\n        (name === MATH_ML_NAMESPACE ? MATH_ML_NAMESPACE_URI : null);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = value[HOST];\n    }\n    return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLView()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (typeof value[TYPE] === 'object')\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * Returns `LContainer` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLContainer(value) {\n    while (Array.isArray(value)) {\n        // This check is same as `isLContainer()` but we don't call at as we don't want to call\n        // `Array.isArray()` twice and give JITer more work for inlining.\n        if (value[TYPE] === true)\n            return value;\n        value = value[HOST];\n    }\n    return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n    ngDevMode && assertIndexInRange(lView, index);\n    ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n    return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertIndexInRange(lView, tNode.index);\n    const node = unwrapRNode(lView[tNode.index]);\n    return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n    const index = tNode === null ? -1 : tNode.index;\n    if (index !== -1) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        const node = unwrapRNode(lView[index]);\n        return node;\n    }\n    return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n    const tNode = tView.data[index];\n    ngDevMode && tNode !== null && assertTNode(tNode);\n    return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n    ngDevMode && assertIndexInRange(view, index);\n    return view[index];\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    ngDevMode && assertIndexInRange(hostView, nodeIndex);\n    const slotValue = hostView[nodeIndex];\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n    return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 64 /* LViewFlags.Attached */) === 64 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n    if (index === null || index === undefined)\n        return null;\n    ngDevMode && assertIndexInRange(consts, index);\n    return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nfunction updateTransplantedViewCount(lContainer, amount) {\n    lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    let viewOrContainer = lContainer;\n    let parent = lContainer[PARENT];\n    while (parent !== null &&\n        ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||\n            (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {\n        parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n        viewOrContainer = parent;\n        parent = parent[PARENT];\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst instructionState = {\n    lFrame: createLFrame(null),\n    bindingsEnabled: true,\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nfunction specOnlyIsInstructionStateEmpty() {\n    return instructionState.lFrame.parent === null;\n}\nfunction getElementDepthCount() {\n    return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n    instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n    instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n    return instructionState.bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n    instructionState.bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n    instructionState.bindingsEnabled = false;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n    return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n    return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n    instructionState.lFrame.contextLView = viewToRestore;\n    return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n    instructionState.lFrame.contextLView = null;\n    return value;\n}\nfunction getCurrentTNode() {\n    let currentTNode = getCurrentTNodePlaceholderOk();\n    while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n        currentTNode = currentTNode.parent;\n    }\n    return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n    return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n    const lFrame = instructionState.lFrame;\n    const currentTNode = lFrame.currentTNode;\n    return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n    ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n    const lFrame = instructionState.lFrame;\n    lFrame.currentTNode = tNode;\n    lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n    return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n    instructionState.lFrame.isParent = false;\n}\nfunction setCurrentTNodeAsParent() {\n    instructionState.lFrame.isParent = true;\n}\nfunction getContextLView() {\n    const contextLView = instructionState.lFrame.contextLView;\n    ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n    return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n    !ngDevMode && throwError('Must never be called in production mode');\n    return _isInCheckNoChangesMode;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    _isInCheckNoChangesMode = mode;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n    const lFrame = instructionState.lFrame;\n    let index = lFrame.bindingRootIndex;\n    if (index === -1) {\n        index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n    }\n    return index;\n}\nfunction getBindingIndex() {\n    return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n    return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n    return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n    const lFrame = instructionState.lFrame;\n    const index = lFrame.bindingIndex;\n    lFrame.bindingIndex = lFrame.bindingIndex + count;\n    return index;\n}\nfunction isInI18nBlock() {\n    return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n    instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n    const lFrame = instructionState.lFrame;\n    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n    return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n    instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n    const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n    return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n    return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n    instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n    const tView = lView[TVIEW];\n    // Return the declaration parent for embedded views\n    if (tView.type === 2 /* TViewType.Embedded */) {\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n        return tView.declTNode;\n    }\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    // Falling back to `T_HOST` in case we cross component boundary.\n    if (tView.type === 1 /* TViewType.Component */) {\n        return lView[T_HOST];\n    }\n    // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n    return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n    ngDevMode && assertLViewOrUndefined(lView);\n    if (flags & InjectFlags.SkipSelf) {\n        ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n        let parentTNode = tNode;\n        let parentLView = lView;\n        while (true) {\n            ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n            parentTNode = parentTNode.parent;\n            if (parentTNode === null && !(flags & InjectFlags.Host)) {\n                parentTNode = getDeclarationTNode(parentLView);\n                if (parentTNode === null)\n                    break;\n                // In this case, a parent exists and is definitely an element. So it will definitely\n                // have an existing lView as the declaration view, which is why we can assume it's defined.\n                ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n                parentLView = parentLView[DECLARATION_VIEW];\n                // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n                // We want to skip those and look only at Elements and ElementContainers to ensure\n                // we're looking at true parent nodes, and not content or other types.\n                if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        if (parentTNode === null) {\n            // If we failed to find a parent TNode this means that we should use module injector.\n            return false;\n        }\n        else {\n            tNode = parentTNode;\n            lView = parentLView;\n        }\n    }\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const lFrame = instructionState.lFrame = allocLFrame();\n    lFrame.currentTNode = tNode;\n    lFrame.lView = lView;\n    return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n    ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n    ngDevMode && assertLViewOrUndefined(newView);\n    const newLFrame = allocLFrame();\n    if (ngDevMode) {\n        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n    }\n    const tView = newView[TVIEW];\n    instructionState.lFrame = newLFrame;\n    ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n    newLFrame.currentTNode = tView.firstChild;\n    newLFrame.lView = newView;\n    newLFrame.tView = tView;\n    newLFrame.contextLView = newView;\n    newLFrame.bindingIndex = tView.bindingStartIndex;\n    newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n    const currentLFrame = instructionState.lFrame;\n    const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n    const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n    return newLFrame;\n}\nfunction createLFrame(parent) {\n    const lFrame = {\n        currentTNode: null,\n        isParent: true,\n        lView: null,\n        tView: null,\n        selectedIndex: -1,\n        contextLView: null,\n        elementDepthCount: 0,\n        currentNamespace: null,\n        currentDirectiveIndex: -1,\n        bindingRootIndex: -1,\n        bindingIndex: -1,\n        currentQueryIndex: 0,\n        parent: parent,\n        child: null,\n        inI18n: false,\n    };\n    parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n    return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n    const oldLFrame = instructionState.lFrame;\n    instructionState.lFrame = oldLFrame.parent;\n    oldLFrame.currentTNode = null;\n    oldLFrame.lView = null;\n    return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n    const oldLFrame = leaveViewLight();\n    oldLFrame.isParent = true;\n    oldLFrame.tView = null;\n    oldLFrame.selectedIndex = -1;\n    oldLFrame.contextLView = null;\n    oldLFrame.elementDepthCount = 0;\n    oldLFrame.currentDirectiveIndex = -1;\n    oldLFrame.currentNamespace = null;\n    oldLFrame.bindingRootIndex = -1;\n    oldLFrame.bindingIndex = -1;\n    oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n    const contextLView = instructionState.lFrame.contextLView =\n        walkUpViews(level, instructionState.lFrame.contextLView);\n    return contextLView[CONTEXT];\n}\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode &&\n            assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = currentView[DECLARATION_VIEW];\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n    return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n    ngDevMode && index !== -1 &&\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n    ngDevMode &&\n        assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n    instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n    const lFrame = instructionState.lFrame;\n    return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n    instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n    instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n    namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n    instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace$1() {\n    return instructionState.lFrame.currentNamespace;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;\n    if (ngOnChanges) {\n        const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = []))\n            .push(directiveIndex, wrappedOnChanges);\n    }\n    if (ngOnInit) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n    }\n    if (ngDoCheck) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n    // hooks for projected components and directives must be called *before* their hosts.\n    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n        const directiveDef = tView.data[i];\n        ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n        const lifecycleHooks = directiveDef.type.prototype;\n        const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;\n        if (ngAfterContentInit) {\n            (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n        }\n        if (ngAfterContentChecked) {\n            (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n            (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n        }\n        if (ngAfterViewInit) {\n            (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n        }\n        if (ngAfterViewChecked) {\n            (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n            (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n        }\n        if (ngOnDestroy != null) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n    callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n    ngDevMode &&\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n    if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n        callHooks(lView, hooks, initPhase, nodeIndex);\n    }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n    ngDevMode &&\n        assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n    let flags = lView[FLAGS];\n    if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n        flags &= 2047 /* LViewFlags.IndexWithinInitPhaseReset */;\n        flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n        lView[FLAGS] = flags;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    ngDevMode &&\n        assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n    const startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n    let lastNodeIndexFound = 0;\n    for (let i = startIndex; i < max; i++) {\n        const hook = arr[i + 1];\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = arr[i];\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            const isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    const isInitHook = arr[i] < 0;\n    const hook = arr[i + 1];\n    const directiveIndex = isInitHook ? -arr[i] : arr[i];\n    const directive = currentView[directiveIndex];\n    if (isInitHook) {\n        const indexWithintInitPhase = currentView[FLAGS] >> 11 /* LViewFlags.IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively updated.\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 2048 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n            try {\n                hook.call(directive);\n            }\n            finally {\n                profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n            }\n        }\n    }\n    else {\n        profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n        try {\n            hook.call(directive);\n        }\n        finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    constructor(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        ngDevMode && assertDefined(factory, 'Factory not specified');\n        ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\nfunction isFactory(obj) {\n    return obj instanceof NodeInjectorFactory;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$6 = 1;\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n    let text = '';\n    (tNodeType & 1 /* TNodeType.Text */) && (text += '|Text');\n    (tNodeType & 2 /* TNodeType.Element */) && (text += '|Element');\n    (tNodeType & 4 /* TNodeType.Container */) && (text += '|Container');\n    (tNodeType & 8 /* TNodeType.ElementContainer */) && (text += '|ElementContainer');\n    (tNodeType & 16 /* TNodeType.Projection */) && (text += '|Projection');\n    (tNodeType & 32 /* TNodeType.Icu */) && (text += '|IcuContainer');\n    (tNodeType & 64 /* TNodeType.Placeholder */) && (text += '|Placeholder');\n    return text.length > 0 ? text.substring(1) : text;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$5 = 1;\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n    return (tNode.flags & 16 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n    return (tNode.flags & 32 /* TNodeFlags.hasStyleInput */) !== 0;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertTNodeType(tNode, expectedTypes, message) {\n    assertDefined(tNode, 'should be called with a TNode');\n    if ((tNode.type & expectedTypes) === 0) {\n        throwError(message ||\n            `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n    }\n}\nfunction assertPureTNodeType(type) {\n    if (!(type === 2 /* TNodeType.Element */ || //\n        type === 1 /* TNodeType.Text */ || //\n        type === 4 /* TNodeType.Container */ || //\n        type === 8 /* TNodeType.ElementContainer */ || //\n        type === 32 /* TNodeType.Icu */ || //\n        type === 16 /* TNodeType.Projection */ || //\n        type === 64 /* TNodeType.Placeholder */)) {\n        throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n    }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n    let i = 0;\n    while (i < attrs.length) {\n        const value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            const namespaceURI = attrs[i++];\n            const attrName = attrs[i++];\n            const attrVal = attrs[i++];\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n        }\n        else {\n            // attrName is string;\n            const attrName = value;\n            const attrVal = attrs[++i];\n            // Standard attributes\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (isAnimationProp(attrName)) {\n                renderer.setProperty(native, attrName, attrVal);\n            }\n            else {\n                renderer.setAttribute(native, attrName, attrVal);\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n    return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ ||\n        marker === 6 /* AttributeMarker.I18n */;\n}\nfunction isAnimationProp(name) {\n    // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n    // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n    // charCodeAt doesn't allocate memory to return a substring.\n    return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n    if (src === null || src.length === 0) {\n        // do nothing\n    }\n    else if (dst === null || dst.length === 0) {\n        // We have source, but dst is empty, just make a copy.\n        dst = src.slice();\n    }\n    else {\n        let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n        for (let i = 0; i < src.length; i++) {\n            const item = src[i];\n            if (typeof item === 'number') {\n                srcMarker = item;\n            }\n            else {\n                if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) {\n                    // Case where we need to consume `key1`, `key2`, `value` items.\n                }\n                else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ ||\n                    srcMarker === 2 /* AttributeMarker.Styles */) {\n                    // Case where we have to consume `key1` and `value` only.\n                    mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n                }\n                else {\n                    // Case where we have to consume `key1` only.\n                    mergeHostAttribute(dst, srcMarker, item, null, null);\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n    let i = 0;\n    // Assume that new markers will be inserted at the end.\n    let markerInsertPosition = dst.length;\n    // scan until correct type.\n    if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n        markerInsertPosition = -1;\n    }\n    else {\n        while (i < dst.length) {\n            const dstValue = dst[i++];\n            if (typeof dstValue === 'number') {\n                if (dstValue === marker) {\n                    markerInsertPosition = -1;\n                    break;\n                }\n                else if (dstValue > marker) {\n                    // We need to save this as we want the markers to be inserted in specific order.\n                    markerInsertPosition = i - 1;\n                    break;\n                }\n            }\n        }\n    }\n    // search until you find place of insertion\n    while (i < dst.length) {\n        const item = dst[i];\n        if (typeof item === 'number') {\n            // since `i` started as the index after the marker, we did not find it if we are at the next\n            // marker\n            break;\n        }\n        else if (item === key1) {\n            // We already have same token\n            if (key2 === null) {\n                if (value !== null) {\n                    dst[i + 1] = value;\n                }\n                return;\n            }\n            else if (key2 === dst[i + 1]) {\n                dst[i + 2] = value;\n                return;\n            }\n        }\n        // Increment counter.\n        i++;\n        if (key2 !== null)\n            i++;\n        if (value !== null)\n            i++;\n    }\n    // insert at location.\n    if (markerInsertPosition !== -1) {\n        dst.splice(markerInsertPosition, 0, marker);\n        i = markerInsertPosition + 1;\n    }\n    dst.splice(i++, 0, key1);\n    if (key2 !== null) {\n        dst.splice(i++, 0, key2);\n    }\n    if (value !== null) {\n        dst.splice(i++, 0, value);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n    ngDevMode && assertNumber(parentLocation, 'Number expected');\n    ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n    ngDevMode &&\n        assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n    return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\nfunction getParentInjectorViewOffset(parentLocation) {\n    return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    let viewOffset = getParentInjectorViewOffset(location);\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = parentView[DECLARATION_VIEW];\n        viewOffset--;\n    }\n    return parentView;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n    let id;\n    if (typeof type === 'string') {\n        id = type.charCodeAt(0) || 0;\n    }\n    else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n        id = type[NG_ELEMENT_ID];\n    }\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    const bloomHash = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    const mask = 1 << bloomHash;\n    // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n    // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n    // should be written to.\n    tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n    const existingInjectorIndex = getInjectorIndex(tNode, lView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    const tView = lView[TVIEW];\n    if (tView.firstCreatePass) {\n        tNode.injectorIndex = lView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(lView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n    }\n    const parentLoc = getParentInjectorLocation(tNode, lView);\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        const parentIndex = getParentInjectorIndex(parentLoc);\n        const parentLView = getParentInjectorView(parentLoc, lView);\n        const parentData = parentLView[TVIEW].data;\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n            lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n    return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n        return -1;\n    }\n    else {\n        ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        // If we have a parent `TNode` and there is an injector associated with it we are done, because\n        // the parent injector is within the current `LView`.\n        return tNode.parent.injectorIndex; // ViewOffset is 0\n    }\n    // When parent injector location is computed it may be outside of the current view. (ie it could\n    // be pointing to a declared parent location). This variable stores number of declaration parents\n    // we need to walk up in order to find the parent injector location.\n    let declarationViewOffset = 0;\n    let parentTNode = null;\n    let lViewCursor = lView;\n    // The parent injector is not in the current `LView`. We will have to walk the declared parent\n    // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n    // `NodeInjector`.\n    while (lViewCursor !== null) {\n        parentTNode = getTNodeFromLView(lViewCursor);\n        if (parentTNode === null) {\n            // If we have no parent, than we are done.\n            return NO_PARENT_INJECTOR;\n        }\n        ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n        // Every iteration of the loop requires that we go to the declared parent.\n        declarationViewOffset++;\n        lViewCursor = lViewCursor[DECLARATION_VIEW];\n        if (parentTNode.injectorIndex !== -1) {\n            // We found a NodeInjector which points to something.\n            return (parentTNode.injectorIndex |\n                (declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */));\n        }\n    }\n    return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n    bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    if (attrNameToInject === 'class') {\n        return tNode.classes;\n    }\n    if (attrNameToInject === 'style') {\n        return tNode.styles;\n    }\n    const attrs = tNode.attrs;\n    if (attrs) {\n        const attrsLength = attrs.length;\n        let i = 0;\n        while (i < attrsLength) {\n            const value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* AttributeMarker.NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                while (i < attrsLength && typeof attrs[i] === 'string') {\n                    i++;\n                }\n            }\n            else if (value === attrNameToInject) {\n                return attrs[i + 1];\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n    if ((flags & InjectFlags.Optional) || notFoundValue !== undefined) {\n        return notFoundValue;\n    }\n    else {\n        throwProviderNotFoundError(token, 'NodeInjector');\n    }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n    if ((flags & InjectFlags.Optional) && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        const moduleInjector = lView[INJECTOR$1];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode !== null) {\n        // If the view or any of its ancestors have an embedded\n        // view injector, we have to look it up there first.\n        if (lView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) {\n            const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n            if (embeddedInjectorValue !== NOT_FOUND) {\n                return embeddedInjectorValue;\n            }\n        }\n        // Otherwise try the node injector.\n        const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n        if (value !== NOT_FOUND) {\n            return value;\n        }\n    }\n    // Finally, fall back to the module injector.\n    return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n        if (!enterDI(lView, tNode, flags)) {\n            // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n            // flag, the module injector is not searched for that token in Ivy.\n            return (flags & InjectFlags.Host) ?\n                notFoundValueOrThrow(notFoundValue, token, flags) :\n                lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n        }\n        try {\n            const value = bloomHash(flags);\n            if (value == null && !(flags & InjectFlags.Optional)) {\n                throwProviderNotFoundError(token);\n            }\n            else {\n                return value;\n            }\n        }\n        finally {\n            leaveDI();\n        }\n    }\n    else if (typeof bloomHash === 'number') {\n        // A reference to the previous injector TView that was found while climbing the element\n        // injector tree. This is used to know if viewProviders can be accessed on the current\n        // injector.\n        let previousTView = null;\n        let injectorIndex = getInjectorIndex(tNode, lView);\n        let parentLocation = NO_PARENT_INJECTOR;\n        let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n        // If we should skip this injector, or if there is no injector on this node, start by\n        // searching the parent injector.\n        if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n                injectorIndex = -1;\n            }\n            else {\n                previousTView = lView[TVIEW];\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n        }\n        // Traverse up the injector tree until we find a potential match or until we know there\n        // *isn't* a match.\n        while (injectorIndex !== -1) {\n            ngDevMode && assertNodeInjector(lView, injectorIndex);\n            // Check the current injector. If it matches, see if it contains token.\n            const tView = lView[TVIEW];\n            ngDevMode &&\n                assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                // At this point, we have an injector which *may* contain the token, so we step through\n                // the providers and directives associated with the injector's corresponding node to get\n                // the instance.\n                const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                if (instance !== NOT_FOUND) {\n                    return instance;\n                }\n            }\n            parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation !== NO_PARENT_INJECTOR &&\n                shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) &&\n                bloomHasToken(bloomHash, injectorIndex, lView)) {\n                // The def wasn't found anywhere on this node, so it was a false positive.\n                // Traverse up the tree and continue searching.\n                previousTView = tView;\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n            else {\n                // If we should not search parent OR If the ancestor bloom filter value does not have the\n                // bit corresponding to the directive we can give up on traversing up to find the specific\n                // injector.\n                injectorIndex = -1;\n            }\n        }\n    }\n    return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    const currentTView = lView[TVIEW];\n    const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibilities\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponentHost(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && ((tNode.type & 3 /* TNodeType.AnyRNode */) !== 0));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n    const nodeProviderIndexes = tNode.providerIndexes;\n    const tInjectables = tView.data;\n    const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const directivesStart = tNode.directiveStart;\n    const directiveEnd = tNode.directiveEnd;\n    const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        const providerTokenOrDef = tInjectables[i];\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && providerTokenOrDef.type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        const dirDef = tInjectables[directivesStart];\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n    let value = lView[index];\n    const tData = tView.data;\n    if (isFactory(value)) {\n        const factory = value;\n        if (factory.resolving) {\n            throwCyclicDependencyError(stringifyForError(tData[index]));\n        }\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n        const success = enterDI(lView, tNode, InjectFlags.Default);\n        ngDevMode &&\n            assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n        try {\n            value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n            // This code path is hit for both directives and providers.\n            // For perf reasons, we want to avoid searching for hooks on providers.\n            // It does no harm to try (the hooks just won't exist), but the extra\n            // checks are unnecessary and this is a hot path. So we check to see\n            // if the index of the dependency is in the directive range for this\n            // tNode. If it's not, we know it's a provider and skip hook registration.\n            if (tView.firstCreatePass && index >= tNode.directiveStart) {\n                ngDevMode && assertDirectiveDef(tData[index]);\n                registerPreOrderHooks(index, tData[index], tView);\n            }\n        }\n        finally {\n            previousInjectImplementation !== null &&\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            leaveDI();\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    const tokenId = \n    // First check with `hasOwnProperty` so we don't get an inherited ID.\n    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n    // Negative token IDs are used for special objects such as `Injector`\n    if (typeof tokenId === 'number') {\n        if (tokenId >= 0) {\n            return tokenId & BLOOM_MASK;\n        }\n        else {\n            ngDevMode &&\n                assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n            return createNodeInjector;\n        }\n    }\n    else {\n        return tokenId;\n    }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    const mask = 1 << bloomHash;\n    // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n    // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n    // that should be used.\n    const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nclass NodeInjector {\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    get(token, notFoundValue, flags) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, flags, notFoundValue);\n    }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n    return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n    return noSideEffects(() => {\n        const ownConstructor = type.prototype.constructor;\n        const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n        const objectPrototype = Object.prototype;\n        let parent = Object.getPrototypeOf(type.prototype).constructor;\n        // Go up the prototype until we hit `Object`.\n        while (parent && parent !== objectPrototype) {\n            const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n            // If we hit something that has a factory and the factory isn't the same as the type,\n            // we've found the inherited factory. Note the check that the factory isn't the type's\n            // own factory is redundant in most cases, but if the user has custom decorators on the\n            // class, this lookup will start one level down in the prototype chain, causing us to\n            // find the own factory first and potentially triggering an infinite loop downstream.\n            if (factory && factory !== ownFactory) {\n                return factory;\n            }\n            parent = Object.getPrototypeOf(parent);\n        }\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return t => new t();\n    });\n}\nfunction getFactoryOf(type) {\n    if (isForwardRef(type)) {\n        return () => {\n            const factory = getFactoryOf(resolveForwardRef(type));\n            return factory && factory();\n        };\n    }\n    return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n    let currentTNode = tNode;\n    let currentLView = lView;\n    // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n    // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n    // Since the bloom filters for the node injectors have already been constructed and we don't\n    // have a way of extracting the records from an injector, the only way to maintain the correct\n    // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n    // the token at each level.\n    while (currentTNode !== null && currentLView !== null &&\n        (currentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) &&\n        !(currentLView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n        ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n        // Note that this lookup on the node injector is using the `Self` flag, because\n        // we don't want the node injector to look at any parent injectors since we\n        // may hit the embedded view injector first.\n        const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n        if (nodeInjectorValue !== NOT_FOUND) {\n            return nodeInjectorValue;\n        }\n        // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n        let parentTNode = currentTNode.parent;\n        // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n        // it means that we've hit the view boundary and we need to go up to the next view.\n        if (!parentTNode) {\n            // Before we go to the next LView, check if the token exists on the current embedded injector.\n            const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n            if (embeddedViewInjector) {\n                const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n                if (embeddedViewInjectorValue !== NOT_FOUND) {\n                    return embeddedViewInjectorValue;\n                }\n            }\n            // Otherwise keep going up the tree.\n            parentTNode = getTNodeFromLView(currentLView);\n            currentLView = currentLView[DECLARATION_VIEW];\n        }\n        currentTNode = parentTNode;\n    }\n    return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n    const tView = lView[TVIEW];\n    const tViewType = tView.type;\n    // The parent pointer differs based on `TView.type`.\n    if (tViewType === 2 /* TViewType.Embedded */) {\n        ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n        return tView.declTNode;\n    }\n    else if (tViewType === 1 /* TViewType.Component */) {\n        // Components don't have `TView.declTNode` because each instance of component could be\n        // inserted in different location, hence `TView.declTNode` is meaningless.\n        return lView[T_HOST];\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName, __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName) }));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _reflect = null;\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n    return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n    const meta = {\n        token: null,\n        attribute: null,\n        host: false,\n        optional: false,\n        self: false,\n        skipSelf: false,\n    };\n    if (Array.isArray(dep) && dep.length > 0) {\n        for (let j = 0; j < dep.length; j++) {\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            const proto = Object.getPrototypeOf(param);\n            if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n                }\n                meta.attribute = param.attributeName;\n            }\n            else {\n                meta.token = param;\n            }\n        }\n    }\n    else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\n        meta.token = null;\n    }\n    else {\n        meta.token = dep;\n    }\n    return meta;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming && checkForDuplicateNgModules) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n    const existing = modules.get(id) || null;\n    assertSameOrNotExisting(id, existing, ngModuleType);\n    modules.set(id, ngModuleType);\n}\nfunction clearModulesForTest() {\n    modules.clear();\n}\nfunction getRegisteredNgModuleType(id) {\n    return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n    checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n    return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n    return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n    return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn$1(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n    DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n    if (DOCUMENT !== undefined) {\n        return DOCUMENT;\n    }\n    else if (typeof document !== 'undefined') {\n        return document;\n    }\n    // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n    // the current platform is not a browser. Since this is not a supported scenario at the moment\n    // this should not happen in Angular apps.\n    // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n    // public API. Meanwhile we just return `undefined` and let the application fail.\n    return undefined;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n    if (policy$1 === undefined) {\n        policy$1 = null;\n        if (_global$1.trustedTypes) {\n            try {\n                policy$1 = _global$1.trustedTypes.createPolicy('angular', {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n    return getPolicy$1()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n    return getPolicy$1()?.createScriptURL(url) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nfunction newTrustedFunctionForDev(...args) {\n    if (typeof ngDevMode === 'undefined') {\n        throw new Error('newTrustedFunctionForDev should never be called in production');\n    }\n    if (!_global$1.trustedTypes) {\n        // In environments that don't support Trusted Types, fall back to the most\n        // straightforward implementation:\n        return new Function(...args);\n    }\n    // Chrome currently does not support passing TrustedScript to the Function\n    // constructor. The following implements the workaround proposed on the page\n    // below, where the Chromium bug is also referenced:\n    // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n    const fnArgs = args.slice(0, -1).join(',');\n    const fnBody = args[args.length - 1];\n    const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n    // Using eval directly confuses the compiler and prevents this module from\n    // being stripped out of JS binaries even if not used. The global['eval']\n    // indirection fixes that.\n    const fn = _global$1['eval'](trustedScriptFromString(body));\n    if (fn.bind === undefined) {\n        // Workaround for a browser bug that only exists in Chrome 83, where passing\n        // a TrustedScript to eval just returns the TrustedScript back without\n        // evaluating it. In that case, fall back to the most straightforward\n        // implementation:\n        return new Function(...args);\n    }\n    // To completely mimic the behavior of calling \"new Function\", two more\n    // things need to happen:\n    // 1. Stringifying the resulting function should return its source code\n    fn.toString = () => body;\n    // 2. When calling the resulting function, `this` should refer to `global`\n    return fn.bind(_global$1);\n    // When Trusted Types support in Function constructors is widely available,\n    // the implementation of this function can be simplified to:\n    // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (_global$1.trustedTypes) {\n            try {\n                policy = _global$1.trustedTypes\n                    .createPolicy('angular#unsafe-bypass', {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n    return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n    return getPolicy()?.createScriptURL(url) || url;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass SafeValueImpl {\n    constructor(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n    }\n    toString() {\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n            ` (see https://g.co/ng/security#xss)`;\n    }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"HTML\" /* BypassType.Html */;\n    }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"Style\" /* BypassType.Style */;\n    }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"Script\" /* BypassType.Script */;\n    }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"URL\" /* BypassType.Url */;\n    }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n    getTypeName() {\n        return \"ResourceURL\" /* BypassType.ResourceUrl */;\n    }\n}\nfunction unwrapSafeValue(value) {\n    return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity :\n        value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n    const actualType = getSanitizationBypassType(value);\n    if (actualType != null && actualType !== type) {\n        // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n        if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */)\n            return true;\n        throw new Error(`Required a safe ${type}, got a ${actualType} (see https://g.co/ng/security#xss)`);\n    }\n    return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n    return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n    const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n    return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n    constructor(inertDocumentHelper) {\n        this.inertDocumentHelper = inertDocumentHelper;\n    }\n    getInertBodyElement(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n        // in `html` from consuming the otherwise explicit `</body>` tag.\n        html = '<body><remove></remove>' + html;\n        try {\n            const body = new window.DOMParser()\n                .parseFromString(trustedHTMLFromString(html), 'text/html')\n                .body;\n            if (body === null) {\n                // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n                // becomes available in the following tick of the JS engine. In that case we fall back to\n                // the `inertDocumentHelper` instead.\n                return this.inertDocumentHelper.getInertBodyElement(html);\n            }\n            body.removeChild(body.firstChild);\n            return body;\n        }\n        catch {\n            return null;\n        }\n    }\n}\n/**\n * Use an HTML5 `template` element, if supported, or an inert body element created via\n * `createHtmlDocument` to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        if (this.inertDocument.body == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            const inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            const inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(inertBodyElement);\n        }\n    }\n    getInertBodyElement(html) {\n        // Prefer using <template> element if supported.\n        const templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = trustedHTMLFromString(html);\n            return templateEl;\n        }\n        // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`\n        // and we returned the inert `body` node. This was changed, because IE seems to treat setting\n        // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted\n        // yet. In particular, IE appears to split some of the text into multiple text nodes rather\n        // than keeping them in a single one which ends up messing with Ivy's i18n parsing further\n        // down the line. This has been worked around by creating a new inert `body` and using it as\n        // the root node in which we insert the HTML.\n        const inertBody = this.inertDocument.createElement('body');\n        inertBody.innerHTML = trustedHTMLFromString(html);\n        // Support: IE 11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (this.defaultDoc.documentMode) {\n            this.stripCustomNsAttrs(inertBody);\n        }\n        return inertBody;\n    }\n    /**\n     * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     */\n    stripCustomNsAttrs(el) {\n        const elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (let i = elAttrs.length - 1; 0 < i; i--) {\n            const attrib = elAttrs.item(i);\n            const attrName = attrib.name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        let childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(childNode);\n            childNode = childNode.nextSibling;\n        }\n    }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n    }\n    catch {\n        return false;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|data|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN))\n        return url;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see https://g.co/ng/security#xss)`);\n    }\n    return 'unsafe:' + url;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction tagSet(tags) {\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\nfunction merge(...sets) {\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        let current = el.firstChild;\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement(current);\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(current.nodeValue);\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = current.firstChild;\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(current);\n                }\n                let next = this.checkClobberedElement(current, current.nextSibling);\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, current.parentNode);\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @param element The element to sanitize.\n     * @return True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            const elAttr = elAttrs.item(i);\n            const attrName = elAttr.name;\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            let value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    endElement(current) {\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    chars(chars) {\n        this.buf.push(encodeEntities(chars));\n    }\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n        }\n        return nextNode;\n    }\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        const hi = match.charCodeAt(0);\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n        return '&#' + match.charCodeAt(0) + ';';\n    })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        let mXSSAttempts = 5;\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        const sanitizer = new SanitizingHtmlSerializer();\n        const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');\n        }\n        return trustedHTMLFromString(safeHtml);\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\nfunction getTemplateContent(el) {\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n        el.content :\n        null;\n}\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n        return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n    }\n    return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n        return unwrapSafeValue(unsafeStyle);\n    }\n    return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n        return unwrapSafeValue(unsafeUrl);\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n        return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n    }\n    throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode &&\n        'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n    }\n    if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n        return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n    }\n    throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n    // The following runtime check ensures that the function was called as a\n    // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n    // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n    // is an array with a `raw` property that is also an array. The associated\n    // template literal has no interpolation if and only if the length of the\n    // TemplateStringsArray is 1.\n    if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n        throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n    }\n    return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n    // The following runtime check ensures that the function was called as a\n    // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n    // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n    // TemplateStringsArray is an array with a `raw` property that is also an\n    // array. The associated template literal has no interpolation if and only if\n    // the length of the TemplateStringsArray is 1.\n    if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n        throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n    }\n    return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' &&\n        (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||\n            tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return ɵɵsanitizeResourceUrl;\n    }\n    return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...` +\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n            ` current module.`;\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n    }\n}\nfunction validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...`;\n        throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n    }\n}\nfunction getSanitizer() {\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nclass InjectionToken {\n    /**\n     * @param _desc   Description for the token,\n     *                used only for debugging purposes,\n     *                it should but does not need to be unique\n     * @param options Options for the token's usage, as described above\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /** @internal */\n        this.ngMetadataName = 'InjectionToken';\n        this.ɵprov = undefined;\n        if (typeof options == 'number') {\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                assertLessThan(options, 0, 'Only negative numbers are supported here');\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // See `InjectorMarkers`\n            this.__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            this.ɵprov = ɵɵdefineInjectable({\n                token: this,\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    /**\n     * @internal\n     */\n    get multi() {\n        return this;\n    }\n    toString() {\n        return `InjectionToken ${this._desc}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR = new InjectionToken('INJECTOR', \n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NullInjector {\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n * @developerPreview\n */\nfunction importProvidersFrom(...sources) {\n    return { ɵproviders: internalImportProvidersFrom(true, sources) };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n    const providersOut = [];\n    const dedup = new Set(); // already seen types\n    let injectorTypesWithProviders;\n    deepForEach(sources, source => {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n            const cmpDef = getComponentDef$1(source);\n            if (cmpDef?.standalone) {\n                throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n            }\n        }\n        // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n        const internalSource = source;\n        if (walkProviderTree(internalSource, providersOut, [], dedup)) {\n            injectorTypesWithProviders || (injectorTypesWithProviders = []);\n            injectorTypesWithProviders.push(internalSource);\n        }\n    });\n    // Collect all providers from `ModuleWithProviders` types.\n    if (injectorTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(injectorTypesWithProviders, providersOut);\n    }\n    return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, providersOut) {\n    for (let i = 0; i < typesWithProviders.length; i++) {\n        const { ngModule, providers } = typesWithProviders[i];\n        deepForEach(providers, provider => {\n            ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n            providersOut.push(provider);\n        });\n    }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, providersOut, parents, dedup) {\n    container = resolveForwardRef(container);\n    if (!container)\n        return false;\n    // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n    // from `InjectorTypeWithProviders`.\n    let defType = null;\n    let injDef = getInjectorDef(container);\n    const cmpDef = !injDef && getComponentDef$1(container);\n    if (!injDef && !cmpDef) {\n        // `container` is not an injector type or a component type. It might be:\n        //  * An `InjectorTypeWithProviders` that wraps an injector type.\n        //  * A standalone directive or pipe that got pulled in from a standalone component's\n        //    dependencies.\n        // Try to unwrap it as an `InjectorTypeWithProviders` first.\n        const ngModule = container.ngModule;\n        injDef = getInjectorDef(ngModule);\n        if (injDef) {\n            defType = ngModule;\n        }\n        else {\n            // Not a component or injector type, so ignore it.\n            return false;\n        }\n    }\n    else if (cmpDef && !cmpDef.standalone) {\n        return false;\n    }\n    else {\n        defType = container;\n    }\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n        const defName = stringify(defType);\n        const path = parents.map(stringify);\n        throwCyclicDependencyError(defName, path);\n    }\n    // Check for multiple imports of the same module\n    const isDuplicate = dedup.has(defType);\n    if (cmpDef) {\n        if (isDuplicate) {\n            // This component definition has already been processed.\n            return false;\n        }\n        dedup.add(defType);\n        if (cmpDef.dependencies) {\n            const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n            for (const dep of deps) {\n                walkProviderTree(dep, providersOut, parents, dedup);\n            }\n        }\n    }\n    else if (injDef) {\n        // First, include providers from any imports.\n        if (injDef.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedup.add(defType);\n            let importTypesWithProviders;\n            try {\n                deepForEach(injDef.imports, imported => {\n                    if (walkProviderTree(imported, providersOut, parents, dedup)) {\n                        importTypesWithProviders || (importTypesWithProviders = []);\n                        // If the processed import is an injector type with providers, we store it in the\n                        // list of import types with providers, so that we can process those afterwards.\n                        importTypesWithProviders.push(imported);\n                    }\n                });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n            // Imports which are declared with providers (TypeWithProviders) need to be processed\n            // after all imported modules are processed. This is similar to how View Engine\n            // processes/merges module imports in the metadata resolver. See: FW-1349.\n            if (importTypesWithProviders !== undefined) {\n                processInjectorTypesWithProviders(importTypesWithProviders, providersOut);\n            }\n        }\n        if (!isDuplicate) {\n            // Track the InjectorType and add a provider for it.\n            // It's important that this is done after the def's imports.\n            const factory = getFactoryDef(defType) || (() => new defType());\n            // Append extra providers to make more info available for consumers (to retrieve an injector\n            // type), as well as internally (to calculate an injection scope correctly and eagerly\n            // instantiate a `defType` when an injector is created).\n            providersOut.push(\n            // Provider to create `defType` using its factory.\n            { provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, \n            // Make this `defType` available to an internal logic that calculates injector scope.\n            { provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, \n            // Provider to eagerly instantiate `defType` via `ENVIRONMENT_INITIALIZER`.\n            { provide: ENVIRONMENT_INITIALIZER, useValue: () => ɵɵinject(defType), multi: true } //\n            );\n        }\n        // Next, include providers listed on the definition itself.\n        const defProviders = injDef.providers;\n        if (defProviders != null && !isDuplicate) {\n            const injectorType = container;\n            deepForEach(defProviders, provider => {\n                ngDevMode && validateProvider(provider, defProviders, injectorType);\n                providersOut.push(provider);\n            });\n        }\n    }\n    else {\n        // Should not happen, but just in case.\n        return false;\n    }\n    return (defType !== container &&\n        container.providers !== undefined);\n}\nfunction validateProvider(provider, providers, containerType) {\n    if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) ||\n        isExistingProvider(provider)) {\n        return;\n    }\n    // Here we expect the provider to be a `useClass` provider (by elimination).\n    const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n    if (!classRef) {\n        throwInvalidProviderError(containerType, providers, provider);\n    }\n}\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\nfunction isExistingProvider(value) {\n    return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n    return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n    return !!value.useClass;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR$1 = undefined;\nfunction getNullInjector() {\n    if (NULL_INJECTOR$1 === undefined) {\n        NULL_INJECTOR$1 = new NullInjector();\n    }\n    return NULL_INJECTOR$1;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n *\n * @developerPreview\n */\nclass EnvironmentInjector {\n}\nclass R3Injector extends EnvironmentInjector {\n    constructor(providers, parent, source, scopes) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.scopes = scopes;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n         * to prevent further searches.\n         */\n        this.records = new Map();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this._ngOnDestroyHooks = new Set();\n        this._onDestroyHooks = [];\n        this._destroyed = false;\n        // Start off by creating Records for every provider.\n        forEachSingleProvider(providers, provider => this.processProvider(provider));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n        if (scopes.has('environment')) {\n            this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n        }\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        const record = this.records.get(INJECTOR_SCOPE);\n        if (record != null && typeof record.value === 'string') {\n            this.scopes.add(record.value);\n        }\n        this.injectorDefTypes =\n            new Set(this.get(INJECTOR_DEF_TYPES.multi, EMPTY_ARRAY, InjectFlags.Self));\n    }\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     */\n    get destroyed() {\n        return this._destroyed;\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            for (const service of this._ngOnDestroyHooks) {\n                service.ngOnDestroy();\n            }\n            for (const hook of this._onDestroyHooks) {\n                hook();\n            }\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this._ngOnDestroyHooks.clear();\n            this.injectorDefTypes.clear();\n            this._onDestroyHooks.length = 0;\n        }\n    }\n    onDestroy(callback) {\n        this._onDestroyHooks.push(callback);\n    }\n    runInContext(fn) {\n        this.assertNotDestroyed();\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            return fn();\n        }\n        finally {\n            setCurrentInjector(previousInjector);\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        // Set the injection context.\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an injectable\n                    // def with a scope matching this injector.\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                    }\n                    else {\n                        record = null;\n                    }\n                    this.records.set(token, record);\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record != null /* NOT null || undefined */) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n            // is undefined, the value is null, otherwise it's the notFoundValue.\n            notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n                null :\n                notFoundValue;\n            return nextInjector.get(token, notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, restore the previous injection context.\n            setInjectImplementation(previousInjectImplementation);\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /** @internal */\n    resolveInjectorInitializers() {\n        const previousInjector = setCurrentInjector(this);\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            const initializers = this.get(ENVIRONMENT_INITIALIZER.multi, EMPTY_ARRAY, InjectFlags.Self);\n            if (ngDevMode && !Array.isArray(initializers)) {\n                throw new RuntimeError(209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' +\n                    `(expected an array, but got ${typeof initializers}). ` +\n                    'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' +\n                    '`multi: true` provider.');\n            }\n            for (const initializer of initializers) {\n                initializer();\n            }\n        }\n        finally {\n            setCurrentInjector(previousInjector);\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    toString() {\n        const tokens = [];\n        const records = this.records;\n        for (const token of records.keys()) {\n            tokens.push(stringify(token));\n        }\n        return `R3Injector[${tokens.join(', ')}]`;\n    }\n    assertNotDestroyed() {\n        if (this._destroyed) {\n            throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     */\n    processProvider(provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        const record = providerToRecord(provider);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (ngDevMode && multiRecord.multi === undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = () => injectArgs(multiRecord.multi);\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            multiRecord.multi.push(provider);\n        }\n        else {\n            const existing = this.records.get(token);\n            if (ngDevMode && existing && existing.multi !== undefined) {\n                throwMixedMultiProviderError();\n            }\n        }\n        this.records.set(token, record);\n    }\n    hydrate(token, record) {\n        if (ngDevMode && record.value === CIRCULAR) {\n            throwCyclicDependencyError(stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = record.factory();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this._ngOnDestroyHooks.add(record.value);\n        }\n        return record.value;\n    }\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        const providedIn = resolveForwardRef(def.providedIn);\n        if (typeof providedIn === 'string') {\n            return providedIn === 'any' || (this.scopes.has(providedIn));\n        }\n        else {\n            return this.injectorDefTypes.has(providedIn);\n        }\n    }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n    // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n    const injectableDef = getInjectableDef(token);\n    const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n    if (factory !== null) {\n        return factory;\n    }\n    // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n    // If it's missing that, it's an error.\n    if (token instanceof InjectionToken) {\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n    }\n    // Undecorated types can sometimes be created if they have no constructor arguments.\n    if (token instanceof Function) {\n        return getUndecoratedInjectableFactory(token);\n    }\n    // There was no way to resolve a factory for this token.\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n    // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n    const paramLength = token.length;\n    if (paramLength > 0) {\n        const args = newArray(paramLength, '?');\n        throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n    }\n    // The constructor function appears to have no parameters.\n    // This might be because it inherits from a super-class. In which case, use an injectable\n    // def from an ancestor if there is one.\n    // Otherwise this really is a simple class with no dependencies, so return a factory that\n    // just instantiates the zero-arg constructor.\n    const inheritedInjectableDef = getInheritedInjectableDef(token);\n    if (inheritedInjectableDef !== null) {\n        return () => inheritedInjectableDef.factory(token);\n    }\n    else {\n        return () => new token();\n    }\n}\nfunction providerToRecord(provider) {\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        const factory = providerToFactory(provider);\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    let factory = undefined;\n    if (ngDevMode && isImportedNgModuleProviders(provider)) {\n        throwInvalidProviderError(undefined, providers, provider);\n    }\n    if (isTypeProvider(provider)) {\n        const unwrappedProvider = resolveForwardRef(provider);\n        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = () => resolveForwardRef(provider.useValue);\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n        }\n        else if (isExistingProvider(provider)) {\n            factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n        }\n        else {\n            const classRef = resolveForwardRef(provider &&\n                (provider.useClass || provider.provide));\n            if (ngDevMode && !classRef) {\n                throwInvalidProviderError(ngModuleType, providers, provider);\n            }\n            if (hasDeps(provider)) {\n                factory = () => new (classRef)(...injectArgs(provider.deps));\n            }\n            else {\n                return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\nfunction hasDeps(value) {\n    return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\nfunction isImportedNgModuleProviders(provider) {\n    return !!provider.ɵproviders;\n}\nfunction forEachSingleProvider(providers, fn) {\n    for (const provider of providers) {\n        if (Array.isArray(provider)) {\n            forEachSingleProvider(provider, fn);\n        }\n        else if (isImportedNgModuleProviders(provider)) {\n            forEachSingleProvider(provider.ɵproviders, fn);\n        }\n        else {\n            fn(provider);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nclass ComponentRef$1 {\n}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactory$1 {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noComponentFactoryError(component) {\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    error[ERROR_COMPONENT] = component;\n    return error;\n}\nconst ERROR_COMPONENT = 'ngComponent';\nfunction getComponent$1(error) {\n    return error[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactoryResolver$1 {\n}\nComponentFactoryResolver$1.NULL = ( /* @__PURE__ */new _NullComponentFactoryResolver());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef() {\n    return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n    return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    constructor(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n}\n/**\n * @internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = injectElementRef;\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nfunction unwrapElementRef(value) {\n    return value instanceof ElementRef ? value.nativeElement : value;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {\n}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nclass Renderer2 {\n}\n/**\n * @internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n    // We need the Renderer to be based on the component that it's being injected into, however since\n    // DI happens before we've entered its view, `getLView` will return the parent view instead.\n    const lView = getLView();\n    const tNode = getCurrentTNode();\n    const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n    return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nclass Sanitizer {\n}\n/** @nocollapse */\nSanitizer.ɵprov = ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null,\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\n/**\n * @publicApi\n */\nconst VERSION = new Version('14.2.2');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n    shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n    return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n    shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n    return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n    // execute the check below.\n    if (schemas === null)\n        return;\n    // If the element matches any directive, it's considered as valid.\n    if (!hasDirectives && tagName !== null) {\n        // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n        // as a custom element. Note that unknown elements with a dash in their name won't be instances\n        // of HTMLUnknownElement in browsers that support web components.\n        const isUnknown = \n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,\n        // because while most browsers return 'function', IE returns 'object'.\n        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n            element instanceof HTMLUnknownElement) ||\n            (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n                !customElements.get(tagName));\n        if (isUnknown && !matchingSchemas(schemas, tagName)) {\n            const isHostStandalone = isHostComponentStandalone(lView);\n            const templateLocation = getTemplateLocationDetails(lView);\n            const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n            let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n            message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n                'a part of an @NgModule where this component is declared'}.\\n`;\n            if (tagName && tagName.indexOf('-') > -1) {\n                message +=\n                    `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n            }\n            else {\n                message +=\n                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n            }\n            if (shouldThrowErrorOnUnknownElement) {\n                throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n            }\n            else {\n                console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n            }\n        }\n    }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n    // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n    // execute the check below.\n    if (schemas === null)\n        return true;\n    // The property is considered valid if the element matches the schema, it exists on the element,\n    // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n    if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n        return true;\n    }\n    // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we\n    // need to account for both here, while being careful with `typeof null` also returning 'object'.\n    return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n    // Special-case a situation when a structural directive is applied to\n    // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n    // In this case the compiler generates the `ɵɵtemplate` instruction with\n    // the `null` as the tagName. The directive matching logic at runtime relies\n    // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n    // a default value of the `tNode.value` is not feasible at this moment.\n    if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n        tagName = 'ng-template';\n    }\n    const isHostStandalone = isHostComponentStandalone(lView);\n    const templateLocation = getTemplateLocationDetails(lView);\n    let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n    const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n    const importLocation = isHostStandalone ?\n        'included in the \\'@Component.imports\\' of this component' :\n        'a part of an @NgModule where this component is declared';\n    if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n        // Most likely this is a control flow directive (such as `*ngIf`) used in\n        // a template, but the directive or the `CommonModule` is not imported.\n        const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n        message += `\\nIf the '${propName}' is an Angular control flow directive, ` +\n            `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n    }\n    else {\n        // May be an Angular component, which is not imported/declared?\n        message += `\\n1. If '${tagName}' is an Angular component and it has the ` +\n            `'${propName}' input, then verify that it is ${importLocation}.`;\n        // May be a Web Component?\n        if (tagName && tagName.indexOf('-') > -1) {\n            message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` +\n                `to the ${schemas} of this component to suppress this message.`;\n            message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n                `the ${schemas} of this component.`;\n        }\n        else {\n            // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n            message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n                `the ${schemas} of this component.`;\n        }\n    }\n    reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n    if (shouldThrowErrorOnUnknownProperty) {\n        throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n    }\n    else {\n        console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n    }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    // Unable to obtain a context.\n    if (!context)\n        return null;\n    return context.constructor ? getComponentDef$1(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const componentDef = getDeclarationComponentDef(lView);\n    // Treat host component as non-standalone if we can't obtain the def.\n    return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n    !ngDevMode && throwError('Must never be called in production mode');\n    const hostComponentDef = getDeclarationComponentDef(lView);\n    const componentClassName = hostComponentDef?.type?.name;\n    return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([\n    ['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'],\n    ['ngSwitchDefault', 'NgSwitchDefault']\n]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n    if (schemas !== null) {\n        for (let i = 0; i < schemas.length; i++) {\n            const schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nfunction wrappedError(message, originalError) {\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    const error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\nfunction getOriginalError(error) {\n    return error[ERROR_ORIGINAL_ERROR];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * @internal\n         */\n        this._console = console;\n    }\n    handleError(error) {\n        const originalError = this._findOriginalError(error);\n        this._console.error('ERROR', error);\n        if (originalError) {\n            this._console.error('ORIGINAL ERROR', originalError);\n        }\n    }\n    /** @internal */\n    _findOriginalError(error) {\n        let e = error && getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n    return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n    return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n    ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n    TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n    ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n    return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n    ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n    TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n    constructor(\n    /**\n     * ID of the component's parent view data.\n     */\n    lViewId, \n    /**\n     * The index instance of the node.\n     */\n    nodeIndex, \n    /**\n     * The instance of the DOM node that is attached to the lNode.\n     */\n    native) {\n        this.lViewId = lViewId;\n        this.nodeIndex = nodeIndex;\n        this.native = native;\n    }\n    /** Component's parent view data. */\n    get lView() {\n        return getLViewById(this.lViewId);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (isLView(mpValue)) {\n            const lView = mpValue;\n            let nodeIndex;\n            let component = undefined;\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, target);\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            const native = unwrapRNode(lView[nodeIndex]);\n            const existingCtx = readPatchedData(native);\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        const rElement = target;\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        let parent = rElement;\n        while (parent = parent.parentNode) {\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    const native = unwrapRNode(lView[index]);\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    let patchedData = readPatchedData(componentInstance);\n    let lView;\n    if (isLView(patchedData)) {\n        const contextLView = patchedData;\n        const nodeIndex = findViaComponent(contextLView, componentInstance);\n        lView = getComponentLViewByIndex(nodeIndex, contextLView);\n        const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        const context = patchedData;\n        const contextLView = context.lView;\n        ngDevMode && assertLView(contextLView);\n        lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n    }\n    return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n    // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n    // we can't know when to remove an `LContext`.\n    if (isLView(data)) {\n        target[MONKEY_PATCH_KEY_NAME] = data[ID];\n        registerLView(data);\n    }\n    else {\n        target[MONKEY_PATCH_KEY_NAME] = data;\n    }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    const data = target[MONKEY_PATCH_KEY_NAME];\n    return (typeof data === 'number') ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n    const value = readPatchedData(target);\n    if (value) {\n        return (isLView(value) ? value : value.lView);\n    }\n    return null;\n}\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n    const tView = lView[TVIEW];\n    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n        if (unwrapRNode(lView[i]) === target) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            const elementComponentIndex = componentIndices[i];\n            const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        const directiveIndexStart = tNode.directiveStart;\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    let directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    const directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 2 /* TNodeFlags.isComponentHost */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    let directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 2 /* TNodeFlags.isComponentHost */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    const tNode = lView[TVIEW].data[nodeIndex];\n    if (tNode && tNode.localNames) {\n        const result = {};\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n    assertComponentDef(type);\n    const componentDef = getComponentDef$1(type);\n    if (!componentDef.standalone) {\n        throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` +\n            `but Angular expects to have a standalone component here. ` +\n            `Please make sure the ${stringifyForError(type)} component has ` +\n            `the \\`standalone: true\\` flag in the decorator.`);\n    }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n    if (!getComponentDef$1(type)) {\n        throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` +\n            `make sure it has the \\`@Component\\` decorator.`);\n    }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n    throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` +\n        `${stringifyForError(first)} and ` +\n        `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {\n    const field = propName ? ` for '${propName}'` : '';\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook?`;\n    }\n    throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n    const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n    let oldValue = prefix, newValue = prefix;\n    for (let i = 0; i < chunks.length; i++) {\n        const slotIdx = rootIndex + i;\n        oldValue += `${lView[slotIdx]}${chunks[i]}`;\n        newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n    }\n    return { propName, oldValue, newValue };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n    const tData = lView[TVIEW].data;\n    const metadata = tData[bindingIndex];\n    if (typeof metadata === 'string') {\n        // metadata for property interpolation\n        if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n        }\n        // metadata for property binding\n        return { propName: metadata, oldValue, newValue };\n    }\n    // metadata is not available for this expression, check if this expression is a part of the\n    // property interpolation by going from the current binding index left and look for a string that\n    // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n    // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n    if (metadata === null) {\n        let idx = bindingIndex - 1;\n        while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n            idx--;\n        }\n        const meta = tData[idx];\n        if (typeof meta === 'string') {\n            const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n            // first interpolation delimiter separates property name from interpolation parts (in case of\n            // property interpolations), so we subtract one from total number of found delimiters\n            if (matches && (matches.length - 1) > bindingIndex - idx) {\n                return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n            }\n        }\n    }\n    return { propName: undefined, oldValue, newValue };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n    // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n    // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n    // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n    /**\n     * Marks a style as important.\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n    return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n    if (_icuContainerIterate === undefined) {\n        // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n        // can be inlined into call-site.\n        _icuContainerIterate = loader();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$4 = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$3 = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    const parent = lView[PARENT];\n    return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n    while (lView && !(lView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n        lView = getLViewParent(lView);\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n    return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n    return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n    return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n    while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n        viewOrContainer = viewOrContainer[NEXT];\n    }\n    return viewOrContainer;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$8;\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n    // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n    // won't be created until i18nApply() in the update block, so this node should be skipped.\n    // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n    // in `i18n_spec.ts`.\n    if (lNodeToHandle != null) {\n        let lContainer;\n        let isComponent = false;\n        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n        // it has LContainer so that we can process all of those cases appropriately.\n        if (isLContainer(lNodeToHandle)) {\n            lContainer = lNodeToHandle;\n        }\n        else if (isLView(lNodeToHandle)) {\n            isComponent = true;\n            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n            lNodeToHandle = lNodeToHandle[HOST];\n        }\n        const rNode = unwrapRNode(lNodeToHandle);\n        if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n            if (beforeNode == null) {\n                nativeAppendChild(renderer, parent, rNode);\n            }\n            else {\n                nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n            }\n        }\n        else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n            nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n        }\n        else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n            nativeRemoveNode(renderer, rNode, isComponent);\n        }\n        else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n            ngDevMode && ngDevMode.rendererDestroyNode++;\n            renderer.destroyNode(rNode);\n        }\n        if (lContainer != null) {\n            applyContainer(renderer, action, lContainer, parent, beforeNode);\n        }\n    }\n}\nfunction createTextNode(renderer, value) {\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    ngDevMode && ngDevMode.rendererSetText++;\n    return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n    ngDevMode && ngDevMode.rendererSetText++;\n    renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromContainer(tView, lView) {\n    const renderer = lView[RENDERER];\n    applyView(tView, lView, renderer, 2 /* WalkTNodeTreeAction.Detach */, null, null);\n    lView[HOST] = null;\n    lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n    lView[HOST] = parentNativeNode;\n    lView[T_HOST] = parentTNode;\n    applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction renderDetachView(tView, lView) {\n    applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    let lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView[TVIEW], rootView);\n    }\n    while (lViewOrLContainer) {\n        let next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n            if (firstView)\n                next = firstView;\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                if (isLView(lViewOrLContainer)) {\n                    cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n                }\n                lViewOrLContainer = lViewOrLContainer[PARENT];\n            }\n            if (lViewOrLContainer === null)\n                lViewOrLContainer = rootView;\n            if (isLView(lViewOrLContainer)) {\n                cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n            }\n            next = lViewOrLContainer && lViewOrLContainer[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n    const containerLength = lContainer.length;\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        lContainer[indexInContainer - 1][NEXT] = lView;\n    }\n    if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n        lView[NEXT] = lContainer[indexInContainer];\n        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n    }\n    else {\n        lContainer.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // track views where declaration and insertion points are different\n    const declarationLContainer = lView[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n        trackMovedView(declarationLContainer, lView);\n    }\n    // notify query that a new view has been added\n    const lQueries = lView[QUERIES];\n    if (lQueries !== null) {\n        lQueries.insertView(tView);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer, lView) {\n    ngDevMode && assertDefined(lView, 'LView required');\n    ngDevMode && assertLContainer(declarationContainer);\n    const movedViews = declarationContainer[MOVED_VIEWS];\n    const insertedLContainer = lView[PARENT];\n    ngDevMode && assertLContainer(insertedLContainer);\n    const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n        // At this point the declaration-component is not same as insertion-component; this means that\n        // this is a transplanted view. Mark the declared lView as having transplanted views so that\n        // those views can participate in CD.\n        declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n    }\n    if (movedViews === null) {\n        declarationContainer[MOVED_VIEWS] = [lView];\n    }\n    else {\n        movedViews.push(lView);\n    }\n}\nfunction detachMovedView(declarationContainer, lView) {\n    ngDevMode && assertLContainer(declarationContainer);\n    ngDevMode &&\n        assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n    const movedViews = declarationContainer[MOVED_VIEWS];\n    const declarationViewIndex = movedViews.indexOf(lView);\n    const insertionLContainer = lView[PARENT];\n    ngDevMode && assertLContainer(insertionLContainer);\n    // If the view was marked for refresh but then detached before it was checked (where the flag\n    // would be cleared and the counter decremented), we need to decrement the view counter here\n    // instead.\n    if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n        lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n        updateTransplantedViewCount(insertionLContainer, -1);\n    }\n    movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n    if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n        return;\n    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n    const viewToDetach = lContainer[indexInContainer];\n    if (viewToDetach) {\n        const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n        if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n            detachMovedView(declarationLContainer, viewToDetach);\n        }\n        if (removeIndex > 0) {\n            lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n        }\n        const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n        removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n        // notify query that a view has been removed\n        const lQueries = removedLView[QUERIES];\n        if (lQueries !== null) {\n            lQueries.detachView(removedLView[TVIEW]);\n        }\n        viewToDetach[PARENT] = null;\n        viewToDetach[NEXT] = null;\n        // Unsets the attached flag\n        viewToDetach[FLAGS] &= ~64 /* LViewFlags.Attached */;\n    }\n    return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n    if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n        const renderer = lView[RENDERER];\n        if (renderer.destroyNode) {\n            applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n        }\n        destroyViewTree(lView);\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n    if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        lView[FLAGS] |= 128 /* LViewFlags.Destroyed */;\n        executeOnDestroys(tView, lView);\n        processCleanups(tView, lView);\n        // For component views only, the local renderer is destroyed at clean up time.\n        if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            lView[RENDERER].destroy();\n        }\n        const declarationContainer = lView[DECLARATION_LCONTAINER];\n        // we are dealing with an embedded view that is still inserted into a container\n        if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n            // and this is a projected view\n            if (declarationContainer !== lView[PARENT]) {\n                detachMovedView(declarationContainer, lView);\n            }\n            // For embedded views still attached to a container: remove query result from this view.\n            const lQueries = lView[QUERIES];\n            if (lQueries !== null) {\n                lQueries.detachView(tView);\n            }\n        }\n        // Unregister the view once everything else has been cleaned up.\n        unregisterLView(lView);\n    }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n    const tCleanup = tView.cleanup;\n    const lCleanup = lView[CLEANUP];\n    // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n    // information appended at the end. We need to know where the end of the `TCleanup` information\n    // is, and we track this with `lastLCleanupIndex`.\n    let lastLCleanupIndex = -1;\n    if (tCleanup !== null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a native DOM listener\n                const idxOrTargetGetter = tCleanup[i + 1];\n                const target = typeof idxOrTargetGetter === 'function' ?\n                    idxOrTargetGetter(lView) :\n                    unwrapRNode(lView[idxOrTargetGetter]);\n                const listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];\n                const useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // native DOM listener registered with Renderer3\n                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n    }\n    if (lCleanup !== null) {\n        for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n            const instanceCleanupFn = lCleanup[i];\n            ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n            instanceCleanupFn();\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (let i = 0; i < destroyHooks.length; i += 2) {\n            const context = lView[destroyHooks[i]];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                const toCall = destroyHooks[i + 1];\n                if (Array.isArray(toCall)) {\n                    for (let j = 0; j < toCall.length; j += 2) {\n                        const callContext = context[toCall[j]];\n                        const hook = toCall[j + 1];\n                        profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n                        try {\n                            hook.call(callContext);\n                        }\n                        finally {\n                            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n                        }\n                    }\n                }\n                else {\n                    profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n                    try {\n                        toCall.call(context);\n                    }\n                    finally {\n                        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n    return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n    let parentTNode = tNode;\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    while (parentTNode !== null &&\n        (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */))) {\n        tNode = parentTNode;\n        parentTNode = tNode.parent;\n    }\n    // If the parent tNode is null, then we are inserting across views: either into an embedded view\n    // or a component view.\n    if (parentTNode === null) {\n        // We are inserting a root element of the component view into the component host element and\n        // it should always be eager.\n        return lView[HOST];\n    }\n    else {\n        ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        if (parentTNode.flags & 2 /* TNodeFlags.isComponentHost */) {\n            ngDevMode && assertTNodeForLView(parentTNode, lView);\n            const encapsulation = tView.data[parentTNode.directiveStart].encapsulation;\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation === ViewEncapsulation.None ||\n                encapsulation === ViewEncapsulation.Emulated) {\n                return null;\n            }\n        }\n        return getNativeByTNode(parentTNode, lView);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n    ngDevMode && ngDevMode.rendererInsertBefore++;\n    renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n    ngDevMode && ngDevMode.rendererAppendChild++;\n    ngDevMode && assertDefined(parent, 'parent node must be defined');\n    renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n    if (beforeNode !== null) {\n        nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node) {\n    return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n    return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n    return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n    return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n    if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n    _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n    _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n    const parentRNode = getParentRElement(tView, childTNode, lView);\n    const renderer = lView[RENDERER];\n    const parentTNode = childTNode.parent || lView[T_HOST];\n    const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n    if (parentRNode != null) {\n        if (Array.isArray(childRNode)) {\n            for (let i = 0; i < childRNode.length; i++) {\n                nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n        }\n    }\n    _processI18nInsertBefore !== undefined &&\n        _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n    if (tNode !== null) {\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */);\n        const tNodeType = tNode.type;\n        if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n            return getNativeByTNode(tNode, lView);\n        }\n        else if (tNodeType & 4 /* TNodeType.Container */) {\n            return getBeforeNodeForView(-1, lView[tNode.index]);\n        }\n        else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n            const elIcuContainerChild = tNode.child;\n            if (elIcuContainerChild !== null) {\n                return getFirstNativeNode(lView, elIcuContainerChild);\n            }\n            else {\n                const rNodeOrLContainer = lView[tNode.index];\n                if (isLContainer(rNodeOrLContainer)) {\n                    return getBeforeNodeForView(-1, rNodeOrLContainer);\n                }\n                else {\n                    return unwrapRNode(rNodeOrLContainer);\n                }\n            }\n        }\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\n            let nextRNode = icuContainerIterate(tNode, lView);\n            let rNode = nextRNode();\n            // If the ICU container has no nodes, than we use the ICU anchor as the node.\n            return rNode || unwrapRNode(lView[tNode.index]);\n        }\n        else {\n            const projectionNodes = getProjectionNodes(lView, tNode);\n            if (projectionNodes !== null) {\n                if (Array.isArray(projectionNodes)) {\n                    return projectionNodes[0];\n                }\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n                ngDevMode && assertParentView(parentView);\n                return getFirstNativeNode(parentView, projectionNodes);\n            }\n            else {\n                return getFirstNativeNode(lView, tNode.next);\n            }\n        }\n    }\n    return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n    if (tNode !== null) {\n        const componentView = lView[DECLARATION_COMPONENT_VIEW];\n        const componentHost = componentView[T_HOST];\n        const slotIdx = tNode.projection;\n        ngDevMode && assertProjectionSlots(lView);\n        return componentHost.projection[slotIdx];\n    }\n    return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n    if (nextViewIndex < lContainer.length) {\n        const lView = lContainer[nextViewIndex];\n        const firstTNodeOfView = lView[TVIEW].firstChild;\n        if (firstTNodeOfView !== null) {\n            return getFirstNativeNode(lView, firstTNodeOfView);\n        }\n    }\n    return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n    const nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n    while (tNode != null) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n        const rawSlotValue = lView[tNode.index];\n        const tNodeType = tNode.type;\n        if (isProjection) {\n            if (action === 0 /* WalkTNodeTreeAction.Create */) {\n                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n                tNode.flags |= 4 /* TNodeFlags.isProjected */;\n            }\n        }\n        if ((tNode.flags & 64 /* TNodeFlags.isDetached */) !== 64 /* TNodeFlags.isDetached */) {\n            if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n                applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n            else if (tNodeType & 32 /* TNodeType.Icu */) {\n                const nextRNode = icuContainerIterate(tNode, lView);\n                let rNode;\n                while (rNode = nextRNode()) {\n                    applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n                }\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n            else if (tNodeType & 16 /* TNodeType.Projection */) {\n                applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n            }\n            else {\n                ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n                applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n            }\n        }\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\n    }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n    applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n    const renderer = lView[RENDERER];\n    const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n    const parentTNode = tProjectionNode.parent || lView[T_HOST];\n    let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n    applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentNode = componentLView[T_HOST];\n    ngDevMode &&\n        assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n    const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n    if (Array.isArray(nodeToProjectOrRNodes)) {\n        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n        // need to support passing projectable nodes, so we cheat and put them in the TNode\n        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n        // because we know that that TView is not shared and therefore it will not be a problem.\n        // This should be refactored and cleaned up.\n        for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n            const rNode = nodeToProjectOrRNodes[i];\n            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n    }\n    else {\n        let nodeToProject = nodeToProjectOrRNodes;\n        const projectedComponentLView = componentLView[PARENT];\n        applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n    }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n    ngDevMode && assertLContainer(lContainer);\n    const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n    const native = unwrapRNode(lContainer);\n    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n    // node (comment in the DOM) that will be different from the LContainer's host node. In this\n    // particular case we need to execute action on 2 nodes:\n    // - container's host node (this is done in the executeActionOnElementOrContainer)\n    // - container's host node (this is done here)\n    if (anchor !== native) {\n        // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n        // don't see a reason why they should be different, but they are.\n        //\n        // If they are we need to process the second anchor as well.\n        applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n    }\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n        const lView = lContainer[i];\n        applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n    }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n    if (isClassBased) {\n        // We actually want JS true/false here because any truthy value should add the class\n        if (!value) {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            renderer.removeClass(rNode, prop);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            renderer.addClass(rNode, prop);\n        }\n    }\n    else {\n        let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n        if (value == null /** || value === undefined */) {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            renderer.removeStyle(rNode, prop, flags);\n        }\n        else {\n            // A value is important if it ends with `!important`. The style\n            // parser strips any semicolons at the end of the value.\n            const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n            if (isImportant) {\n                // !important has to be stripped from the value for it to be valid.\n                value = value.slice(0, -10);\n                flags |= RendererStyleFlags2.Important;\n            }\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            renderer.setStyle(rNode, prop, value, flags);\n        }\n    }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n    ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n    renderer.setAttribute(element, 'style', newValue);\n    ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n    ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n    if (newValue === '') {\n        // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n        renderer.removeAttribute(element, 'class');\n    }\n    else {\n        renderer.setAttribute(element, 'class', newValue);\n    }\n    ngDevMode && ngDevMode.rendererSetClassName++;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n    ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n    let end = className.length;\n    while (true) {\n        const foundIndex = className.indexOf(classToSearch, startingIndex);\n        if (foundIndex === -1)\n            return foundIndex;\n        if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n            // Ensure that it has leading whitespace\n            const length = classToSearch.length;\n            if (foundIndex + length === end ||\n                className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n                // Ensure that it has trailing whitespace\n                return foundIndex;\n            }\n        }\n        // False positive, keep searching from where we left off.\n        startingIndex = foundIndex + 1;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$4;\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n    // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n    // It is strange to me that sometimes the class information comes in form of `class` attribute\n    // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n    // if that is the right behavior.\n    ngDevMode &&\n        assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n    let i = 0;\n    while (i < attrs.length) {\n        let item = attrs[i++];\n        if (isProjectionMode && item === 'class') {\n            item = attrs[i];\n            if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {\n                return true;\n            }\n        }\n        else if (item === 1 /* AttributeMarker.Classes */) {\n            // We found the classes section. Start searching for the class.\n            while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n                // while we have strings\n                if (item.toLowerCase() === cssClassToMatch)\n                    return true;\n            }\n            return false;\n        }\n    }\n    return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n    return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n    return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    let mode = 4 /* SelectorFlags.ELEMENT */;\n    const nodeAttrs = tNode.attrs || [];\n    // Find the index of first attribute that has no value, only a name.\n    const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = current | (mode & 1 /* SelectorFlags.NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* SelectorFlags.ELEMENT */) {\n            mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            const selectorAttrValue = mode & 8 /* SelectorFlags.CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* SelectorFlags.CLASS */) && tNode.attrs !== null) {\n                if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            const attrName = (mode & 8 /* SelectorFlags.CLASS */) ? 'class' : current;\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                let nodeAttrValue;\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode &&\n                        assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    // we lowercase the attribute value to be able to match\n                    // selectors without case-sensitivity\n                    // (selectors are already in lowercase when generated)\n                    nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n                }\n                const compareAgainstClassName = mode & 8 /* SelectorFlags.CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 ||\n                    mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n    return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n    if (attrs === null)\n        return -1;\n    let i = 0;\n    if (isProjectionMode || !isInlineTemplate) {\n        let bindingsMode = false;\n        while (i < attrs.length) {\n            const maybeAttrName = attrs[i];\n            if (maybeAttrName === name) {\n                return i;\n            }\n            else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n                bindingsMode = true;\n            }\n            else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n                let value = attrs[++i];\n                // We should skip classes here because we have a separate mechanism for\n                // matching classes in projection mode.\n                while (typeof value === 'string') {\n                    value = attrs[++i];\n                }\n                continue;\n            }\n            else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n                // We do not care about Template attributes in this scenario.\n                break;\n            }\n            else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n                // Skip the whole namespaced attribute and value. This is by design.\n                i += 4;\n                continue;\n            }\n            // In binding mode there are only names, rather than name-value pairs.\n            i += bindingsMode ? 1 : 2;\n        }\n        // We did not match the attribute\n        return -1;\n    }\n    else {\n        return matchTemplateAttribute(attrs, name);\n    }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\n        }\n    }\n    return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n    for (let i = 0; i < nodeAttrs.length; i++) {\n        const nodeAttr = nodeAttrs[i];\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\n            return i;\n        }\n    }\n    return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n    let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n    if (i > -1) {\n        i++;\n        while (i < attrs.length) {\n            const attr = attrs[i];\n            // Return in case we checked all template attrs and are switching to the next section in the\n            // attrs array (that starts with a number that represents an attribute marker).\n            if (typeof attr === 'number')\n                return -1;\n            if (attr === name)\n                return i;\n            i++;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n    selectorListLoop: for (let i = 0; i < list.length; i++) {\n        const currentSelectorInList = list[i];\n        if (selector.length !== currentSelectorInList.length) {\n            continue;\n        }\n        for (let j = 0; j < selector.length; j++) {\n            if (selector[j] !== currentSelectorInList[j]) {\n                continue selectorListLoop;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n    return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n    let result = selector[0];\n    let i = 1;\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n    let currentChunk = '';\n    let isNegativeMode = false;\n    while (i < selector.length) {\n        let valueOrMarker = selector[i];\n        if (typeof valueOrMarker === 'string') {\n            if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n                const attrValue = selector[++i];\n                currentChunk +=\n                    '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n            }\n            else if (mode & 8 /* SelectorFlags.CLASS */) {\n                currentChunk += '.' + valueOrMarker;\n            }\n            else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n                currentChunk += ' ' + valueOrMarker;\n            }\n        }\n        else {\n            //\n            // Append current chunk to the final result in case we come across SelectorFlag, which\n            // indicates that the previous section of a selector is over. We need to accumulate content\n            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n            // ```\n            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n            // ```\n            // should be transformed to `.classA :not(.classB .classC)`.\n            //\n            // Note: for negative selector part, we accumulate content between flags until we find the\n            // next negative flag. This is needed to support a case where `:not()` rule contains more than\n            // one chunk, e.g. the following selector:\n            // ```\n            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n            // ```\n            // should be stringified to `:not(p.foo) :not(.bar)`\n            //\n            if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n                result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n                currentChunk = '';\n            }\n            mode = valueOrMarker;\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n            // mode is maintained for remaining chunks of a selector.\n            isNegativeMode = isNegativeMode || !isPositive(mode);\n        }\n        i++;\n    }\n    if (currentChunk !== '') {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n    }\n    return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n    return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n    const attrs = [];\n    const classes = [];\n    let i = 1;\n    let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n    while (i < selector.length) {\n        let valueOrMarker = selector[i];\n        if (typeof valueOrMarker === 'string') {\n            if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n                if (valueOrMarker !== '') {\n                    attrs.push(valueOrMarker, selector[++i]);\n                }\n            }\n            else if (mode === 8 /* SelectorFlags.CLASS */) {\n                classes.push(valueOrMarker);\n            }\n        }\n        else {\n            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n            // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n            // extracted only for \"positive\" part of the selector, we can stop here.\n            if (!isPositive(mode))\n                break;\n            mode = valueOrMarker;\n        }\n        i++;\n    }\n    return { attrs, classes };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = (typeof ngDevMode === 'undefined' || ngDevMode) ? { __brand__: 'NO_CHANGE' } : {};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta) {\n    ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n    selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n    ngDevMode && assertIndexInDeclRange(lView, index);\n    // Flush the initial hooks for elements in the view that have been added up to this point.\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!checkNoChangesMode) {\n        const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n        if (hooksInitPhaseCompleted) {\n            const preOrderCheckHooks = tView.preOrderCheckHooks;\n            if (preOrderCheckHooks !== null) {\n                executeCheckHooks(lView, preOrderCheckHooks, index);\n            }\n        }\n        else {\n            const preOrderHooks = tView.preOrderHooks;\n            if (preOrderHooks !== null) {\n                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n            }\n        }\n    }\n    // We must set the selected index *after* running the hooks, because hooks may have side-effects\n    // that cause other template functions to run, thus updating the selected index, which is global\n    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n    // will be altered by the time we leave the `ɵɵadvance` instruction.\n    setSelectedIndex(index);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    'resolveForwardRef': resolveForwardRef,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n    let ngInjectableDef = null;\n    let ngFactoryDef = null;\n    // if NG_PROV_DEF is already defined on this class then don't overwrite it\n    if (!type.hasOwnProperty(NG_PROV_DEF)) {\n        Object.defineProperty(type, NG_PROV_DEF, {\n            get: () => {\n                if (ngInjectableDef === null) {\n                    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'injectable', type });\n                    ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n                }\n                return ngInjectableDef;\n            },\n        });\n    }\n    // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n    if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n        Object.defineProperty(type, NG_FACTORY_DEF, {\n            get: () => {\n                if (ngFactoryDef === null) {\n                    const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'injectable', type });\n                    ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n                        name: type.name,\n                        type,\n                        typeArgumentCount: 0,\n                        deps: reflectDependencies(type),\n                        target: compiler.FactoryTarget.Injectable\n                    });\n                }\n                return ngFactoryDef;\n            },\n            // Leave this configurable so that the factories from directives or pipes can take precedence.\n            configurable: true\n        });\n    }\n}\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\nfunction isUseClassProvider(meta) {\n    return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n    return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n    return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n    // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n    const meta = srcMeta || { providedIn: null };\n    const compilerMeta = {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        providedIn: meta.providedIn,\n    };\n    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n        compilerMeta.deps = convertDependencies(meta.deps);\n    }\n    // Check to see if the user explicitly provided a `useXxxx` property.\n    if (isUseClassProvider(meta)) {\n        compilerMeta.useClass = meta.useClass;\n    }\n    else if (isUseValueProvider(meta)) {\n        compilerMeta.useValue = meta.useValue;\n    }\n    else if (isUseFactoryProvider(meta)) {\n        compilerMeta.useFactory = meta.useFactory;\n    }\n    else if (isUseExistingProvider(meta)) {\n        compilerMeta.useExisting = meta.useExisting;\n    }\n    return compilerMeta;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n    const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n    injector.resolveInjectorInitializers();\n    return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n    const providers = [\n        additionalProviders || EMPTY_ARRAY,\n        importProvidersFrom(defType),\n    ];\n    name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n    return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return createInjector({ name: '' }, parent, options, '');\n        }\n        else {\n            const name = options.name ?? '';\n            return createInjector({ name }, options.parent, options.providers, name);\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\nInjector.NULL = ( /* @__PURE__ */new NullInjector());\n/** @nocollapse */\nInjector.ɵprov = ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR),\n});\n/**\n * @internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction findFirstClosedCycle(keys) {\n    const res = [];\n    for (let i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        const reversed = findFirstClosedCycle(keys.slice().reverse());\n        const tokenStrs = reversed.map(k => stringify(k.token));\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    const keys = [key];\n    const errMsg = constructResolvingMessage(keys);\n    const error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        const first = stringify(keys[0].token);\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        const first = stringify(keys[0].token);\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n    }, originalException);\n}\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nfunction invalidProviderError(provider) {\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    const signature = [];\n    for (let i = 0, ii = params.length; i < ii; i++) {\n        const parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nfunction outOfBoundsError(index) {\n    return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nclass ReflectiveKey {\n    /**\n     * Private\n     */\n    constructor(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new RuntimeError(208 /* RuntimeErrorCode.MISSING_INJECTION_TOKEN */, ngDevMode && 'Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    static get(token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    }\n    /**\n     * @returns the number of keys registered in the system.\n     */\n    static get numberOfKeys() {\n        return _globalKeyRegistry.numberOfKeys;\n    }\n}\nclass KeyRegistry {\n    constructor() {\n        this._allKeys = new Map();\n    }\n    get(token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return this._allKeys.get(token);\n        }\n        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    }\n    get numberOfKeys() {\n        return this._allKeys.size;\n    }\n}\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n    constructor(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    static fromKey(key) {\n        return new ReflectiveDependency(key, false, null);\n    }\n}\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n    constructor(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nclass ResolvedReflectiveFactory {\n    constructor(\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     */\n    factory, \n    /**\n     * Arguments (dependencies) to the `factory` function.\n     */\n    dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n}\n/**\n * Resolve a single provider.\n */\nfunction resolveReflectiveFactory(provider) {\n    let factoryFn;\n    let resolvedDeps;\n    if (provider.useClass) {\n        const useClass = resolveForwardRef(provider.useClass);\n        factoryFn = getReflect().factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = (aliasInstance) => aliasInstance;\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = () => provider.useValue;\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n */\nfunction resolveReflectiveProviders(providers) {\n    const normalized = _normalizeProviders(providers, []);\n    const resolved = normalized.map(resolveReflectiveProvider);\n    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (let i = 0; i < providers.length; i++) {\n        const provider = providers[i];\n        const existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (let j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            let resolvedProvider;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(b => {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && b.provide !== undefined) {\n            res.push(b);\n        }\n        else if (Array.isArray(b)) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        const params = dependencies.map(t => [t]);\n        return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n    }\n}\nfunction _dependenciesFor(typeOrFunc) {\n    const params = getReflect().parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(p => p == null)) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(p => _extractToken(typeOrFunc, p, params));\n}\nfunction _extractToken(typeOrFunc, metadata, params) {\n    let token = null;\n    let optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    let visibility = null;\n    for (let i = 0; i < metadata.length; ++i) {\n        const paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Threshold for the dynamic version\nconst UNDEFINED = {};\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nclass ReflectiveInjector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    static resolve(providers) {\n        return resolveReflectiveProviders(providers);\n    }\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static resolveAndCreate(providers, parent) {\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    }\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    static fromResolvedProviders(providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    }\n}\nclass ReflectiveInjector_ {\n    /**\n     * Private\n     */\n    constructor(_providers, _parent) {\n        /** @internal */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        const len = _providers.length;\n        this.keyIds = [];\n        this.objs = [];\n        for (let i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    }\n    resolveAndCreateChild(providers) {\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    }\n    createChildFromResolved(providers) {\n        const inj = new ReflectiveInjector_(providers);\n        inj.parent = this;\n        return inj;\n    }\n    resolveAndInstantiate(provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    }\n    instantiateResolved(provider) {\n        return this._instantiateProvider(provider);\n    }\n    getProviderAtIndex(index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    }\n    /** @internal */\n    _new(provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    }\n    _getMaxNumberOfObjects() {\n        return this.objs.length;\n    }\n    _instantiateProvider(provider) {\n        if (provider.multiProvider) {\n            const res = [];\n            for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    }\n    _instantiate(provider, ResolvedReflectiveFactory) {\n        const factory = ResolvedReflectiveFactory.factory;\n        let deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        let obj;\n        try {\n            obj = factory(...deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    }\n    _getByReflectiveDependency(dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    }\n    _getByKey(key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    }\n    _getObjByKeyId(keyId) {\n        for (let i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    }\n    /** @internal */\n    _throwOrNull(key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    }\n    /** @internal */\n    _getByKeySelf(key, notFoundValue) {\n        const obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    }\n    /** @internal */\n    _getByKeyDefault(key, notFoundValue, visibility) {\n        let inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            const inj_ = inj;\n            const obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    }\n    get displayName() {\n        const providers = _mapProviders(this, (b) => ' \"' + b.key.displayName + '\" ')\n            .join(', ');\n        return `ReflectiveInjector(providers: [${providers}])`;\n    }\n    toString() {\n        return this.displayName;\n    }\n}\nReflectiveInjector_.INJECTOR_KEY = ( /* @__PURE__ */ReflectiveKey.get(Injector));\nfunction _mapProviders(injector, fn) {\n    const res = [];\n    for (let i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n    const lView = getLView();\n    // Fall back to inject() if view hasn't been created. This situation can happen in tests\n    // if inject utilities are used before bootstrapping.\n    if (lView === null) {\n        // Verify that we will not get into infinite loop.\n        ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n        return ɵɵinject(token, flags);\n    }\n    const tNode = getCurrentTNode();\n    return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n    const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n    throw new Error(msg);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!\n */\n/**\n * Creates an `Array` construction with a given name. This is useful when\n * looking for memory consumption to see what time of array it is.\n *\n *\n * @param name Name to give to the constructor\n * @returns A subclass of `Array` if possible. This can only be done in\n *          environments which support `class` construct.\n */\nfunction createNamedArrayType(name) {\n    // This should never be called in prod mode, so let's verify that is the case.\n    if (ngDevMode) {\n        try {\n            // If this function were compromised the following could lead to arbitrary\n            // script execution. We bless it with Trusted Types anyway since this\n            // function is stripped out of production binaries.\n            return (newTrustedFunctionForDev('Array', `return class ${name} extends Array{}`))(Array);\n        }\n        catch (e) {\n            // If it does not work just give up and fall back to regular Array.\n            return Array;\n        }\n    }\n    else {\n        throw new Error('Looks like we are in \\'prod mode\\', but we are creating a named Array type, which is wrong! Check your code');\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction toTStylingRange(prev, next) {\n    ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return (prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */);\n}\nfunction getTStylingRangePrev(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange >> 17 /* StylingRange.PREV_SHIFT */) & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) ==\n        2 /* StylingRange.PREV_DUPLICATE */;\n}\nfunction setTStylingRangePrev(tStylingRange, previous) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return ((tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */) |\n        (previous << 17 /* StylingRange.PREV_SHIFT */));\n}\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */);\n}\nfunction getTStylingRangeNext(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\nfunction setTStylingRangeNext(tStylingRange, next) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n    return ((tStylingRange & ~131068 /* StylingRange.NEXT_MASK */) | //\n        next << 2 /* StylingRange.NEXT_SHIFT */);\n}\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) ===\n        1 /* StylingRange.NEXT_DUPLICATE */;\n}\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    return (tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */);\n}\nfunction getTStylingRangeTail(tStylingRange) {\n    ngDevMode && assertNumber(tStylingRange, 'expected number');\n    const next = getTStylingRangeNext(tStylingRange);\n    return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Patch a `debug` property on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debug Value to patch\n */\nfunction attachDebugObject(obj, debug) {\n    if (ngDevMode) {\n        Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });\n    }\n    else {\n        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n    }\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n    if (ngDevMode) {\n        Object.defineProperty(obj, 'debug', { get: debugGetter, enumerable: false });\n    }\n    else {\n        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * This file contains conditionally attached classes which provide human readable (debug) level\n * information for `LView`, `LContainer` and other internal data structures. These data structures\n * are stored internally as array which makes it very difficult during debugging to reason about the\n * current state of the system.\n *\n * Patching the array with extra property does change the array's hidden class' but it does not\n * change the cost of access, therefore this patching should not have significant if any impact in\n * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n *\n * So instead of seeing:\n * ```\n * Array(30) [Object, 659, null, …]\n * ```\n *\n * You get to see:\n * ```\n * LViewDebug {\n *   views: [...],\n *   flags: {attached: true, ...}\n *   nodes: [\n *     {html: '<div id=\"123\">', ..., nodes: [\n *       {html: '<span>', ..., nodes: null}\n *     ]}\n *   ]\n * }\n * ```\n */\nlet LVIEW_COMPONENT_CACHE;\nlet LVIEW_EMBEDDED_CACHE;\nlet LVIEW_ROOT;\nlet LVIEW_COMPONENT;\nlet LVIEW_EMBEDDED;\n/**\n * This function clones a blueprint and creates LView.\n *\n * Simple slice will keep the same type, and we need it to be LView\n */\nfunction cloneToLViewFromTViewBlueprint(tView) {\n    const debugTView = tView;\n    const lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);\n    return lView.concat(tView.blueprint);\n}\nclass LRootView extends Array {\n}\nclass LComponentView extends Array {\n}\nclass LEmbeddedView extends Array {\n}\nfunction getLViewToClone(type, name) {\n    switch (type) {\n        case 0 /* TViewType.Root */:\n            if (LVIEW_ROOT === undefined)\n                LVIEW_ROOT = new LRootView();\n            return LVIEW_ROOT;\n        case 1 /* TViewType.Component */:\n            if (!ngDevMode || !ngDevMode.namedConstructors) {\n                if (LVIEW_COMPONENT === undefined)\n                    LVIEW_COMPONENT = new LComponentView();\n                return LVIEW_COMPONENT;\n            }\n            if (LVIEW_COMPONENT_CACHE === undefined)\n                LVIEW_COMPONENT_CACHE = new Map();\n            let componentArray = LVIEW_COMPONENT_CACHE.get(name);\n            if (componentArray === undefined) {\n                componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();\n                LVIEW_COMPONENT_CACHE.set(name, componentArray);\n            }\n            return componentArray;\n        case 2 /* TViewType.Embedded */:\n            if (!ngDevMode || !ngDevMode.namedConstructors) {\n                if (LVIEW_EMBEDDED === undefined)\n                    LVIEW_EMBEDDED = new LEmbeddedView();\n                return LVIEW_EMBEDDED;\n            }\n            if (LVIEW_EMBEDDED_CACHE === undefined)\n                LVIEW_EMBEDDED_CACHE = new Map();\n            let embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);\n            if (embeddedArray === undefined) {\n                embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();\n                LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);\n            }\n            return embeddedArray;\n    }\n}\nfunction nameSuffix(text) {\n    if (text == null)\n        return '';\n    const index = text.lastIndexOf('_Template');\n    return '_' + (index === -1 ? text : text.slice(0, index));\n}\n/**\n * This class is a debug version of Object literal so that we can have constructor name show up\n * in\n * debug tools in ngDevMode.\n */\nconst TViewConstructor = class TView {\n    constructor(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {\n        this.type = type;\n        this.blueprint = blueprint;\n        this.template = template;\n        this.queries = queries;\n        this.viewQuery = viewQuery;\n        this.declTNode = declTNode;\n        this.data = data;\n        this.bindingStartIndex = bindingStartIndex;\n        this.expandoStartIndex = expandoStartIndex;\n        this.hostBindingOpCodes = hostBindingOpCodes;\n        this.firstCreatePass = firstCreatePass;\n        this.firstUpdatePass = firstUpdatePass;\n        this.staticViewQueries = staticViewQueries;\n        this.staticContentQueries = staticContentQueries;\n        this.preOrderHooks = preOrderHooks;\n        this.preOrderCheckHooks = preOrderCheckHooks;\n        this.contentHooks = contentHooks;\n        this.contentCheckHooks = contentCheckHooks;\n        this.viewHooks = viewHooks;\n        this.viewCheckHooks = viewCheckHooks;\n        this.destroyHooks = destroyHooks;\n        this.cleanup = cleanup;\n        this.contentQueries = contentQueries;\n        this.components = components;\n        this.directiveRegistry = directiveRegistry;\n        this.pipeRegistry = pipeRegistry;\n        this.firstChild = firstChild;\n        this.schemas = schemas;\n        this.consts = consts;\n        this.incompleteFirstPass = incompleteFirstPass;\n        this._decls = _decls;\n        this._vars = _vars;\n    }\n    get template_() {\n        const buf = [];\n        processTNodeChildren(this.firstChild, buf);\n        return buf.join('');\n    }\n    get type_() {\n        return TViewTypeAsString[this.type] || `TViewType.?${this.type}?`;\n    }\n};\nclass TNode {\n    constructor(tView_, //\n    type, //\n    index, //\n    insertBeforeIndex, //\n    injectorIndex, //\n    directiveStart, //\n    directiveEnd, //\n    directiveStylingLast, //\n    propertyBindings, //\n    flags, //\n    providerIndexes, //\n    value, //\n    attrs, //\n    mergedAttrs, //\n    localNames, //\n    initialInputs, //\n    inputs, //\n    outputs, //\n    tViews, //\n    next, //\n    projectionNext, //\n    child, //\n    parent, //\n    projection, //\n    styles, //\n    stylesWithoutHost, //\n    residualStyles, //\n    classes, //\n    classesWithoutHost, //\n    residualClasses, //\n    classBindings, //\n    styleBindings) {\n        this.tView_ = tView_;\n        this.type = type;\n        this.index = index;\n        this.insertBeforeIndex = insertBeforeIndex;\n        this.injectorIndex = injectorIndex;\n        this.directiveStart = directiveStart;\n        this.directiveEnd = directiveEnd;\n        this.directiveStylingLast = directiveStylingLast;\n        this.propertyBindings = propertyBindings;\n        this.flags = flags;\n        this.providerIndexes = providerIndexes;\n        this.value = value;\n        this.attrs = attrs;\n        this.mergedAttrs = mergedAttrs;\n        this.localNames = localNames;\n        this.initialInputs = initialInputs;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.tViews = tViews;\n        this.next = next;\n        this.projectionNext = projectionNext;\n        this.child = child;\n        this.parent = parent;\n        this.projection = projection;\n        this.styles = styles;\n        this.stylesWithoutHost = stylesWithoutHost;\n        this.residualStyles = residualStyles;\n        this.classes = classes;\n        this.classesWithoutHost = classesWithoutHost;\n        this.residualClasses = residualClasses;\n        this.classBindings = classBindings;\n        this.styleBindings = styleBindings;\n    }\n    /**\n     * Return a human debug version of the set of `NodeInjector`s which will be consulted when\n     * resolving tokens from this `TNode`.\n     *\n     * When debugging applications, it is often difficult to determine which `NodeInjector`s will be\n     * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be\n     * consulted in order when resolving a token starting at this `TNode`.\n     *\n     * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is\n     * difficult to reason about.\n     *\n     * @param lView The `LView` instance for this `TNode`.\n     */\n    debugNodeInjectorPath(lView) {\n        const path = [];\n        let injectorIndex = getInjectorIndex(this, lView);\n        if (injectorIndex === -1) {\n            // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for\n            // parent NodeInjector.\n            const parentLocation = getParentInjectorLocation(this, lView);\n            if (parentLocation !== NO_PARENT_INJECTOR) {\n                // We found a parent, so start searching from the parent location.\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n            else {\n                // No parents have been found, so there are no `NodeInjector`s to consult.\n            }\n        }\n        while (injectorIndex !== -1) {\n            ngDevMode && assertNodeInjector(lView, injectorIndex);\n            const tNode = lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n            path.push(buildDebugNode(tNode, lView));\n            const parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n            if (parentLocation === NO_PARENT_INJECTOR) {\n                injectorIndex = -1;\n            }\n            else {\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n        }\n        return path;\n    }\n    get type_() {\n        return toTNodeTypeAsString(this.type) || `TNodeType.?${this.type}?`;\n    }\n    get flags_() {\n        const flags = [];\n        if (this.flags & 16 /* TNodeFlags.hasClassInput */)\n            flags.push('TNodeFlags.hasClassInput');\n        if (this.flags & 8 /* TNodeFlags.hasContentQuery */)\n            flags.push('TNodeFlags.hasContentQuery');\n        if (this.flags & 32 /* TNodeFlags.hasStyleInput */)\n            flags.push('TNodeFlags.hasStyleInput');\n        if (this.flags & 128 /* TNodeFlags.hasHostBindings */)\n            flags.push('TNodeFlags.hasHostBindings');\n        if (this.flags & 2 /* TNodeFlags.isComponentHost */)\n            flags.push('TNodeFlags.isComponentHost');\n        if (this.flags & 1 /* TNodeFlags.isDirectiveHost */)\n            flags.push('TNodeFlags.isDirectiveHost');\n        if (this.flags & 64 /* TNodeFlags.isDetached */)\n            flags.push('TNodeFlags.isDetached');\n        if (this.flags & 4 /* TNodeFlags.isProjected */)\n            flags.push('TNodeFlags.isProjected');\n        return flags.join('|');\n    }\n    get template_() {\n        if (this.type & 1 /* TNodeType.Text */)\n            return this.value;\n        const buf = [];\n        const tagName = typeof this.value === 'string' && this.value || this.type_;\n        buf.push('<', tagName);\n        if (this.flags) {\n            buf.push(' ', this.flags_);\n        }\n        if (this.attrs) {\n            for (let i = 0; i < this.attrs.length;) {\n                const attrName = this.attrs[i++];\n                if (typeof attrName == 'number') {\n                    break;\n                }\n                const attrValue = this.attrs[i++];\n                buf.push(' ', attrName, '=\"', attrValue, '\"');\n            }\n        }\n        buf.push('>');\n        processTNodeChildren(this.child, buf);\n        buf.push('</', tagName, '>');\n        return buf.join('');\n    }\n    get styleBindings_() {\n        return toDebugStyleBinding(this, false);\n    }\n    get classBindings_() {\n        return toDebugStyleBinding(this, true);\n    }\n    get providerIndexStart_() {\n        return this.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    }\n    get providerIndexEnd_() {\n        return this.providerIndexStart_ +\n            (this.providerIndexes >>> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */);\n    }\n}\nconst TNodeDebug = TNode;\nfunction toDebugStyleBinding(tNode, isClassBased) {\n    const tData = tNode.tView_.data;\n    const bindings = [];\n    const range = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    const prev = getTStylingRangePrev(range);\n    const next = getTStylingRangeNext(range);\n    let isTemplate = next !== 0;\n    let cursor = isTemplate ? next : prev;\n    while (cursor !== 0) {\n        const itemKey = tData[cursor];\n        const itemRange = tData[cursor + 1];\n        bindings.unshift({\n            key: itemKey,\n            index: cursor,\n            isTemplate: isTemplate,\n            prevDuplicate: getTStylingRangePrevDuplicate(itemRange),\n            nextDuplicate: getTStylingRangeNextDuplicate(itemRange),\n            nextIndex: getTStylingRangeNext(itemRange),\n            prevIndex: getTStylingRangePrev(itemRange),\n        });\n        if (cursor === prev)\n            isTemplate = false;\n        cursor = getTStylingRangePrev(itemRange);\n    }\n    bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);\n    return bindings;\n}\nfunction processTNodeChildren(tNode, buf) {\n    while (tNode) {\n        buf.push(tNode.template_);\n        tNode = tNode.next;\n    }\n}\nclass TViewData extends Array {\n}\nlet TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because\n// `LView` constructor could have side-effects.\n/**\n * This function clones a blueprint and creates TData.\n *\n * Simple slice will keep the same type, and we need it to be TData\n */\nfunction cloneToTViewData(list) {\n    if (TVIEWDATA_EMPTY === undefined)\n        TVIEWDATA_EMPTY = new TViewData();\n    return TVIEWDATA_EMPTY.concat(list);\n}\nclass LViewBlueprint extends Array {\n}\nclass MatchesArray extends Array {\n}\nclass TViewComponents extends Array {\n}\nclass TNodeLocalNames extends Array {\n}\nclass TNodeInitialInputs extends Array {\n}\nclass LCleanup extends Array {\n}\nclass TCleanup extends Array {\n}\nfunction attachLViewDebug(lView) {\n    attachDebugObject(lView, new LViewDebug(lView));\n}\nfunction attachLContainerDebug(lContainer) {\n    attachDebugObject(lContainer, new LContainerDebug(lContainer));\n}\nfunction toDebug(obj) {\n    if (obj) {\n        const debug = obj.debug;\n        assertDefined(debug, 'Object does not have a debug representation.');\n        return debug;\n    }\n    else {\n        return obj;\n    }\n}\n/**\n * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n * reading.\n *\n * @param value possibly wrapped native DOM node.\n * @param includeChildren If `true` then the serialized HTML form will include child elements\n * (same\n * as `outerHTML`). If `false` then the serialized HTML form will only contain the element\n * itself\n * (will not serialize child elements).\n */\nfunction toHtml(value, includeChildren = false) {\n    const node = unwrapRNode(value);\n    if (node) {\n        switch (node.nodeType) {\n            case Node.TEXT_NODE:\n                return node.textContent;\n            case Node.COMMENT_NODE:\n                return `<!--${node.textContent}-->`;\n            case Node.ELEMENT_NODE:\n                const outerHTML = node.outerHTML;\n                if (includeChildren) {\n                    return outerHTML;\n                }\n                else {\n                    const innerHTML = '>' + node.innerHTML + '<';\n                    return (outerHTML.split(innerHTML)[0]) + '>';\n                }\n        }\n    }\n    return null;\n}\nclass LViewDebug {\n    constructor(_raw_lView) {\n        this._raw_lView = _raw_lView;\n    }\n    /**\n     * Flags associated with the `LView` unpacked into a more readable state.\n     */\n    get flags() {\n        const flags = this._raw_lView[FLAGS];\n        return {\n            __raw__flags__: flags,\n            initPhaseState: flags & 3 /* LViewFlags.InitPhaseStateMask */,\n            creationMode: !!(flags & 4 /* LViewFlags.CreationMode */),\n            firstViewPass: !!(flags & 8 /* LViewFlags.FirstLViewPass */),\n            checkAlways: !!(flags & 16 /* LViewFlags.CheckAlways */),\n            dirty: !!(flags & 32 /* LViewFlags.Dirty */),\n            attached: !!(flags & 64 /* LViewFlags.Attached */),\n            destroyed: !!(flags & 128 /* LViewFlags.Destroyed */),\n            isRoot: !!(flags & 256 /* LViewFlags.IsRoot */),\n            indexWithinInitPhase: flags >> 11 /* LViewFlags.IndexWithinInitPhaseShift */,\n        };\n    }\n    get parent() {\n        return toDebug(this._raw_lView[PARENT]);\n    }\n    get hostHTML() {\n        return toHtml(this._raw_lView[HOST], true);\n    }\n    get html() {\n        return (this.nodes || []).map(mapToHTML).join('');\n    }\n    get context() {\n        return this._raw_lView[CONTEXT];\n    }\n    /**\n     * The tree of nodes associated with the current `LView`. The nodes have been normalized into\n     * a tree structure with relevant details pulled out for readability.\n     */\n    get nodes() {\n        const lView = this._raw_lView;\n        const tNode = lView[TVIEW].firstChild;\n        return toDebugNodes(tNode, lView);\n    }\n    get template() {\n        return this.tView.template_;\n    }\n    get tView() {\n        return this._raw_lView[TVIEW];\n    }\n    get cleanup() {\n        return this._raw_lView[CLEANUP];\n    }\n    get injector() {\n        return this._raw_lView[INJECTOR$1];\n    }\n    get rendererFactory() {\n        return this._raw_lView[RENDERER_FACTORY];\n    }\n    get renderer() {\n        return this._raw_lView[RENDERER];\n    }\n    get sanitizer() {\n        return this._raw_lView[SANITIZER];\n    }\n    get childHead() {\n        return toDebug(this._raw_lView[CHILD_HEAD]);\n    }\n    get next() {\n        return toDebug(this._raw_lView[NEXT]);\n    }\n    get childTail() {\n        return toDebug(this._raw_lView[CHILD_TAIL]);\n    }\n    get declarationView() {\n        return toDebug(this._raw_lView[DECLARATION_VIEW]);\n    }\n    get queries() {\n        return this._raw_lView[QUERIES];\n    }\n    get tHost() {\n        return this._raw_lView[T_HOST];\n    }\n    get id() {\n        return this._raw_lView[ID];\n    }\n    get decls() {\n        return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);\n    }\n    get vars() {\n        return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);\n    }\n    get expando() {\n        return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);\n    }\n    /**\n     * Normalized view of child views (and containers) attached at this location.\n     */\n    get childViews() {\n        const childViews = [];\n        let child = this.childHead;\n        while (child) {\n            childViews.push(child);\n            child = child.next;\n        }\n        return childViews;\n    }\n}\nfunction mapToHTML(node) {\n    if (node.type === 'ElementContainer') {\n        return (node.children || []).map(mapToHTML).join('');\n    }\n    else if (node.type === 'IcuContainer') {\n        throw new Error('Not implemented');\n    }\n    else {\n        return toHtml(node.native, true) || '';\n    }\n}\nfunction toLViewRange(tView, lView, start, end) {\n    let content = [];\n    for (let index = start; index < end; index++) {\n        content.push({ index: index, t: tView.data[index], l: lView[index] });\n    }\n    return { start: start, end: end, length: end - start, content: content };\n}\n/**\n * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n *\n * @param tNode\n * @param lView\n */\nfunction toDebugNodes(tNode, lView) {\n    if (tNode) {\n        const debugNodes = [];\n        let tNodeCursor = tNode;\n        while (tNodeCursor) {\n            debugNodes.push(buildDebugNode(tNodeCursor, lView));\n            tNodeCursor = tNodeCursor.next;\n        }\n        return debugNodes;\n    }\n    else {\n        return [];\n    }\n}\nfunction buildDebugNode(tNode, lView) {\n    const rawValue = lView[tNode.index];\n    const native = unwrapRNode(rawValue);\n    const factories = [];\n    const instances = [];\n    const tView = lView[TVIEW];\n    for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n        const def = tView.data[i];\n        factories.push(def.type);\n        instances.push(lView[i]);\n    }\n    return {\n        html: toHtml(native),\n        type: toTNodeTypeAsString(tNode.type),\n        tNode,\n        native: native,\n        children: toDebugNodes(tNode.child, lView),\n        factories,\n        instances,\n        injector: buildNodeInjectorDebug(tNode, tView, lView),\n        get injectorResolutionPath() {\n            return tNode.debugNodeInjectorPath(lView);\n        },\n    };\n}\nfunction buildNodeInjectorDebug(tNode, tView, lView) {\n    const viewProviders = [];\n    for (let i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {\n        viewProviders.push(tView.data[i]);\n    }\n    const providers = [];\n    for (let i = tNode.providerIndexEnd_; i < tNode.directiveEnd; i++) {\n        providers.push(tView.data[i]);\n    }\n    const nodeInjectorDebug = {\n        bloom: toBloom(lView, tNode.injectorIndex),\n        cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),\n        providers,\n        viewProviders,\n        parentInjectorIndex: lView[tNode.providerIndexStart_ - 1],\n    };\n    return nodeInjectorDebug;\n}\n/**\n * Convert a number at `idx` location in `array` into binary representation.\n *\n * @param array\n * @param idx\n */\nfunction binary(array, idx) {\n    const value = array[idx];\n    // If not a number we print 8 `?` to retain alignment but let user know that it was called on\n    // wrong type.\n    if (typeof value !== 'number')\n        return '????????';\n    // We prefix 0s so that we have constant length number\n    const text = '00000000' + value.toString(2);\n    return text.substring(text.length - 8);\n}\n/**\n * Convert a bloom filter at location `idx` in `array` into binary representation.\n *\n * @param array\n * @param idx\n */\nfunction toBloom(array, idx) {\n    if (idx < 0) {\n        return 'NO_NODE_INJECTOR';\n    }\n    return `${binary(array, idx + 7)}_${binary(array, idx + 6)}_${binary(array, idx + 5)}_${binary(array, idx + 4)}_${binary(array, idx + 3)}_${binary(array, idx + 2)}_${binary(array, idx + 1)}_${binary(array, idx + 0)}`;\n}\nclass LContainerDebug {\n    constructor(_raw_lContainer) {\n        this._raw_lContainer = _raw_lContainer;\n    }\n    get hasTransplantedViews() {\n        return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];\n    }\n    get views() {\n        return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)\n            .map(toDebug);\n    }\n    get parent() {\n        return toDebug(this._raw_lContainer[PARENT]);\n    }\n    get movedViews() {\n        return this._raw_lContainer[MOVED_VIEWS];\n    }\n    get host() {\n        return this._raw_lContainer[HOST];\n    }\n    get native() {\n        return this._raw_lContainer[NATIVE];\n    }\n    get next() {\n        return toDebug(this._raw_lContainer[NEXT]);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n    const hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null)\n        return;\n    try {\n        for (let i = 0; i < hostBindingOpCodes.length; i++) {\n            const opCode = hostBindingOpCodes[i];\n            if (opCode < 0) {\n                // Negative numbers are element indexes.\n                setSelectedIndex(~opCode);\n            }\n            else {\n                // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n                const directiveIdx = opCode;\n                const bindingRootIndx = hostBindingOpCodes[++i];\n                const hostBindingFn = hostBindingOpCodes[++i];\n                setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n                const context = lView[directiveIdx];\n                hostBindingFn(2 /* RenderFlags.Update */, context);\n            }\n        }\n    }\n    finally {\n        setSelectedIndex(-1);\n    }\n}\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n    const contentQueries = tView.contentQueries;\n    if (contentQueries !== null) {\n        for (let i = 0; i < contentQueries.length; i += 2) {\n            const queryStartIdx = contentQueries[i];\n            const directiveDefIdx = contentQueries[i + 1];\n            if (directiveDefIdx !== -1) {\n                const directiveDef = tView.data[directiveDefIdx];\n                ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n                ngDevMode &&\n                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                setCurrentQueryIndex(queryStartIdx);\n                directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n            }\n        }\n    }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView, components) {\n    for (let i = 0; i < components.length; i++) {\n        refreshComponent(hostLView, components[i]);\n    }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n    for (let i = 0; i < components.length; i++) {\n        renderComponent(hostLView, components[i]);\n    }\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector, embeddedViewInjector) {\n    const lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 64 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */;\n    if (embeddedViewInjector !== null ||\n        (parentLView && (parentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */))) {\n        lView[FLAGS] |= 1024 /* LViewFlags.HasEmbeddedViewInjector */;\n    }\n    resetPreOrderHookFlags(lView);\n    ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n    lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n    lView[T_HOST] = tHostNode;\n    lView[ID] = getUniqueLViewId();\n    lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n    ngDevMode &&\n        assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n    lView[DECLARATION_COMPONENT_VIEW] =\n        tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n    ngDevMode && attachLViewDebug(lView);\n    return lView;\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n        // `view_engine_compatibility` for additional context.\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n    // Keep this function short, so that the VM will inline it.\n    ngDevMode && assertPureTNodeType(type);\n    let tNode = tView.data[index];\n    if (tNode === null) {\n        tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n        if (isInI18nBlock()) {\n            // If we are in i18n block then all elements should be pre declared through `Placeholder`\n            // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n            // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n            // removed, so we mark it as detached.\n            tNode.flags |= 64 /* TNodeFlags.isDetached */;\n        }\n    }\n    else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n        tNode.type = type;\n        tNode.value = name;\n        tNode.attrs = attrs;\n        const parent = getCurrentParentTNode();\n        tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n        ngDevMode && assertTNodeForTView(tNode, tView);\n        ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n    }\n    setCurrentTNode(tNode, true);\n    return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n    const currentTNode = getCurrentTNodePlaceholderOk();\n    const isParent = isCurrentTNodeParent();\n    const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n    // Parents cannot cross component boundaries because components will be used in multiple places.\n    const tNode = tView.data[index] =\n        createTNode(tView, parent, type, index, name, attrs);\n    // Assign a pointer to the first child node of a given view. The first node is not always the one\n    // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n    // the index 1 or more, so we can't just check node index.\n    if (tView.firstChild === null) {\n        tView.firstChild = tNode;\n    }\n    if (currentTNode !== null) {\n        if (isParent) {\n            // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n            if (currentTNode.child == null && tNode.parent !== null) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                currentTNode.child = tNode;\n            }\n        }\n        else {\n            if (currentTNode.next === null) {\n                // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n                // to break the links which i18n created.\n                currentTNode.next = tNode;\n            }\n        }\n    }\n    return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n    if (numSlotsToAlloc === 0)\n        return -1;\n    if (ngDevMode) {\n        assertFirstCreatePass(tView);\n        assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n        assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n        assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n        assertFirstUpdatePass(tView);\n    }\n    const allocIdx = lView.length;\n    for (let i = 0; i < numSlotsToAlloc; i++) {\n        lView.push(initialValue);\n        tView.blueprint.push(initialValue);\n        tView.data.push(null);\n    }\n    return allocIdx;\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n    ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n    enterView(lView);\n    try {\n        const viewQuery = tView.viewQuery;\n        if (viewQuery !== null) {\n            executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n        }\n        // Execute a template associated with this view, if it exists. A template function might not be\n        // defined for the root component views.\n        const templateFn = tView.template;\n        if (templateFn !== null) {\n            executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n        }\n        // This needs to be set before children are processed to support recursive components.\n        // This must be set to false immediately after the first creation run because in an\n        // ngFor loop, all the views will be created together before update mode runs and turns\n        // off firstCreatePass. If we don't set it here, instances will perform directive\n        // matching, etc again and again.\n        if (tView.firstCreatePass) {\n            tView.firstCreatePass = false;\n        }\n        // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n        // content queries are resolved during change detection (i.e. update mode), after embedded\n        // views are refreshed (see block above).\n        if (tView.staticContentQueries) {\n            refreshContentQueries(tView, lView);\n        }\n        // We must materialize query results before child components are processed\n        // in case a child component has projected a container. The LContainer needs\n        // to exist so the embedded views are properly attached by the container.\n        if (tView.staticViewQueries) {\n            executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n        }\n        // Render child component views.\n        const components = tView.components;\n        if (components !== null) {\n            renderChildComponents(lView, components);\n        }\n    }\n    catch (error) {\n        // If we didn't manage to get past the first template pass due to\n        // an error, mark the view as corrupted so we can try to recover.\n        if (tView.firstCreatePass) {\n            tView.incompleteFirstPass = true;\n            tView.firstCreatePass = false;\n        }\n        throw error;\n    }\n    finally {\n        lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n        leaveView();\n    }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n    ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n    const flags = lView[FLAGS];\n    if ((flags & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */)\n        return;\n    enterView(lView);\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\n    // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n    try {\n        resetPreOrderHookFlags(lView);\n        setBindingIndex(tView.bindingStartIndex);\n        if (templateFn !== null) {\n            executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n        }\n        const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n        // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const preOrderCheckHooks = tView.preOrderCheckHooks;\n                if (preOrderCheckHooks !== null) {\n                    executeCheckHooks(lView, preOrderCheckHooks, null);\n                }\n            }\n            else {\n                const preOrderHooks = tView.preOrderHooks;\n                if (preOrderHooks !== null) {\n                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n                }\n                incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n            }\n        }\n        // First mark transplanted views that are declared in this lView as needing a refresh at their\n        // insertion points. This is needed to avoid the situation where the template is defined in this\n        // `LView` but its declaration appears after the insertion component.\n        markTransplantedViewsForRefresh(lView);\n        refreshEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        if (tView.contentQueries !== null) {\n            refreshContentQueries(tView, lView);\n        }\n        // execute content hooks (AfterContentInit, AfterContentChecked)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const contentCheckHooks = tView.contentCheckHooks;\n                if (contentCheckHooks !== null) {\n                    executeCheckHooks(lView, contentCheckHooks);\n                }\n            }\n            else {\n                const contentHooks = tView.contentHooks;\n                if (contentHooks !== null) {\n                    executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n                }\n                incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n            }\n        }\n        processHostBindingOpCodes(tView, lView);\n        // Refresh child component views.\n        const components = tView.components;\n        if (components !== null) {\n            refreshChildComponents(lView, components);\n        }\n        // View queries must execute after refreshing child components because a template in this view\n        // could be inserted in a child component. If the view query executes before child component\n        // refresh, the template might not yet be inserted.\n        const viewQuery = tView.viewQuery;\n        if (viewQuery !== null) {\n            executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n        }\n        // execute view hooks (AfterViewInit, AfterViewChecked)\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!isInCheckNoChangesPass) {\n            if (hooksInitPhaseCompleted) {\n                const viewCheckHooks = tView.viewCheckHooks;\n                if (viewCheckHooks !== null) {\n                    executeCheckHooks(lView, viewCheckHooks);\n                }\n            }\n            else {\n                const viewHooks = tView.viewHooks;\n                if (viewHooks !== null) {\n                    executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n                }\n                incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n            }\n        }\n        if (tView.firstUpdatePass === true) {\n            // We need to make sure that we only flip the flag on successful `refreshView` only\n            // Don't do this in `finally` block.\n            // If we did this in `finally` block then an exception could block the execution of styling\n            // instructions which in turn would be unable to insert themselves into the styling linked\n            // list. The result of this would be that if the exception would not be throw on subsequent CD\n            // the styling would be unable to process it data and reflect to the DOM.\n            tView.firstUpdatePass = false;\n        }\n        // Do not reset the dirty state when running in check no changes mode. We don't want components\n        // to behave differently depending on whether check no changes is enabled or not. For example:\n        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n        // no changes cycle, the component would be not be dirty for the next update pass. This would\n        // be different in production mode where the component dirty state is not reset.\n        if (!isInCheckNoChangesPass) {\n            lView[FLAGS] &= ~(32 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n        }\n        if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n            lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n            updateTransplantedViewCount(lView[PARENT], -1);\n        }\n    }\n    finally {\n        leaveView();\n    }\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n    const prevSelectedIndex = getSelectedIndex();\n    const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n    try {\n        setSelectedIndex(-1);\n        if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n            // When we're updating, inherently select 0 so we don't\n            // have to generate that instruction for most update blocks.\n            selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n        }\n        const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n        profiler(preHookType, context);\n        templateFn(rf, context);\n    }\n    finally {\n        setSelectedIndex(prevSelectedIndex);\n        const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n        profiler(postHookType, context);\n    }\n}\n//////////////////////////\n//// Element\n//////////////////////////\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        const start = tNode.directiveStart;\n        const end = tNode.directiveEnd;\n        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            const def = tView.data[directiveIndex];\n            if (def.contentQueries) {\n                def.contentQueries(1 /* RenderFlags.Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n    if (!getBindingsEnabled())\n        return;\n    instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n    if ((tNode.flags & 128 /* TNodeFlags.hasHostBindings */) === 128 /* TNodeFlags.hasHostBindings */) {\n        invokeDirectivesHostBindings(tView, lView, tNode);\n    }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            const index = localNames[i + 1];\n            const value = index === -1 ?\n                localRefExtractor(tNode, viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n    const tView = def.tView;\n    // Create a TView if there isn't one, or recreate it if the first create pass didn't\n    // complete successfully since we can't know for sure whether it's in a usable shape.\n    if (tView === null || tView.incompleteFirstPass) {\n        // Declaration node here is null since this function is called when we dynamically create a\n        // component and hence there is no declaration.\n        const declTNode = null;\n        return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n    }\n    return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {\n    ngDevMode && ngDevMode.tView++;\n    const bindingStartIndex = HEADER_OFFSET + decls;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    const initialViewLength = bindingStartIndex + vars;\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n    const tView = blueprint[TVIEW] = ngDevMode ?\n        new TViewConstructor(type, // type: TViewType,\n        blueprint, // blueprint: LView,\n        templateFn, // template: ComponentTemplate<{}>|null,\n        null, // queries: TQueries|null\n        viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,\n        declTNode, // declTNode: TNode|null,\n        cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,\n        bindingStartIndex, // bindingStartIndex: number,\n        initialViewLength, // expandoStartIndex: number,\n        null, // hostBindingOpCodes: HostBindingOpCodes,\n        true, // firstCreatePass: boolean,\n        true, // firstUpdatePass: boolean,\n        false, // staticViewQueries: boolean,\n        false, // staticContentQueries: boolean,\n        null, // preOrderHooks: HookData|null,\n        null, // preOrderCheckHooks: HookData|null,\n        null, // contentHooks: HookData|null,\n        null, // contentCheckHooks: HookData|null,\n        null, // viewHooks: HookData|null,\n        null, // viewCheckHooks: HookData|null,\n        null, // destroyHooks: DestroyHookData|null,\n        null, // cleanup: any[]|null,\n        null, // contentQueries: number[]|null,\n        null, // components: number[]|null,\n        typeof directives === 'function' ? //\n            directives() : //\n            directives, // directiveRegistry: DirectiveDefList|null,\n        typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,\n        null, // firstChild: TNode|null,\n        schemas, // schemas: SchemaMetadata[]|null,\n        consts, // consts: TConstants|null\n        false, // incompleteFirstPass: boolean\n        decls, // ngDevMode only: decls\n        vars) :\n        {\n            type: type,\n            blueprint: blueprint,\n            template: templateFn,\n            queries: null,\n            viewQuery: viewQuery,\n            declTNode: declTNode,\n            data: blueprint.slice().fill(null, bindingStartIndex),\n            bindingStartIndex: bindingStartIndex,\n            expandoStartIndex: initialViewLength,\n            hostBindingOpCodes: null,\n            firstCreatePass: true,\n            firstUpdatePass: true,\n            staticViewQueries: false,\n            staticContentQueries: false,\n            preOrderHooks: null,\n            preOrderCheckHooks: null,\n            contentHooks: null,\n            contentCheckHooks: null,\n            viewHooks: null,\n            viewCheckHooks: null,\n            destroyHooks: null,\n            cleanup: null,\n            contentQueries: null,\n            components: null,\n            directiveRegistry: typeof directives === 'function' ? directives() : directives,\n            pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n            firstChild: null,\n            schemas: schemas,\n            consts: consts,\n            incompleteFirstPass: false\n        };\n    if (ngDevMode) {\n        // For performance reasons it is important that the tView retains the same shape during runtime.\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n        // prevent class transitions.\n        Object.seal(tView);\n    }\n    return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    const blueprint = ngDevMode ? new LViewBlueprint() : [];\n    for (let i = 0; i < initialViewLength; i++) {\n        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n    }\n    return blueprint;\n}\nfunction createError(text, token) {\n    return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation) {\n    // When using native Shadow DOM, do not clear host element to allow native slot projection\n    const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n    return renderer.selectRootElement(elementOrSelector, preserveContent);\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n    const lCleanup = getOrCreateLViewCleanup(lView);\n    if (context === null) {\n        // If context is null that this is instance specific callback. These callbacks can only be\n        // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n        if (ngDevMode) {\n            Object.freeze(getOrCreateTViewCleanup(tView));\n        }\n        lCleanup.push(cleanupFn);\n    }\n    else {\n        lCleanup.push(context);\n        if (tView.firstCreatePass) {\n            getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n        }\n    }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n        // `view_engine_compatibility` for additional context.\n        assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n    ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n    ngDevMode && ngDevMode.tNode++;\n    ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n    let injectorIndex = tParent ? tParent.injectorIndex : -1;\n    const tNode = ngDevMode ?\n        new TNodeDebug(tView, // tView_: TView\n        type, // type: TNodeType\n        index, // index: number\n        null, // insertBeforeIndex: null|-1|number|number[]\n        injectorIndex, // injectorIndex: number\n        -1, // directiveStart: number\n        -1, // directiveEnd: number\n        -1, // directiveStylingLast: number\n        null, // propertyBindings: number[]|null\n        0, // flags: TNodeFlags\n        0, // providerIndexes: TNodeProviderIndexes\n        value, // value: string|null\n        attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n        null, // mergedAttrs\n        null, // localNames: (string|number)[]|null\n        undefined, // initialInputs: (string[]|null)[]|null|undefined\n        null, // inputs: PropertyAliases|null\n        null, // outputs: PropertyAliases|null\n        null, // tViews: ITView|ITView[]|null\n        null, // next: ITNode|null\n        null, // projectionNext: ITNode|null\n        null, // child: ITNode|null\n        tParent, // parent: TElementNode|TContainerNode|null\n        null, // projection: number|(ITNode|RNode[])[]|null\n        null, // styles: string|null\n        null, // stylesWithoutHost: string|null\n        undefined, // residualStyles: string|null\n        null, // classes: string|null\n        null, // classesWithoutHost: string|null\n        undefined, // residualClasses: string|null\n        0, // classBindings: TStylingRange;\n        0) :\n        {\n            type,\n            index,\n            insertBeforeIndex: null,\n            injectorIndex,\n            directiveStart: -1,\n            directiveEnd: -1,\n            directiveStylingLast: -1,\n            propertyBindings: null,\n            flags: 0,\n            providerIndexes: 0,\n            value: value,\n            attrs: attrs,\n            mergedAttrs: null,\n            localNames: null,\n            initialInputs: undefined,\n            inputs: null,\n            outputs: null,\n            tViews: null,\n            next: null,\n            projectionNext: null,\n            child: null,\n            parent: tParent,\n            projection: null,\n            styles: null,\n            stylesWithoutHost: null,\n            residualStyles: undefined,\n            classes: null,\n            classesWithoutHost: null,\n            residualClasses: undefined,\n            classBindings: 0,\n            styleBindings: 0,\n        };\n    if (ngDevMode) {\n        // For performance reasons it is important that the tNode retains the same shape during runtime.\n        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n        // prevent class transitions.\n        Object.seal(tNode);\n    }\n    return tNode;\n}\nfunction generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {\n    for (let publicName in inputAliasMap) {\n        if (inputAliasMap.hasOwnProperty(publicName)) {\n            propStore = propStore === null ? {} : propStore;\n            const internalName = inputAliasMap[publicName];\n            if (propStore.hasOwnProperty(publicName)) {\n                propStore[publicName].push(directiveDefIdx, internalName);\n            }\n            else {\n                (propStore[publicName] = [directiveDefIdx, internalName]);\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    const tViewData = tView.data;\n    const tNodeAttrs = tNode.attrs;\n    const inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];\n    let inputsStore = null;\n    let outputsStore = null;\n    for (let i = start; i < end; i++) {\n        const directiveDef = tViewData[i];\n        const directiveInputs = directiveDef.inputs;\n        // Do not use unbound attributes as inputs to structural directives, since structural\n        // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n        // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n        // should be set for inline templates.\n        const initialInputs = (tNodeAttrs !== null && !isInlineTemplate(tNode)) ?\n            generateInitialInputs(directiveInputs, tNodeAttrs) :\n            null;\n        inputsFromAttrs.push(initialInputs);\n        inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);\n        outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);\n    }\n    if (inputsStore !== null) {\n        if (inputsStore.hasOwnProperty('class')) {\n            tNode.flags |= 16 /* TNodeFlags.hasClassInput */;\n        }\n        if (inputsStore.hasOwnProperty('style')) {\n            tNode.flags |= 32 /* TNodeFlags.hasStyleInput */;\n        }\n    }\n    tNode.initialInputs = inputsFromAttrs;\n    tNode.inputs = inputsStore;\n    tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name) {\n    if (name === 'class')\n        return 'className';\n    if (name === 'for')\n        return 'htmlFor';\n    if (name === 'formaction')\n        return 'formAction';\n    if (name === 'innerHtml')\n        return 'innerHTML';\n    if (name === 'readonly')\n        return 'readOnly';\n    if (name === 'tabindex')\n        return 'tabIndex';\n    return name;\n}\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    const element = getNativeByTNode(tNode, lView);\n    let inputData = tNode.inputs;\n    let dataValue;\n    if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n        setInputsForProperty(tView, lView, dataValue, propName, value);\n        if (isComponentHost(tNode))\n            markDirtyIfOnPush(lView, tNode.index);\n        if (ngDevMode) {\n            setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n        }\n    }\n    else if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n        propName = mapPropName(propName);\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n                handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n            }\n            ngDevMode.rendererSetProperty++;\n        }\n        // It is assumed that the sanitizer is only added when the compiler determines that the\n        // property is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n        renderer.setProperty(element, propName, value);\n    }\n    else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n        // If the node is a container and the property didn't\n        // match any of the inputs or schemas we should throw.\n        if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n            handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n        }\n    }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n        childComponentLView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n    }\n}\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n    const renderer = lView[RENDERER];\n    attrName = normalizeDebugBindingName(attrName);\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type & 3 /* TNodeType.AnyRNode */) {\n        if (value == null) {\n            renderer.removeAttribute(element, attrName);\n        }\n        else {\n            renderer.setAttribute(element, attrName, debugValue);\n        }\n    }\n    else {\n        const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);\n        renderer.setValue(element, textContent);\n    }\n}\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n    if (type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */)) {\n        /**\n         * dataValue is an array containing runtime input or output names for the directives:\n         * i+0: directive instance index\n         * i+1: privateName\n         *\n         * e.g. [0, 'change', 'change-minified']\n         * we want to set the reflected property with the privateName: dataValue[i+1]\n         */\n        for (let i = 0; i < dataValue.length; i += 2) {\n            setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n        }\n    }\n}\n/**\n * Instantiate a root component.\n */\nfunction instantiateRootComponent(tView, lView, def) {\n    const rootTNode = getCurrentTNode();\n    if (tView.firstCreatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        const directiveIndex = allocExpando(tView, lView, 1, null);\n        ngDevMode &&\n            assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');\n        configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);\n        initializeInputAndOutputAliases(tView, rootTNode);\n    }\n    const directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);\n    attachPatchData(directive, lView);\n    const native = getNativeByTNode(rootTNode, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n    // tsickle.\n    ngDevMode && assertFirstCreatePass(tView);\n    let hasDirectives = false;\n    if (getBindingsEnabled()) {\n        const directiveDefs = findDirectiveDefMatches(tView, lView, tNode);\n        const exportsMap = localRefs === null ? null : { '': -1 };\n        if (directiveDefs !== null) {\n            hasDirectives = true;\n            initTNodeFlags(tNode, tView.data.length, directiveDefs.length);\n            // When the same token is provided by several directives on the same node, some rules apply in\n            // the viewEngine:\n            // - viewProviders have priority over providers\n            // - the last directive in NgModule.declarations has priority over the previous one\n            // So to match these rules, the order in which providers are added in the arrays is very\n            // important.\n            for (let i = 0; i < directiveDefs.length; i++) {\n                const def = directiveDefs[i];\n                if (def.providersResolver)\n                    def.providersResolver(def);\n            }\n            let preOrderHooksFound = false;\n            let preOrderCheckHooksFound = false;\n            let directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);\n            ngDevMode &&\n                assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n            for (let i = 0; i < directiveDefs.length; i++) {\n                const def = directiveDefs[i];\n                // Merge the attrs in the order of matches. This assumes that the first directive is the\n                // component itself, so that the component has the least priority.\n                tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n                configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n                saveNameToExportMap(directiveIdx, def, exportsMap);\n                if (def.contentQueries !== null)\n                    tNode.flags |= 8 /* TNodeFlags.hasContentQuery */;\n                if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n                    tNode.flags |= 128 /* TNodeFlags.hasHostBindings */;\n                const lifeCycleHooks = def.type.prototype;\n                // Only push a node index into the preOrderHooks array if this is the first\n                // pre-order hook found on this node.\n                if (!preOrderHooksFound &&\n                    (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n                    // We will push the actual hook function into this array later during dir instantiation.\n                    // We cannot do it now because we must ensure hooks are registered in the same\n                    // order that directives are created (i.e. injection order).\n                    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);\n                    preOrderHooksFound = true;\n                }\n                if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n                    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);\n                    preOrderCheckHooksFound = true;\n                }\n                directiveIdx++;\n            }\n            initializeInputAndOutputAliases(tView, tNode);\n        }\n        if (exportsMap)\n            cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    }\n    // Merge the template attrs last so that they have the highest priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n    return hasDirectives;\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param lView `LView` current `LView`\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {\n    ngDevMode && assertFirstCreatePass(tView);\n    const hostBindings = def.hostBindings;\n    if (hostBindings) {\n        let hostBindingOpCodes = tView.hostBindingOpCodes;\n        if (hostBindingOpCodes === null) {\n            hostBindingOpCodes = tView.hostBindingOpCodes = [];\n        }\n        const elementIndx = ~tNode.index;\n        if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n            // Conditionally add select element so that we are more efficient in execution.\n            // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n            // (We could just always add it.)\n            hostBindingOpCodes.push(elementIndx);\n        }\n        hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n    }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n    let i = hostBindingOpCodes.length;\n    while (i > 0) {\n        const value = hostBindingOpCodes[--i];\n        if (typeof value === 'number' && value < 0) {\n            return value;\n        }\n    }\n    return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    if (!tView.firstCreatePass) {\n        getOrCreateNodeInjectorForNode(tNode, lView);\n    }\n    attachPatchData(native, lView);\n    const initialInputs = tNode.initialInputs;\n    for (let i = start; i < end; i++) {\n        const def = tView.data[i];\n        const isComponent = isComponentDef(def);\n        if (isComponent) {\n            ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n            addComponentLogic(lView, tNode, def);\n        }\n        const directive = getNodeInjectable(lView, tView, i, tNode);\n        attachPatchData(directive, lView);\n        if (initialInputs !== null) {\n            setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n        }\n        if (isComponent) {\n            const componentView = getComponentLViewByIndex(tNode.index, lView);\n            componentView[CONTEXT] = directive;\n        }\n    }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    const elementIndex = tNode.index;\n    const currentDirectiveIndex = getCurrentDirectiveIndex();\n    try {\n        setSelectedIndex(elementIndex);\n        for (let dirIndex = start; dirIndex < end; dirIndex++) {\n            const def = tView.data[dirIndex];\n            const directive = lView[dirIndex];\n            setCurrentDirectiveIndex(dirIndex);\n            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n                invokeHostBindingsInCreationMode(def, directive);\n            }\n        }\n    }\n    finally {\n        setSelectedIndex(-1);\n        setCurrentDirectiveIndex(currentDirectiveIndex);\n    }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n    if (def.hostBindings !== null) {\n        def.hostBindings(1 /* RenderFlags.Create */, directive);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, viewData, tNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    const registry = tView.directiveRegistry;\n    let matches = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            const def = registry[i];\n            if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                matches || (matches = ngDevMode ? new MatchesArray() : []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n                if (isComponentDef(def)) {\n                    if (ngDevMode) {\n                        assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                            `Please use a different tag to activate the ${stringify(def.type)} component.`);\n                        if (tNode.flags & 2 /* TNodeFlags.isComponentHost */) {\n                            // If another component has been matched previously, it's the first element in the\n                            // `matches` array, see how we store components/directives in `matches` below.\n                            throwMultipleComponentError(tNode, matches[0].type, def.type);\n                        }\n                    }\n                    markAsComponentHost(tView, tNode);\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting appropriate TNode flags;\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode) {\n    ngDevMode && assertFirstCreatePass(tView);\n    hostTNode.flags |= 2 /* TNodeFlags.isComponentHost */;\n    (tView.components || (tView.components = ngDevMode ? new TViewComponents() : []))\n        .push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        const localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (let i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = directiveIdx;\n            }\n        }\n        if (isComponentDef(def))\n            exportsMap[''] = directiveIdx;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode &&\n        assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n    // When the first directive is created on a node, save the index\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n    ngDevMode &&\n        assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n    tView.data[directiveIndex] = def;\n    const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n    // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n    // we also want to support `inject()` directly from the directive constructor context so we set\n    // `ɵɵdirectiveInject` as the inject implementation here too.\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n    tView.blueprint[directiveIndex] = nodeInjectorFactory;\n    lView[directiveIndex] = nodeInjectorFactory;\n    registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\nfunction addComponentLogic(lView, hostTNode, def) {\n    const native = getNativeByTNode(hostTNode, lView);\n    const tView = getOrCreateComponentTView(def);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    const rendererFactory = lView[RENDERER_FACTORY];\n    const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null, null));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[hostTNode.index] = componentView;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n    if (ngDevMode) {\n        assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        validateAgainstEventAttributes(name);\n        assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` +\n            `Host bindings are not valid on ng-container or ng-template.`);\n    }\n    const element = getNativeByTNode(tNode, lView);\n    setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n    if (value == null) {\n        ngDevMode && ngDevMode.rendererRemoveAttribute++;\n        renderer.removeAttribute(element, name, namespace);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n        renderer.setAttribute(element, name, strValue, namespace);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs !== null) {\n        const setInput = def.setInput;\n        for (let i = 0; i < initialInputs.length;) {\n            const publicName = initialInputs[i++];\n            const privateName = initialInputs[i++];\n            const value = initialInputs[i++];\n            if (setInput !== null) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n            if (ngDevMode) {\n                const nativeElement = getNativeByTNode(tNode, lView);\n                setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs The list of inputs from the directive def\n * @param attrs The static attrs on this node\n */\nfunction generateInitialInputs(inputs, attrs) {\n    let inputsToStore = null;\n    let i = 0;\n    while (i < attrs.length) {\n        const attrName = attrs[i];\n        if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n            // Skip over the `ngProjectAs` value.\n            i += 2;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        if (inputs.hasOwnProperty(attrName)) {\n            if (inputsToStore === null)\n                inputsToStore = [];\n            inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);\n        }\n        i += 2;\n    }\n    return inputsToStore;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n// Not sure why I need to do `any` here but TS complains later.\nconst LContainerArray = class LContainer extends Array {\n};\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n    ngDevMode && assertLView(currentView);\n    // https://jsperf.com/array-literal-vs-new-array-really\n    const lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native\n    true, // Boolean `true` in this position signifies that this is an `LContainer`\n    false, // has transplanted views\n    currentView, // parent\n    null, // next\n    0, // transplanted views to refresh count\n    tNode, // t_host\n    native, // native,\n    null, // view refs\n    null);\n    ngDevMode &&\n        assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n    ngDevMode && attachLContainerDebug(lContainer);\n    return lContainer;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            const embeddedLView = lContainer[i];\n            const embeddedTView = embeddedLView[TVIEW];\n            ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n            if (viewAttachedToChangeDetector(embeddedLView)) {\n                refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n            }\n        }\n    }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        if (!lContainer[HAS_TRANSPLANTED_VIEWS])\n            continue;\n        const movedViews = lContainer[MOVED_VIEWS];\n        ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n        for (let i = 0; i < movedViews.length; i++) {\n            const movedLView = movedViews[i];\n            const insertionLContainer = movedLView[PARENT];\n            ngDevMode && assertLContainer(insertionLContainer);\n            // We don't want to increment the counter if the moved LView was already marked for\n            // refresh.\n            if ((movedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) === 0) {\n                updateTransplantedViewCount(insertionLContainer, 1);\n            }\n            // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n            // those that aren't (declaration component === insertion component). In the latter case,\n            // it's fine to add the flag, as we will clear it immediately in\n            // `refreshEmbeddedViews` for the view currently being refreshed.\n            movedLView[FLAGS] |= 512 /* LViewFlags.RefreshTransplantedView */;\n        }\n    }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView, componentHostIdx) {\n    ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n    // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n    if (viewAttachedToChangeDetector(componentView)) {\n        const tView = componentView[TVIEW];\n        if (componentView[FLAGS] & (16 /* LViewFlags.CheckAlways */ | 32 /* LViewFlags.Dirty */)) {\n            refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n        }\n        else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n            refreshContainsDirtyView(componentView);\n        }\n    }\n}\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView) {\n    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n        for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            const embeddedLView = lContainer[i];\n            if (viewAttachedToChangeDetector(embeddedLView)) {\n                if (embeddedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n                    const embeddedTView = embeddedLView[TVIEW];\n                    ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n                    refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n                }\n                else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n                    refreshContainsDirtyView(embeddedLView);\n                }\n            }\n        }\n    }\n    const tView = lView[TVIEW];\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n        for (let i = 0; i < components.length; i++) {\n            const componentView = getComponentLViewByIndex(components[i], lView);\n            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n            if (viewAttachedToChangeDetector(componentView) &&\n                componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n                refreshContainsDirtyView(componentView);\n            }\n        }\n    }\n}\nfunction renderComponent(hostLView, componentHostIdx) {\n    ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n    const componentTView = componentView[TVIEW];\n    syncViewWithBlueprint(componentTView, componentView);\n    renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n    for (let i = lView.length; i < tView.blueprint.length; i++) {\n        lView.push(tView.blueprint[i]);\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n    // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n    // of order, the change detection will run out of order, as the act of retrieving the the\n    // LContainer from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n        const parent = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent) {\n            return lView;\n        }\n        // continue otherwise\n        lView = parent;\n    }\n    return null;\n}\nfunction detectChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n    const rendererFactory = lView[RENDERER_FACTORY];\n    // Check no changes mode is a dev only mode used to verify that bindings have not changed\n    // since they were assigned. We do not want to invoke renderer factory functions in that mode\n    // to avoid any possible side-effects.\n    const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n    if (!checkNoChangesMode && rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        refreshView(tView, lView, tView.template, context);\n    }\n    catch (error) {\n        if (notifyErrorHandler) {\n            handleError(lView, error);\n        }\n        throw error;\n    }\n    finally {\n        if (!checkNoChangesMode && rendererFactory.end)\n            rendererFactory.end();\n    }\n}\nfunction checkNoChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n    setIsInCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(tView, lView, context, notifyErrorHandler);\n    }\n    finally {\n        setIsInCheckNoChangesMode(false);\n    }\n}\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n    ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n    setCurrentQueryIndex(0);\n    viewQueryFn(flags, component);\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n    // Binding meta-data are stored only the first time a given property instruction is processed.\n    // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n    // binding meta-data to decide if one should be stored (or if was stored already).\n    if (tData[bindingIndex] === null) {\n        if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n            const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n            propBindingIdxs.push(bindingIndex);\n            let bindingMetadata = propertyName;\n            if (interpolationParts.length > 0) {\n                bindingMetadata +=\n                    INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n            }\n            tData[bindingIndex] = bindingMetadata;\n        }\n    }\n}\nfunction getOrCreateLViewCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n}\nfunction getOrCreateTViewCleanup(tView) {\n    return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n    // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n    // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n    // of creating inner components, when current directive index is available in the state. In order\n    // to avoid relying on current def being `null` (thus special-casing root component creation), the\n    // process of creating root component should be unified with the process of creating inner\n    // components.\n    if (currentDef === null || isComponentDef(currentDef)) {\n        lView = unwrapLView(lView[tNode.index]);\n    }\n    return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n    const injector = lView[INJECTOR$1];\n    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n    for (let i = 0; i < inputs.length;) {\n        const index = inputs[i++];\n        const privateName = inputs[i++];\n        const instance = lView[index];\n        ngDevMode && assertIndexInRange(lView, index);\n        const def = tView.data[index];\n        if (def.setInput !== null) {\n            def.setInput(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n    ngDevMode && assertString(value, 'Value should be a string');\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n    ngDevMode && assertIndexInRange(lView, index);\n    const element = getNativeByIndex(index, lView);\n    ngDevMode && assertDefined(element, 'native element should exist');\n    updateTextNode(lView[RENDERER], element, value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n    ngDevMode &&\n        assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n    let styles = writeToHost ? tNode.styles : null;\n    let classes = writeToHost ? tNode.classes : null;\n    let mode = 0;\n    if (attrs !== null) {\n        for (let i = 0; i < attrs.length; i++) {\n            const value = attrs[i];\n            if (typeof value === 'number') {\n                mode = value;\n            }\n            else if (mode == 1 /* AttributeMarker.Classes */) {\n                classes = concatStringsWithSpace(classes, value);\n            }\n            else if (mode == 2 /* AttributeMarker.Styles */) {\n                const style = value;\n                const styleValue = attrs[++i];\n                styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n            }\n        }\n    }\n    writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n    writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n    while (tNode !== null) {\n        ngDevMode &&\n            assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n        const lNode = lView[tNode.index];\n        if (lNode !== null) {\n            result.push(unwrapRNode(lNode));\n        }\n        // A given lNode can represent either a native node or a LContainer (when it is a host of a\n        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n        // from the views in this container.\n        if (isLContainer(lNode)) {\n            for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n                const lViewInAContainer = lNode[i];\n                const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n                if (lViewFirstChildTNode !== null) {\n                    collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n                }\n            }\n        }\n        const tNodeType = tNode.type;\n        if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n            collectNativeNodes(tView, lView, tNode.child, result);\n        }\n        else if (tNodeType & 32 /* TNodeType.Icu */) {\n            const nextRNode = icuContainerIterate(tNode, lView);\n            let rNode;\n            while (rNode = nextRNode()) {\n                result.push(rNode);\n            }\n        }\n        else if (tNodeType & 16 /* TNodeType.Projection */) {\n            const nodesInSlot = getProjectionNodes(lView, tNode);\n            if (Array.isArray(nodesInSlot)) {\n                result.push(...nodesInSlot);\n            }\n            else {\n                const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n                ngDevMode && assertParentView(parentView);\n                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n            }\n        }\n        tNode = isProjection ? tNode.projectionNext : tNode.next;\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ViewRef {\n    constructor(\n    /**\n     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n     *\n     * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n     * component.\n     *\n     * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n     * view.\n     *\n     * @internal\n     */\n    _lView, \n    /**\n     * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n     * requested.\n     *\n     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n     */\n    _cdRefInjectingView) {\n        this._lView = _lView;\n        this._cdRefInjectingView = _cdRefInjectingView;\n        this._appRef = null;\n        this._attachedToViewContainer = false;\n    }\n    get rootNodes() {\n        const lView = this._lView;\n        const tView = lView[TVIEW];\n        return collectNativeNodes(tView, lView, tView.firstChild, []);\n    }\n    get context() {\n        return this._lView[CONTEXT];\n    }\n    set context(value) {\n        this._lView[CONTEXT] = value;\n    }\n    get destroyed() {\n        return (this._lView[FLAGS] & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */;\n    }\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._attachedToViewContainer) {\n            const parent = this._lView[PARENT];\n            if (isLContainer(parent)) {\n                const viewRefs = parent[VIEW_REFS];\n                const index = viewRefs ? viewRefs.indexOf(this) : -1;\n                if (index > -1) {\n                    ngDevMode &&\n                        assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n                    detachView(parent, index);\n                    removeFromArray(viewRefs, index);\n                }\n            }\n            this._attachedToViewContainer = false;\n        }\n        destroyLView(this._lView[TVIEW], this._lView);\n    }\n    onDestroy(callback) {\n        storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n    }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'app-root',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    markForCheck() {\n        markViewDirty(this._cdRefInjectingView || this._lView);\n    }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    detach() {\n        this._lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n    }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app-root',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    reattach() {\n        this._lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n    }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    detectChanges() {\n        detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n    }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    checkNoChanges() {\n        if (ngDevMode) {\n            checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n        }\n    }\n    attachToViewContainerRef() {\n        if (this._appRef) {\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n        }\n        this._attachedToViewContainer = true;\n    }\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView(this._lView[TVIEW], this._lView);\n    }\n    attachToAppRef(appRef) {\n        if (this._attachedToViewContainer) {\n            throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n}\n/** @internal */\nclass RootViewRef extends ViewRef {\n    constructor(_view) {\n        super(_view);\n        this._view = _view;\n    }\n    detectChanges() {\n        const lView = this._view;\n        const tView = lView[TVIEW];\n        const context = lView[CONTEXT];\n        detectChangesInternal(tView, lView, context, false);\n    }\n    checkNoChanges() {\n        if (ngDevMode) {\n            const lView = this._view;\n            const tView = lView[TVIEW];\n            const context = lView[CONTEXT];\n            checkNoChangesInternal(tView, lView, context, false);\n        }\n    }\n    get context() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n    /**\n     * @param ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        const componentDef = getComponentDef$1(component);\n        return new ComponentFactory(componentDef, this.ngModule);\n    }\n}\nfunction toRefArray(map) {\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\nfunction getNamespace(elementName) {\n    const name = elementName.toLowerCase();\n    return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n    constructor(injector, parentInjector) {\n        this.injector = injector;\n        this.parentInjector = parentInjector;\n    }\n    get(token, notFoundValue, flags) {\n        const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            // Return the value from the root element injector when\n            // - it provides it\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            // - the module injector should not be checked\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            return value;\n        }\n        return this.parentInjector.get(token, notFoundValue, flags);\n    }\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n    /**\n     * @param componentDef The component definition.\n     * @param ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = stringifyCSSSelectorList(componentDef.selectors);\n        this.ngContentSelectors =\n            componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n        this.isBoundToModule = !!ngModule;\n    }\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n        environmentInjector = environmentInjector || this.ngModule;\n        let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ?\n            environmentInjector :\n            environmentInjector?.injector;\n        if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n            realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) ||\n                realEnvironmentInjector;\n        }\n        const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n        const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n        if (rendererFactory === null) {\n            throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode &&\n                'Angular was not able to inject a renderer (RendererFactory2). ' +\n                    'Likely this is due to a broken DI hierarchy. ' +\n                    'Make sure that any injector used to create this component has a correct parent.');\n        }\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n        // Determine a tag name used for creating host elements when this component is created\n        // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n        const elementName = this.componentDef.selectors[0][0] || 'div';\n        const hostRNode = rootSelectorOrNode ?\n            locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :\n            createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace(elementName));\n        const rootFlags = this.componentDef.onPush ? 32 /* LViewFlags.Dirty */ | 256 /* LViewFlags.IsRoot */ :\n            16 /* LViewFlags.CheckAlways */ | 256 /* LViewFlags.IsRoot */;\n        // Create the root view. Uses empty TView and ContentTemplate.\n        const rootTView = createTView(0 /* TViewType.Root */, null, null, 1, 0, null, null, null, null, null);\n        const rootLView = createLView(null, rootTView, null, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector, null);\n        // rootView is the parent when bootstrapping\n        // TODO(misko): it looks like we are entering view here but we don't really need to as\n        // `renderView` does that. However as the code is written it is needed because\n        // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n        // issues would allow us to drop this.\n        enterView(rootLView);\n        let component;\n        let tElementNode;\n        try {\n            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);\n            if (hostRNode) {\n                if (rootSelectorOrNode) {\n                    setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n                }\n                else {\n                    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n                    // is not defined), also apply attributes and classes extracted from component selector.\n                    // Extract attributes and classes from the first selector only to match VE behavior.\n                    const { attrs, classes } = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);\n                    if (attrs) {\n                        setUpAttributes(hostRenderer, hostRNode, attrs);\n                    }\n                    if (classes && classes.length > 0) {\n                        writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n                    }\n                }\n            }\n            tElementNode = getTNode(rootTView, HEADER_OFFSET);\n            if (projectableNodes !== undefined) {\n                const projection = tElementNode.projection = [];\n                for (let i = 0; i < this.ngContentSelectors.length; i++) {\n                    const nodesforSlot = projectableNodes[i];\n                    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                    // complex checks down the line.\n                    // We also normalize the length of the passed in projectable nodes (to match the number of\n                    // <ng-container> slots defined by a component).\n                    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n                }\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component =\n                createRootComponent(componentView, this.componentDef, rootLView, [LifecycleHooksFeature]);\n            renderView(rootTView, rootLView, null);\n        }\n        finally {\n            leaveView();\n        }\n        return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n    }\n}\nconst componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nfunction injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.componentType = componentType;\n    }\n    setInput(name, value) {\n        const inputData = this._tNode.inputs;\n        let dataValue;\n        if (inputData !== null && (dataValue = inputData[name])) {\n            const lView = this._rootLView;\n            setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n            markDirtyIfOnPush(lView, this._tNode.index);\n        }\n        else {\n            if (ngDevMode) {\n                const cmpNameForError = stringifyForError(this.componentType);\n                let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n                message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n                reportUnknownPropertyError(message);\n            }\n        }\n    }\n    get injector() {\n        return new NodeInjector(this._tNode, this._rootLView);\n    }\n    destroy() {\n        this.hostView.destroy();\n    }\n    onDestroy(callback) {\n        this.hostView.onDestroy(callback);\n    }\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nconst NULL_INJECTOR = {\n    get: (token, notFoundValue) => {\n        throwProviderNotFoundError(token, 'NullInjector');\n    }\n};\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {\n    const tView = rootView[TVIEW];\n    const index = HEADER_OFFSET;\n    ngDevMode && assertIndexInRange(rootView, index);\n    rootView[index] = rNode;\n    // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n    // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n    // representing a host element.\n    const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, '#host', null);\n    const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;\n    if (mergedAttrs !== null) {\n        computeStaticStyling(tNode, mergedAttrs, true);\n        if (rNode !== null) {\n            setUpAttributes(hostRenderer, rNode, mergedAttrs);\n            if (tNode.classes !== null) {\n                writeDirectClass(hostRenderer, rNode, tNode.classes);\n            }\n            if (tNode.styles !== null) {\n                writeDirectStyle(hostRenderer, rNode, tNode.styles);\n            }\n        }\n    }\n    const viewRenderer = rendererFactory.createRenderer(rNode, def);\n    const componentView = createLView(rootView, getOrCreateComponentTView(def), null, def.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null, null);\n    if (tView.firstCreatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n        markAsComponentHost(tView, tNode);\n        initTNodeFlags(tNode, rootView.length, 1);\n    }\n    addToViewTree(rootView, componentView);\n    // Store component view at node index, with node as the HOST\n    return rootView[index] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, componentDef, rootLView, hostFeatures) {\n    const tView = rootLView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    const component = instantiateRootComponent(tView, rootLView, componentDef);\n    // Root view only contains an instance of this component,\n    // so we use a reference to that component instance as a context.\n    componentView[CONTEXT] = rootLView[CONTEXT] = component;\n    if (hostFeatures !== null) {\n        for (const feature of hostFeatures) {\n            feature(component, componentDef);\n        }\n    }\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    if (componentDef.contentQueries) {\n        const tNode = getCurrentTNode();\n        ngDevMode && assertDefined(tNode, 'TNode expected');\n        componentDef.contentQueries(1 /* RenderFlags.Create */, component, tNode.directiveStart);\n    }\n    const rootTNode = getCurrentTNode();\n    ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n    if (tView.firstCreatePass &&\n        (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {\n        setSelectedIndex(rootTNode.index);\n        const rootTView = rootLView[TVIEW];\n        registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);\n        invokeHostBindingsInCreationMode(componentDef, component);\n    }\n    return component;\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nfunction LifecycleHooksFeature() {\n    const tNode = getCurrentTNode();\n    ngDevMode && assertDefined(tNode, 'TNode is required');\n    registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n    let superType = getSuperType(definition.type);\n    let shouldInheritFields = true;\n    const inheritanceChain = [definition];\n    while (superType) {\n        let superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵcmp || superType.ɵdir;\n        }\n        else {\n            if (superType.ɵcmp) {\n                throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode &&\n                    `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵdir;\n        }\n        if (superDef) {\n            if (shouldInheritFields) {\n                inheritanceChain.push(superDef);\n                // Some fields in the definition may be empty, if there were no values to put in them that\n                // would've justified object creation. Unwrap them if necessary.\n                const writeableDef = definition;\n                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n                // Merge hostBindings\n                const superHostBindings = superDef.hostBindings;\n                superHostBindings && inheritHostBindings(definition, superHostBindings);\n                // Merge queries\n                const superViewQuery = superDef.viewQuery;\n                const superContentQueries = superDef.contentQueries;\n                superViewQuery && inheritViewQuery(definition, superViewQuery);\n                superContentQueries && inheritContentQueries(definition, superContentQueries);\n                // Merge inputs and outputs\n                fillProperties(definition.inputs, superDef.inputs);\n                fillProperties(definition.declaredInputs, superDef.declaredInputs);\n                fillProperties(definition.outputs, superDef.outputs);\n                // Merge animations metadata.\n                // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n                if (isComponentDef(superDef) && superDef.data.animation) {\n                    // If super def is a Component, the `definition` is also a Component, since Directives can\n                    // not inherit Components (we throw an error above and cannot reach this code).\n                    const defData = definition.data;\n                    defData.animation = (defData.animation || []).concat(superDef.data.animation);\n                }\n            }\n            // Run parent features\n            const features = superDef.features;\n            if (features) {\n                for (let i = 0; i < features.length; i++) {\n                    const feature = features[i];\n                    if (feature && feature.ngInherit) {\n                        feature(definition);\n                    }\n                    // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n                    // def already has all the necessary information inherited from its super class(es), so we\n                    // can stop merging fields from super classes. However we need to iterate through the\n                    // prototype chain to look for classes that might contain other \"features\" (like\n                    // NgOnChanges), which we should invoke for the original `definition`. We set the\n                    // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n                    // logic and only invoking functions from the \"features\" list.\n                    if (feature === ɵɵInheritDefinitionFeature) {\n                        shouldInheritFields = false;\n                    }\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n    mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n    let hostVars = 0;\n    let hostAttrs = null;\n    // We process the inheritance order from the base to the leaves here.\n    for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n        const def = inheritanceChain[i];\n        // For each `hostVars`, we need to add the superclass amount.\n        def.hostVars = (hostVars += def.hostVars);\n        // for each `hostAttrs` we need to merge it with superclass.\n        def.hostAttrs =\n            mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n    }\n}\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n    const prevViewQuery = definition.viewQuery;\n    if (prevViewQuery) {\n        definition.viewQuery = (rf, ctx) => {\n            superViewQuery(rf, ctx);\n            prevViewQuery(rf, ctx);\n        };\n    }\n    else {\n        definition.viewQuery = superViewQuery;\n    }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n    const prevContentQueries = definition.contentQueries;\n    if (prevContentQueries) {\n        definition.contentQueries = (rf, ctx, directiveIndex) => {\n            superContentQueries(rf, ctx, directiveIndex);\n            prevContentQueries(rf, ctx, directiveIndex);\n        };\n    }\n    else {\n        definition.contentQueries = superContentQueries;\n    }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n    const prevHostBindings = definition.hostBindings;\n    if (prevHostBindings) {\n        definition.hostBindings = (rf, ctx) => {\n            superHostBindings(rf, ctx);\n            prevHostBindings(rf, ctx);\n        };\n    }\n    else {\n        definition.hostBindings = superHostBindings;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n    // The child class should use the providers of its parent.\n    'providersResolver',\n    // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n    // as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n    // The child class should use the template function of its parent, including all template\n    // semantics.\n    'template',\n    'decls',\n    'consts',\n    'vars',\n    'onPush',\n    'ngContentSelectors',\n    // The child class should use the CSS styles of its parent, including all styling semantics.\n    'styles',\n    'encapsulation',\n    // The child class should be checked by the runtime in the same way as its parent.\n    'schemas',\n];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n    let superType = getSuperType(definition.type);\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n        superDef = superType.ɵcmp;\n    }\n    else {\n        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n        superDef = superType.ɵdir;\n    }\n    // Needed because `definition` fields are readonly.\n    const defAny = definition;\n    // Copy over any fields that apply to either directives or components.\n    for (const field of COPY_DIRECTIVE_FIELDS) {\n        defAny[field] = superDef[field];\n    }\n    if (isComponentDef(superDef)) {\n        // Copy over any component-specific fields.\n        for (const field of COPY_COMPONENT_FIELDS) {\n            defAny[field] = superDef[field];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _symbolIterator = null;\nfunction getSymbolIterator() {\n    if (!_symbolIterator) {\n        const Symbol = _global$1['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isIterable(obj) {\n    return obj !== null && typeof obj === 'object' && obj[getSymbolIterator()] !== undefined;\n}\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nfunction areIterablesEqual(a, b, comparator) {\n    const iterator1 = a[getSymbolIterator()]();\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        const item1 = iterator1.next();\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        const iterator = obj[getSymbolIterator()]();\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction devModeEqual(a, b) {\n    const isListLikeIterableA = isListLikeIterable(a);\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return Object.is(a, b);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertIndexInRange(lView, bindingIndex);\n    ngDevMode &&\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    const oldValue = lView[bindingIndex];\n    if (Object.is(oldValue, value)) {\n        return false;\n    }\n    else {\n        if (ngDevMode && isInCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual(oldValueToCompare, value)) {\n                const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n            }\n            // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n            // For this reason we exit as if no change. The early exit is needed to prevent the changed\n            // value to be written into `LView` (If we would write the new value that we would not see it\n            // as change on next CD.)\n            return false;\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n    }\n    return ɵɵattribute;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    let isBindingUpdated = false;\n    let bindingIndex = getBindingIndex();\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n    }\n    setBindingIndex(bindingIndex);\n    if (!isBindingUpdated) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n    const different = bindingUpdated(lView, nextBindingIndex(), v0);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    incrementBindingIndex(2);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    incrementBindingIndex(3);\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const bindingIndex = getBindingIndex();\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    incrementBindingIndex(4);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    incrementBindingIndex(5);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    incrementBindingIndex(6);\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    incrementBindingIndex(7);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n        renderStringify(v5) + i5 + renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const bindingIndex = getBindingIndex();\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    incrementBindingIndex(8);\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n        renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n        renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n    }\n    return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n    }\n    return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n    }\n    return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n    }\n    return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n    }\n    return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n    }\n    return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n    }\n    return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n        ngDevMode &&\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n    }\n    return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n    const lView = getLView();\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        const tNode = getSelectedTNode();\n        elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n        if (ngDevMode) {\n            const interpolationInBetween = [values[0]]; // prefix\n            for (let i = 2; i < values.length; i += 2) {\n                interpolationInBetween.push(values[i]);\n            }\n            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n        }\n    }\n    return ɵɵattributeInterpolateV;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n    const view = getComponentViewByInstance(component);\n    detectChangesInternal(view[TVIEW], view, component);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n    const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n    registerPostOrderHooks(tView, tNode);\n    const embeddedTView = tNode.tViews = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);\n    if (tView.queries !== null) {\n        tView.queries.template(tView, tNode);\n        embeddedTView.queries = tView.queries.embeddedTView(tNode);\n    }\n    return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, false);\n    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    appendChild(tView, lView, comment, tNode);\n    attachPatchData(comment, lView);\n    addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n    }\n    if (localRefsIndex != null) {\n        saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    if (index >= tView.data.length) {\n        tView.data[index] = null;\n        tView.blueprint[index] = null;\n    }\n    lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n    const contextLView = getContextLView();\n    return load(contextLView, HEADER_OFFSET + index);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n    const inputs = tNode.inputs;\n    const property = isClassBased ? 'class' : 'style';\n    // We support both 'class' and `className` hence the fallback.\n    setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {\n    ngDevMode && assertFirstCreatePass(tView);\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    const attrs = getConstant(tViewConsts, attrsIndex);\n    const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n    const hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n    if (ngDevMode) {\n        validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n    }\n    if (tNode.attrs !== null) {\n        computeStaticStyling(tNode, tNode.attrs, false);\n    }\n    if (tNode.mergedAttrs !== null) {\n        computeStaticStyling(tNode, tNode.mergedAttrs, true);\n    }\n    if (tView.queries !== null) {\n        tView.queries.elementStart(tView, tNode);\n    }\n    return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = HEADER_OFFSET + index;\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    const renderer = lView[RENDERER];\n    const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());\n    const tNode = tView.firstCreatePass ?\n        elementStartFirstCreatePass(adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, true);\n    const mergedAttrs = tNode.mergedAttrs;\n    if (mergedAttrs !== null) {\n        setUpAttributes(renderer, native, mergedAttrs);\n    }\n    const classes = tNode.classes;\n    if (classes !== null) {\n        writeDirectClass(renderer, native, classes);\n    }\n    const styles = tNode.styles;\n    if (styles !== null) {\n        writeDirectStyle(renderer, native, styles);\n    }\n    if ((tNode.flags & 64 /* TNodeFlags.isDetached */) !== 64 /* TNodeFlags.isDetached */) {\n        // In the i18n case, the translation may have removed this element, so only add it if it is not\n        // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n        appendChild(tView, lView, native, tNode);\n    }\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n        executeContentQueries(tView, tNode, lView);\n    }\n    if (localRefsIndex !== null) {\n        saveResolvedLocalsInData(lView, tNode);\n    }\n    return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n    let currentTNode = getCurrentTNode();\n    ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n    if (isCurrentTNodeParent()) {\n        setCurrentTNodeAsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(getCurrentTNode());\n        currentTNode = currentTNode.parent;\n        setCurrentTNode(currentTNode, false);\n    }\n    const tNode = currentTNode;\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    decreaseElementDepthCount();\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        registerPostOrderHooks(tView, currentTNode);\n        if (isContentQueryHost(currentTNode)) {\n            tView.queries.elementEnd(currentTNode);\n        }\n    }\n    if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n    }\n    if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n    }\n    return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n    ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n    ɵɵelementEnd();\n    return ɵɵelement;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n    ngDevMode && ngDevMode.firstCreatePass++;\n    const tViewConsts = tView.consts;\n    const attrs = getConstant(tViewConsts, attrsIndex);\n    const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n    // While ng-container doesn't necessarily support styling, we use the style context to identify\n    // and execute directives on the ng-container.\n    if (attrs !== null) {\n        computeStaticStyling(tNode, attrs, true);\n    }\n    const localRefs = getConstant(tViewConsts, localRefsIndex);\n    resolveDirectives(tView, lView, tNode, localRefs);\n    if (tView.queries !== null) {\n        tView.queries.elementStart(tView, tNode);\n    }\n    return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n    const tNode = tView.firstCreatePass ?\n        elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) :\n        tView.data[adjustedIndex];\n    setCurrentTNode(tNode, true);\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    const native = lView[adjustedIndex] =\n        lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n    appendChild(tView, lView, native, tNode);\n    attachPatchData(native, lView);\n    if (isDirectiveHost(tNode)) {\n        createDirectivesInstances(tView, lView, tNode);\n        executeContentQueries(tView, tNode, lView);\n    }\n    if (localRefsIndex != null) {\n        saveResolvedLocalsInData(lView, tNode);\n    }\n    return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n    let currentTNode = getCurrentTNode();\n    const tView = getTView();\n    if (isCurrentTNodeParent()) {\n        setCurrentTNodeAsNotParent();\n    }\n    else {\n        ngDevMode && assertHasParent(currentTNode);\n        currentTNode = currentTNode.parent;\n        setCurrentTNode(currentTNode, false);\n    }\n    ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n    if (tView.firstCreatePass) {\n        registerPostOrderHooks(tView, currentTNode);\n        if (isContentQueryHost(currentTNode)) {\n            tView.queries.elementEnd(currentTNode);\n        }\n    }\n    return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n    ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n    ɵɵelementContainerEnd();\n    return ɵɵelementContainer;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n    return getLView();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n    return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nconst isObservable = isSubscribable;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n    const lView = getLView();\n    const tView = getTView();\n    const tNode = getCurrentTNode();\n    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture, eventTargetResolver);\n    return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n    const tNode = getCurrentTNode();\n    const lView = getLView();\n    const tView = getTView();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);\n    return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n    const tCleanup = tView.cleanup;\n    if (tCleanup != null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            const cleanupEventName = tCleanup[i];\n            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                // We have found a matching event name on the same node but it might not have been\n                // registered yet, so we must explicitly verify entries in the LView cleanup data\n                // structures.\n                const lCleanup = lView[CLEANUP];\n                const listenerIdxInLCleanup = tCleanup[i + 2];\n                return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n            }\n            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n            // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n            // documentation of TView.cleanup for more details of this data structure layout.\n            if (typeof cleanupEventName === 'string') {\n                i += 2;\n            }\n        }\n    }\n    return null;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {\n    const isTNodeDirectiveHost = isDirectiveHost(tNode);\n    const firstCreatePass = tView.firstCreatePass;\n    const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n    const context = lView[CONTEXT];\n    // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n    // native listener or a directive output on this element. As such we we know that we will have to\n    // register a listener and store its cleanup function on LView.\n    const lCleanup = getOrCreateLViewCleanup(lView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    let processOutputs = true;\n    // Adding a native event listener is applicable when:\n    // - The corresponding TNode represents a DOM element.\n    // - The event target has a resolver (usually resulting in a global object,\n    //   such as `window` or `document`).\n    if ((tNode.type & 3 /* TNodeType.AnyRNode */) || eventTargetResolver) {\n        const native = getNativeByTNode(tNode, lView);\n        const target = eventTargetResolver ? eventTargetResolver(native) : native;\n        const lCleanupIndex = lCleanup.length;\n        const idxOrTargetGetter = eventTargetResolver ?\n            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) :\n            tNode.index;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        // There might be cases where multiple directives on the same element try to register an event\n        // handler function for the same event. In this situation we want to avoid registration of\n        // several native listeners as each registration would be intercepted by NgZone and\n        // trigger change detection. This would mean that a single user action would result in several\n        // change detections being invoked. To avoid this situation we want to have only one call to\n        // native handler registration (for the same element and same type of event).\n        //\n        // In order to have just one native event handler in presence of multiple handler functions,\n        // we just register a first handler function as a native event listener and then chain\n        // (coalesce) other handler functions on top of the first native handler function.\n        let existingListener = null;\n        // Please note that the coalescing described here doesn't happen for events specifying an\n        // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n        // view engine.\n        // Also, we don't have to search for existing listeners is there are no directives\n        // matching on a given node as we can't register multiple event handlers for the same event in\n        // a template (this would mean having duplicate attributes).\n        if (!eventTargetResolver && isTNodeDirectiveHost) {\n            existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n        }\n        if (existingListener !== null) {\n            // Attach a new listener to coalesced listeners list, maintaining the order in which\n            // listeners are registered. For performance reasons, we keep a reference to the last\n            // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n            // the entire set each time we need to add a new listener.\n            const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n            lastListenerFn.__ngNextListenerFn__ = listenerFn;\n            existingListener.__ngLastListenerFn__ = listenerFn;\n            processOutputs = false;\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n            const cleanupFn = renderer.listen(target, eventName, listenerFn);\n            ngDevMode && ngDevMode.rendererAddEventListener++;\n            lCleanup.push(listenerFn, cleanupFn);\n            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n        }\n    }\n    else {\n        // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n        // ancestors are marked dirty when an event occurs.\n        listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n    }\n    // subscribe to directive outputs\n    const outputs = tNode.outputs;\n    let props;\n    if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n        const propsLength = props.length;\n        if (propsLength) {\n            for (let i = 0; i < propsLength; i += 2) {\n                const index = props[i];\n                ngDevMode && assertIndexInRange(lView, index);\n                const minifiedName = props[i + 1];\n                const directiveInstance = lView[index];\n                const output = directiveInstance[minifiedName];\n                if (ngDevMode && !isObservable(output)) {\n                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n                }\n                const subscription = output.subscribe(listenerFn);\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n    try {\n        profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n        // Only explicitly returning false from a listener should preventDefault\n        return listenerFn(e) !== false;\n    }\n    catch (error) {\n        handleError(lView, error);\n        return false;\n    }\n    finally {\n        profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // Ivy uses `Function` as a special token that allows us to unwrap the function\n        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n        if (e === Function) {\n            return listenerFn;\n        }\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        const startView = tNode.flags & 2 /* TNodeFlags.isComponentHost */ ?\n            getComponentLViewByIndex(tNode.index, lView) :\n            lView;\n        markViewDirty(startView);\n        let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n        // A just-invoked listener function might have coalesced listeners so we need to check for\n        // their presence and invoke as needed.\n        let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n        while (nextListenerFn) {\n            // We should prevent default if any of the listeners explicitly return false\n            result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n            nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n        }\n        if (wrapWithPreventDefault && result === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n        return result;\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n    return nextContextImpl(level);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n    let wildcardNgContentIndex = null;\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < projectionSlots.length; i++) {\n        const slotValue = projectionSlots[i];\n        // The last wildcard projection slot should match all nodes which aren't matching\n        // any selector. This is necessary to be backwards compatible with view engine.\n        if (slotValue === '*') {\n            wildcardNgContentIndex = i;\n            continue;\n        }\n        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n        // to the list of selectors, otherwise we fall back to matching against the node.\n        if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n            return i; // first matching selector \"captures\" a given node\n        }\n    }\n    return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n    const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n    if (!componentNode.projection) {\n        // If no explicit projection slots are defined, fall back to a single\n        // projection slot with the wildcard selector.\n        const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n        const projectionHeads = componentNode.projection =\n            newArray(numProjectionSlots, null);\n        const tails = projectionHeads.slice();\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n            if (slotIndex !== null) {\n                if (tails[slotIndex]) {\n                    tails[slotIndex].projectionNext = componentChild;\n                }\n                else {\n                    projectionHeads[slotIndex] = componentChild;\n                }\n                tails[slotIndex] = componentChild;\n            }\n            componentChild = componentChild.next;\n        }\n    }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n    const lView = getLView();\n    const tView = getTView();\n    const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setCurrentTNodeAsNotParent();\n    if ((tProjectionNode.flags & 64 /* TNodeFlags.isDetached */) !== 64 /* TNodeFlags.isDetached */) {\n        // re-distribution of projectable nodes is stored on a component's view level\n        applyProjection(tView, lView, tProjectionNode);\n    }\n}\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n    ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n    return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n    }\n    return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n    }\n    return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n    }\n    return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n    }\n    return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n    }\n    return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n    }\n    return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n    }\n    return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        ngDevMode &&\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n    }\n    return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    if (interpolatedValue !== NO_CHANGE) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n        if (ngDevMode) {\n            const interpolationInBetween = [values[0]]; // prefix\n            for (let i = 2; i < values.length; i += 2) {\n                interpolationInBetween.push(values[i]);\n            }\n            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n        }\n    }\n    return ɵɵpropertyInterpolateV;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n    ngDevMode && assertFirstUpdatePass(getTView());\n    let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n    let tmplHead = getTStylingRangePrev(tBindings);\n    let tmplTail = getTStylingRangeNext(tBindings);\n    tData[index] = tStylingKeyWithStatic;\n    let isKeyDuplicateOfStatic = false;\n    let tStylingKey;\n    if (Array.isArray(tStylingKeyWithStatic)) {\n        // We are case when the `TStylingKey` contains static fields as well.\n        const staticKeyValueArray = tStylingKeyWithStatic;\n        tStylingKey = staticKeyValueArray[1]; // unwrap.\n        // We need to check if our key is present in the static so that we can mark it as duplicate.\n        if (tStylingKey === null ||\n            keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n            // tStylingKey is present in the statics, need to mark it as duplicate.\n            isKeyDuplicateOfStatic = true;\n        }\n    }\n    else {\n        tStylingKey = tStylingKeyWithStatic;\n    }\n    if (isHostBinding) {\n        // We are inserting host bindings\n        // If we don't have template bindings then `tail` is 0.\n        const hasTemplateBindings = tmplTail !== 0;\n        // This is important to know because that means that the `head` can't point to the first\n        // template bindings (there are none.) Instead the head points to the tail of the template.\n        if (hasTemplateBindings) {\n            // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n            const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n            tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n            // if a host binding has already been registered, we need to update the next of that host\n            // binding to point to this one\n            if (previousNode !== 0) {\n                // We need to update the template-tail value to point to us.\n                tData[previousNode + 1] =\n                    setTStylingRangeNext(tData[previousNode + 1], index);\n            }\n            // The \"previous\" of the template binding head should point to this host binding\n            tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n        }\n        else {\n            tData[index + 1] = toTStylingRange(tmplHead, 0);\n            // if a host binding has already been registered, we need to update the next of that host\n            // binding to point to this one\n            if (tmplHead !== 0) {\n                // We need to update the template-tail value to point to us.\n                tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n            }\n            // if we don't have template, the head points to template-tail, and needs to be advanced.\n            tmplHead = index;\n        }\n    }\n    else {\n        // We are inserting in template section.\n        // We need to set this binding's \"previous\" to the current template tail\n        tData[index + 1] = toTStylingRange(tmplTail, 0);\n        ngDevMode &&\n            assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n        if (tmplHead === 0) {\n            tmplHead = index;\n        }\n        else {\n            // We need to update the previous value \"next\" to point to this binding\n            tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n        }\n        tmplTail = index;\n    }\n    // Now we need to update / compute the duplicates.\n    // Starting with our location search towards head (least priority)\n    if (isKeyDuplicateOfStatic) {\n        tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n    }\n    markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n    markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n    markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n    tBindings = toTStylingRange(tmplHead, tmplTail);\n    if (isClassBinding) {\n        tNode.classBindings = tBindings;\n    }\n    else {\n        tNode.styleBindings = tBindings;\n    }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n    const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&\n        keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n        // We have duplicate in the residual so mark ourselves as duplicate.\n        tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n    }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n    const tStylingAtIndex = tData[index + 1];\n    const isMap = tStylingKey === null;\n    let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n    let foundDuplicate = false;\n    // We keep iterating as long as we have a cursor\n    // AND either:\n    // - we found what we are looking for, OR\n    // - we are a map in which case we have to continue searching even after we find what we were\n    //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n    while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n        ngDevMode && assertIndexInRange(tData, cursor);\n        const tStylingValueAtCursor = tData[cursor];\n        const tStyleRangeAtCursor = tData[cursor + 1];\n        if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n            foundDuplicate = true;\n            tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :\n                setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n        }\n        cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :\n            getTStylingRangeNext(tStyleRangeAtCursor);\n    }\n    if (foundDuplicate) {\n        // if we found a duplicate, than mark ourselves.\n        tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :\n            setTStylingRangeNextDuplicate(tStylingAtIndex);\n    }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n    ngDevMode &&\n        assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n    if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that\n        // location so we must assume that we have a match.\n        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it\n        // contains a match.\n        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===\n            tStylingKey // If the keys match explicitly than we are a match.\n    ) {\n        return true;\n    }\n    else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n        // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n        // statics and we need to check those as well.\n        return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=\n            0; // see if we are matching the key\n    }\n    return false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n    textEnd: 0,\n    key: 0,\n    keyEnd: 0,\n    value: 0,\n    valueEnd: 0,\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n    return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n    return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n    resetParserState(text);\n    return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n    const end = parserState.textEnd;\n    if (end === index) {\n        return -1;\n    }\n    index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n    return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n    resetParserState(text);\n    return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n    const end = parserState.textEnd;\n    let index = parserState.key = consumeWhitespace(text, startIndex, end);\n    if (end === index) {\n        // we reached an end so just quit\n        return -1;\n    }\n    index = parserState.keyEnd = consumeStyleKey(text, index, end);\n    index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n    index = parserState.value = consumeWhitespace(text, index, end);\n    index = parserState.valueEnd = consumeStyleValue(text, index, end);\n    return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n    parserState.key = 0;\n    parserState.keyEnd = 0;\n    parserState.value = 0;\n    parserState.valueEnd = 0;\n    parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n    while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n    while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n    let ch;\n    while (startIndex < endIndex &&\n        ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ ||\n            ((ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */) ||\n            (ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */))) {\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n    startIndex = consumeWhitespace(text, startIndex, endIndex);\n    if (startIndex < endIndex) {\n        if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n            malformedStyleError(text, String.fromCharCode(separator), startIndex);\n        }\n        startIndex++;\n    }\n    return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n    let ch1 = -1; // 1st previous character\n    let ch2 = -1; // 2nd previous character\n    let ch3 = -1; // 3rd previous character\n    let i = startIndex;\n    let lastChIndex = i;\n    while (i < endIndex) {\n        const ch = text.charCodeAt(i++);\n        if (ch === 59 /* CharCode.SEMI_COLON */) {\n            return lastChIndex;\n        }\n        else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n            lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n        }\n        else if (startIndex ===\n            i - 4 && // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n            ch3 === 85 /* CharCode.U */ &&\n            ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n            lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n        }\n        else if (ch > 32 /* CharCode.SPACE */) {\n            // if we have a non-whitespace character then capture its location\n            lastChIndex = i;\n        }\n        ch3 = ch2;\n        ch2 = ch1;\n        ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n    }\n    return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n    let ch1 = -1; // 1st previous character\n    let index = startIndex;\n    while (index < endIndex) {\n        const ch = text.charCodeAt(index++);\n        if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n            return index;\n        }\n        if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n            // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n            // quotation. (It should not assume that the last `\"` is escaped.)\n            ch1 = 0;\n        }\n        else {\n            ch1 = ch;\n        }\n    }\n    throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :\n        new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n    ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n    throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +\n        text.substring(index, index + 1) + '<<]' + text.slice(index + 1) +\n        `'. Expecting '${expecting}'.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n    checkStylingProperty(prop, value, suffix, false);\n    return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n    checkStylingProperty(className, value, null, true);\n    return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n    checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n    for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n        styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n    }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n    checkStylingMap(keyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n    for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n        keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n    }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n    const lView = getLView();\n    const tView = getTView();\n    // Styling instructions use 2 slots per binding.\n    // 1. one for the value / TStylingKey\n    // 2. one for the intermittent-value / TStylingRange\n    const bindingIndex = incrementBindingIndex(2);\n    if (tView.firstUpdatePass) {\n        stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n    }\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n        const tNode = tView.data[getSelectedIndex()];\n        updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n    }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n    const tView = getTView();\n    const bindingIndex = incrementBindingIndex(2);\n    if (tView.firstUpdatePass) {\n        stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n    }\n    const lView = getLView();\n    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n        // if so as not to read unnecessarily.\n        const tNode = tView.data[getSelectedIndex()];\n        if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n            if (ngDevMode) {\n                // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n                // processing this binding in styling resolution.\n                const tStylingKey = tView.data[bindingIndex];\n                assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n            }\n            // VE does not concatenate the static portion like we are doing here.\n            // Instead VE just ignores the static completely if dynamic binding is present.\n            // Because of locality we have already set the static portion because we don't know if there\n            // is a dynamic portion until later. If we would ignore the static portion it would look like\n            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n            // thing as it would think that the static portion was removed. For this reason we\n            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n            let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n            ngDevMode && isClassBased === false && staticPrefix !== null &&\n                assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n            if (staticPrefix !== null) {\n                // We want to make sure that falsy values of `value` become empty strings.\n                value = concatStringsWithSpace(staticPrefix, value ? value : '');\n            }\n            // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n            // This takes over the `[style]` binding. (Same for `[class]`)\n            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n        }\n        else {\n            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n        }\n    }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n    // All host bindings are placed after the expando section.\n    return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n    ngDevMode && assertFirstUpdatePass(tView);\n    const tData = tView.data;\n    if (tData[bindingIndex + 1] === null) {\n        // The above check is necessary because we don't clear first update pass until first successful\n        // (no exception) template execution. This prevents the styling instruction from double adding\n        // itself to the list.\n        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n        // if so as not to read unnecessarily.\n        const tNode = tData[getSelectedIndex()];\n        ngDevMode && assertDefined(tNode, 'TNode expected');\n        const isHostBindings = isInHostBindings(tView, bindingIndex);\n        if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n            // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n            // we need to neutralize this binding since that directive is shadowing it.\n            // We turn this into a noop by setting the key to `false`\n            tStylingKey = false;\n        }\n        tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n        insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n    }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n    const hostDirectiveDef = getCurrentDirectiveDef(tData);\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (hostDirectiveDef === null) {\n        // We are in template node.\n        // If template node already had styling instruction then it has already collected the static\n        // styling and there is no need to collect them again. We know that we are the first styling\n        // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n        const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n        if (isFirstStylingInstructionInTemplate) {\n            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n            // they are already merged and it would not be possible to figure which property belongs where\n            // in the priority.\n            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n            // We know that if we have styling binding in template we can't have residual.\n            residual = null;\n        }\n    }\n    else {\n        // We are in host binding node and there was no binding instruction in template node.\n        // This means that we need to compute the residual.\n        const directiveStylingLast = tNode.directiveStylingLast;\n        const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n        if (isFirstStylingInstructionInHostBinding) {\n            stylingKey =\n                collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n            if (residual === null) {\n                // - If `null` than either:\n                //    - Template styling instruction already ran and it has consumed the static\n                //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n                //      we need to update the `TStylingKey` associated with the first template node\n                //      instruction. OR\n                //    - Some other styling instruction ran and determined that there are no residuals\n                let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n                if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n                    // Only recompute if `templateStylingKey` had static values. (If no static value found\n                    // then there is nothing to do since this operation can only produce less static keys, not\n                    // more.)\n                    templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n                    templateStylingKey =\n                        collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n                    setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n                }\n            }\n            else {\n                // We only need to recompute residual if it is not `null`.\n                // - If existing residual (implies there was no template styling). This means that some of\n                //   the statics may have moved from the residual to the `stylingKey` and so we have to\n                //   recompute.\n                // - If `undefined` this is the first time we are running.\n                residual = collectResidual(tData, tNode, isClassBased);\n            }\n        }\n    }\n    if (residual !== undefined) {\n        isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n    }\n    return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    if (getTStylingRangeNext(bindings) === 0) {\n        // There does not seem to be a styling instruction in the `template`.\n        return undefined;\n    }\n    return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n    ngDevMode &&\n        assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n    tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n    let residual = undefined;\n    const directiveEnd = tNode.directiveEnd;\n    ngDevMode &&\n        assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n    // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n    // collecting things after the last `hostBindings` directive which had a styling instruction.)\n    for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n        const attrs = tData[i].hostAttrs;\n        residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n    }\n    return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n    // We need to loop because there can be directives which have `hostAttrs` but don't have\n    // `hostBindings` so this loop catches up to the current directive..\n    let currentDirective = null;\n    const directiveEnd = tNode.directiveEnd;\n    let directiveStylingLast = tNode.directiveStylingLast;\n    if (directiveStylingLast === -1) {\n        directiveStylingLast = tNode.directiveStart;\n    }\n    else {\n        directiveStylingLast++;\n    }\n    while (directiveStylingLast < directiveEnd) {\n        currentDirective = tData[directiveStylingLast];\n        ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n        stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n        if (currentDirective === hostDirectiveDef)\n            break;\n        directiveStylingLast++;\n    }\n    if (hostDirectiveDef !== null) {\n        // we only advance the styling cursor if we are collecting data from host bindings.\n        // Template executes before host bindings and so if we would update the index,\n        // host bindings would not get their statics.\n        tNode.directiveStylingLast = directiveStylingLast;\n    }\n    return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n    const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n    let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    if (attrs !== null) {\n        for (let i = 0; i < attrs.length; i++) {\n            const item = attrs[i];\n            if (typeof item === 'number') {\n                currentMarker = item;\n            }\n            else {\n                if (currentMarker === desiredMarker) {\n                    if (!Array.isArray(stylingKey)) {\n                        stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n                    }\n                    keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n                }\n            }\n        }\n    }\n    return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n    if (value == null /*|| value === undefined */ || value === '')\n        return EMPTY_ARRAY;\n    const styleKeyValueArray = [];\n    const unwrappedValue = unwrapSafeValue(value);\n    if (Array.isArray(unwrappedValue)) {\n        for (let i = 0; i < unwrappedValue.length; i++) {\n            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n        }\n    }\n    else if (typeof unwrappedValue === 'object') {\n        for (const key in unwrappedValue) {\n            if (unwrappedValue.hasOwnProperty(key)) {\n                keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n            }\n        }\n    }\n    else if (typeof unwrappedValue === 'string') {\n        stringParser(styleKeyValueArray, unwrappedValue);\n    }\n    else {\n        ngDevMode &&\n            throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n    }\n    return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n    keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n    if (oldKeyValueArray === NO_CHANGE) {\n        // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n        oldKeyValueArray = EMPTY_ARRAY;\n    }\n    let oldIndex = 0;\n    let newIndex = 0;\n    let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n    let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n    while (oldKey !== null || newKey !== null) {\n        ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n        ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n        const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n        const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n        let setKey = null;\n        let setValue = undefined;\n        if (oldKey === newKey) {\n            // UPDATE: Keys are equal => new value is overwriting old value.\n            oldIndex += 2;\n            newIndex += 2;\n            if (oldValue !== newValue) {\n                setKey = newKey;\n                setValue = newValue;\n            }\n        }\n        else if (newKey === null || oldKey !== null && oldKey < newKey) {\n            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n            // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n            // new array.\n            oldIndex += 2;\n            setKey = oldKey;\n        }\n        else {\n            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n            // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n            // old array.\n            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n            newIndex += 2;\n            setKey = newKey;\n            setValue = newValue;\n        }\n        if (setKey !== null) {\n            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n        }\n        oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n        newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n    }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n    if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n        // It is possible to have styling on non-elements (such as ng-container).\n        // This is rare, but it does happen. In such a case, just ignore the binding.\n        return;\n    }\n    const tData = tView.data;\n    const tRange = tData[bindingIndex + 1];\n    const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?\n        findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :\n        undefined;\n    if (!isStylingValuePresent(higherPriorityValue)) {\n        // We don't have a next duplicate, or we did not find a duplicate value.\n        if (!isStylingValuePresent(value)) {\n            // We should delete current value or restore to lower priority value.\n            if (getTStylingRangePrevDuplicate(tRange)) {\n                // We have a possible prev duplicate, let's retrieve it.\n                value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n            }\n        }\n        const rNode = getNativeByIndex(getSelectedIndex(), lView);\n        applyStyling(renderer, isClassBased, rNode, prop, value);\n    }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n    // `TNode` to use for resolving static styling. Also controls search direction.\n    //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n    //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n    //   - `null` search prev and go all the way to end. Return last value where\n    //     `isStylingValuePresent(value)` is true.\n    const isPrevDirection = tNode === null;\n    let value = undefined;\n    while (index > 0) {\n        const rawKey = tData[index];\n        const containsStatics = Array.isArray(rawKey);\n        // Unwrap the key if we contain static values.\n        const key = containsStatics ? rawKey[1] : rawKey;\n        const isStylingMap = key === null;\n        let valueAtLViewIndex = lView[index + 1];\n        if (valueAtLViewIndex === NO_CHANGE) {\n            // In firstUpdatePass the styling instructions create a linked list of styling.\n            // On subsequent passes it is possible for a styling instruction to try to read a binding\n            // which\n            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n            // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n            // allows the resolution to apply the value (which may later be overwritten when the\n            // binding actually executes.)\n            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n        }\n        let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :\n            (key === prop ? valueAtLViewIndex : undefined);\n        if (containsStatics && !isStylingValuePresent(currentValue)) {\n            currentValue = keyValueArrayGet(rawKey, prop);\n        }\n        if (isStylingValuePresent(currentValue)) {\n            value = currentValue;\n            if (isPrevDirection) {\n                return value;\n            }\n        }\n        const tRange = tData[index + 1];\n        index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n    }\n    if (tNode !== null) {\n        // in case where we are going in next direction AND we did not find anything, we need to\n        // consult residual styling\n        let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n        if (residual != null /** OR residual !=== undefined */) {\n            value = keyValueArrayGet(residual, prop);\n        }\n    }\n    return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n    // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n    // have an opinion as to what this binding should be and you should consult other bindings by\n    // priority to determine the valid value.\n    // This is extracted into a single function so that we have a single place to control this.\n    return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n    if (value == null /** || value === undefined */) {\n        // do nothing\n    }\n    else if (typeof suffix === 'string') {\n        value = value + suffix;\n    }\n    else if (typeof value === 'object') {\n        value = stringify(unwrapSafeValue(value));\n    }\n    return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n    return (tNode.flags & (isClassBased ? 16 /* TNodeFlags.hasClassInput */ : 32 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n    const lView = getLView();\n    const tView = getTView();\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && assertIndexInRange(lView, adjustedIndex);\n    const tNode = tView.firstCreatePass ?\n        getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) :\n        tView.data[adjustedIndex];\n    const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n    appendChild(tView, lView, textNative, tNode);\n    // Text nodes are self closing.\n    setCurrentTNode(tNode, false);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n    ɵɵtextInterpolate1('', v0, '');\n    return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation1(lView, prefix, v0, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n    const lView = getLView();\n    const interpolated = interpolationV(lView, values);\n    if (interpolated !== NO_CHANGE) {\n        textBindingInternal(lView, getSelectedIndex(), interpolated);\n    }\n    return ɵɵtextInterpolateV;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolateV(values) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolateV(values) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n    const lView = getLView();\n    const interpolatedValue = interpolationV(lView, values);\n    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n    return ɵɵstylePropInterpolateV;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n    const lView = getLView();\n    const bindingIndex = nextBindingIndex();\n    if (bindingUpdated(lView, bindingIndex, value)) {\n        const tView = getTView();\n        const tNode = getSelectedTNode();\n        const currentDef = getCurrentDirectiveDef(tView.data);\n        const renderer = loadComponentRenderer(currentDef, tNode, lView);\n        elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n    }\n    return ɵɵsyntheticHostProperty;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n    // These property accesses can be ignored because ngI18nClosureMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n    // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n    (function () {\n        // tslint:disable-next-line:no-toplevel-property-access\n        _global$1['ngI18nClosureMode'] =\n            // TODO(FW-1250): validate that this actually, you know, works.\n            // tslint:disable-next-line:no-toplevel-property-access\n            typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n    })();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n    const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[LocaleDataIndex.LocaleId];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n    }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction findLocaleData(locale) {\n    const normalizedLocale = normalizeLocale(locale);\n    let match = getLocaleData(normalizedLocale);\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    const parentLocale = normalizedLocale.split('-')[0];\n    match = getLocaleData(parentLocale);\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction getLocalePluralCase(locale) {\n    const data = findLocaleData(locale);\n    return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n    if (!(normalizedLocale in LOCALE_DATA)) {\n        LOCALE_DATA[normalizedLocale] = _global$1.ng && _global$1.ng.common && _global$1.ng.common.locales &&\n            _global$1.ng.common.locales[normalizedLocale];\n    }\n    return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n    LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n    LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n    LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n    LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n    LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n    LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n    LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n    LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n    LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n    LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n    LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n    LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n    LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n    return locale.toLowerCase().replace(/_/g, '-');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n    const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n    const result = pluralMapping[plural];\n    return (result !== undefined) ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n    marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n    /**\n     * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n     * `COMMENT`.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n    /**\n     * Should the node be appended to parent immediately after creation.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n    /**\n     * If set the node should be comment (rather than a text) node.\n     */\n    I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$2 = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n    assertDefined(localeId, `Expected localeId to be defined`);\n    if (typeof localeId === 'string') {\n        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n    }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n    return LOCALE_ID;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n    const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n    const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n    if (insertBeforeIndex === null) {\n        return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n    }\n    else {\n        ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n        return unwrapRNode(lView[insertBeforeIndex]);\n    }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n    const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n    if (Array.isArray(tNodeInsertBeforeIndex)) {\n        // An array indicates that there are i18n nodes that need to be added as children of this\n        // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n        // only now can be added. The first element of the array is the normal index where we should\n        // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n        // `childRNode`.\n        ngDevMode && assertDomNode(childRNode);\n        let i18nParent = childRNode;\n        let anchorRNode = null;\n        if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n            anchorRNode = i18nParent;\n            i18nParent = parentRElement;\n        }\n        if (i18nParent !== null && (childTNode.flags & 2 /* TNodeFlags.isComponentHost */) === 0) {\n            for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n                // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n                // see `assertDomNode` below.\n                const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n                nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n    // Start with Rule1\n    ngDevMode &&\n        assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n    previousTNodes.push(newTNode);\n    if (previousTNodes.length > 1) {\n        for (let i = previousTNodes.length - 2; i >= 0; i--) {\n            const existingTNode = previousTNodes[i];\n            // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n            // It is safe to ignore them.\n            if (!isI18nText(existingTNode)) {\n                if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&\n                    getInsertBeforeIndex(existingTNode) === null) {\n                    // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n                    // then add the `insertBeforeIndex`.\n                    setInsertBeforeIndex(existingTNode, newTNode.index);\n                }\n            }\n        }\n    }\n}\nfunction isI18nText(tNode) {\n    return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n    return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n    const index = tNode.insertBeforeIndex;\n    return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n    const index = tNode.insertBeforeIndex;\n    if (Array.isArray(index)) {\n        // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n        index[0] = value;\n    }\n    else {\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n        tNode.insertBeforeIndex = value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n    const value = tView.data[index];\n    if (value === null || typeof value === 'string')\n        return null;\n    if (ngDevMode &&\n        !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n        throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n    }\n    // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n    // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n    // will be just two cases which fits into the browser inline cache (inline cache can take up to\n    // 4)\n    const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value :\n        value.value;\n    ngDevMode && assertTIcu(tIcu);\n    return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n    const tNode = tView.data[index];\n    ngDevMode &&\n        assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n    if (tNode === null) {\n        tView.data[index] = tIcu;\n    }\n    else {\n        ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n        tNode.value = tIcu;\n    }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n    ngDevMode && assertTNode(tNode);\n    let insertBeforeIndex = tNode.insertBeforeIndex;\n    if (insertBeforeIndex === null) {\n        setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n        insertBeforeIndex = tNode.insertBeforeIndex =\n            [null /* may be updated to number later */, index];\n    }\n    else {\n        assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n        insertBeforeIndex.push(index);\n    }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n    const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n    addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n    return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n    const currentCase = lView[tIcu.currentCaseLViewIndex];\n    return currentCase === null ? currentCase : (currentCase < 0 ? ~currentCase : currentCase);\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n    return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n    return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n    return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n    ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n    ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n    return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n    if (hasChange) {\n        changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\n    }\n    changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n    if (changeMaskCounter > 0) {\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        const tI18n = tView.data[index];\n        // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n        const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n        const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n        applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n    }\n    // Reset changeMask & maskBit to default for the next update cycle\n    changeMask = 0b0;\n    changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n    const renderer = lView[RENDERER];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        const opCode = createOpCodes[i++];\n        const text = createOpCodes[i];\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\n        let rNode = lView[index];\n        if (rNode === null) {\n            // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n            // case which was already instantiated, no need to create new DOM nodes.\n            rNode = lView[index] =\n                isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n        }\n        if (appendNow && parentRNode !== null) {\n            nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n        }\n    }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n    ngDevMode && assertDomNode(anchorRNode);\n    const renderer = lView[RENDERER];\n    // `rootIdx` represents the node into which all inserts happen.\n    let rootIdx = null;\n    // `rootRNode` represents the real node into which we insert. This can be different from\n    // `lView[rootIdx]` if we have projection.\n    //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n    //    LView which has no parent.)\n    //  - `RElement` The element representing the root after taking projection into account.\n    let rootRNode;\n    for (let i = 0; i < mutableOpCodes.length; i++) {\n        const opCode = mutableOpCodes[i];\n        if (typeof opCode == 'string') {\n            const textNodeIndex = mutableOpCodes[++i];\n            if (lView[textNodeIndex] === null) {\n                ngDevMode && ngDevMode.rendererCreateTextNode++;\n                ngDevMode && assertIndexInRange(lView, textNodeIndex);\n                lView[textNodeIndex] = createTextNode(renderer, opCode);\n            }\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n                case 0 /* IcuCreateOpCode.AppendChild */:\n                    const parentIdx = getParentFromIcuCreateOpCode(opCode);\n                    if (rootIdx === null) {\n                        // The first operation should save the `rootIdx` because the first operation\n                        // must insert into the root. (Only subsequent operations can insert into a dynamic\n                        // parent)\n                        rootIdx = parentIdx;\n                        rootRNode = nativeParentNode(renderer, anchorRNode);\n                    }\n                    let insertInFrontOf;\n                    let parentRNode;\n                    if (parentIdx === rootIdx) {\n                        insertInFrontOf = anchorRNode;\n                        parentRNode = rootRNode;\n                    }\n                    else {\n                        insertInFrontOf = null;\n                        parentRNode = unwrapRNode(lView[parentIdx]);\n                    }\n                    // FIXME(misko): Refactor with `processI18nText`\n                    if (parentRNode !== null) {\n                        // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n                        // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n                        // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n                        // get picked up and added.\n                        ngDevMode && assertDomNode(parentRNode);\n                        const refIdx = getRefFromIcuCreateOpCode(opCode);\n                        ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n                        // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n                        // which can't have components.\n                        const child = lView[refIdx];\n                        ngDevMode && assertDomNode(child);\n                        nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n                        const tIcu = getTIcu(tView, refIdx);\n                        if (tIcu !== null && typeof tIcu === 'object') {\n                            // If we just added a comment node which has ICU then that ICU may have already been\n                            // rendered and therefore we need to re-add it here.\n                            ngDevMode && assertTIcu(tIcu);\n                            const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n                            if (caseIndex !== null) {\n                                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n                            }\n                        }\n                    }\n                    break;\n                case 1 /* IcuCreateOpCode.Attr */:\n                    const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n                    const attrName = mutableOpCodes[++i];\n                    const attrValue = mutableOpCodes[++i];\n                    // This code is used for ICU expressions only, since we don't support\n                    // directives/components in ICUs, we don't need to worry about inputs here\n                    setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n                    break;\n                default:\n                    if (ngDevMode) {\n                        throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n                    }\n            }\n        }\n        else {\n            switch (opCode) {\n                case ICU_MARKER:\n                    const commentValue = mutableOpCodes[++i];\n                    const commentNodeIndex = mutableOpCodes[++i];\n                    if (lView[commentNodeIndex] === null) {\n                        ngDevMode &&\n                            assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                        ngDevMode && ngDevMode.rendererCreateComment++;\n                        ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n                        const commentRNode = lView[commentNodeIndex] =\n                            createCommentNode(renderer, commentValue);\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n                        attachPatchData(commentRNode, lView);\n                    }\n                    break;\n                case ELEMENT_MARKER:\n                    const tagName = mutableOpCodes[++i];\n                    const elementNodeIndex = mutableOpCodes[++i];\n                    if (lView[elementNodeIndex] === null) {\n                        ngDevMode &&\n                            assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n                        ngDevMode && ngDevMode.rendererCreateElement++;\n                        ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n                        const elementRNode = lView[elementNodeIndex] =\n                            createElementNode(renderer, tagName, null);\n                        // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n                        attachPatchData(elementRNode, lView);\n                    }\n                    break;\n                default:\n                    ngDevMode &&\n                        throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        const checkBit = updateOpCodes[i];\n        // Number of opCodes to skip until next set of update codes\n        const skipCodes = updateOpCodes[++i];\n        if (checkBit & changeMask) {\n            // The value has been updated since last checked\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // Negative opCode represent `i18nExp` values offset.\n                        value += renderStringify(lView[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        const nodeIndex = (opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */);\n                        switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n                            case 1 /* I18nUpdateOpCode.Attr */:\n                                const propName = updateOpCodes[++j];\n                                const sanitizeFn = updateOpCodes[++j];\n                                const tNodeOrTagName = tView.data[nodeIndex];\n                                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                                if (typeof tNodeOrTagName === 'string') {\n                                    // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                                    // not have TNode), in which case we know that there are no directives, and hence\n                                    // we use attribute setting.\n                                    setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                                }\n                                else {\n                                    elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                                }\n                                break;\n                            case 0 /* I18nUpdateOpCode.Text */:\n                                const rText = lView[nodeIndex];\n                                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                                break;\n                            case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                                break;\n                            case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const opCode = updateOpCodes[i + 1];\n            if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n                // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n                // we still need to execute `icuUpdateCase` because the case has changed recently due to\n                // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n                // pairs.)\n                const nodeIndex = (opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */);\n                const tIcu = getTIcu(tView, nodeIndex);\n                const currentIndex = lView[tIcu.currentCaseLViewIndex];\n                if (currentIndex < 0) {\n                    applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n    ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n    let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n    if (activeCaseIndex !== null) {\n        let mask = changeMask;\n        if (activeCaseIndex < 0) {\n            // Clear the flag.\n            // Negative number means that the ICU was freshly created and we need to force the update.\n            activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n            // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n            mask = -1;\n        }\n        applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n    }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n    // Rebuild a new case for this ICU\n    const caseIndex = getCaseIndex(tIcu, value);\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n    if (activeCaseIndex !== caseIndex) {\n        applyIcuSwitchCaseRemove(tView, tIcu, lView);\n        lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n        if (caseIndex !== null) {\n            // Add the nodes for the new case\n            const anchorRNode = lView[tIcu.anchorIdx];\n            if (anchorRNode) {\n                ngDevMode && assertDomNode(anchorRNode);\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n            }\n        }\n    }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n    if (activeCaseIndex !== null) {\n        const removeCodes = tIcu.remove[activeCaseIndex];\n        for (let i = 0; i < removeCodes.length; i++) {\n            const nodeOrIcuIndex = removeCodes[i];\n            if (nodeOrIcuIndex > 0) {\n                // Positive numbers are `RNode`s.\n                const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n                rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n            }\n            else {\n                // Negative numbers are ICUs\n                applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n            }\n        }\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* IcuType.plural */: {\n                const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* IcuType.select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index === -1 ? null : index;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction loadIcuContainerVisitor() {\n    const _stack = [];\n    let _index = -1;\n    let _lView;\n    let _removes;\n    /**\n     * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n     * to determine which root belong to the ICU.\n     *\n     * Example of usage.\n     * ```\n     * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n     * let rNode: RNode|null;\n     * while(rNode = nextRNode()) {\n     *   console.log(rNode);\n     * }\n     * ```\n     *\n     * @param tIcuContainerNode Current `TIcuContainerNode`\n     * @param lView `LView` where the `RNode`s should be looked up.\n     */\n    function icuContainerIteratorStart(tIcuContainerNode, lView) {\n        _lView = lView;\n        while (_stack.length)\n            _stack.pop();\n        ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n        enterIcu(tIcuContainerNode.value, lView);\n        return icuContainerIteratorNext;\n    }\n    function enterIcu(tIcu, lView) {\n        _index = 0;\n        const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n        if (currentCase !== null) {\n            ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n            _removes = tIcu.remove[currentCase];\n        }\n        else {\n            _removes = EMPTY_ARRAY;\n        }\n    }\n    function icuContainerIteratorNext() {\n        if (_index < _removes.length) {\n            const removeOpCode = _removes[_index++];\n            ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n            if (removeOpCode > 0) {\n                const rNode = _lView[removeOpCode];\n                ngDevMode && assertDomNode(rNode);\n                return rNode;\n            }\n            else {\n                _stack.push(_index, _removes);\n                // ICUs are represented by negative indices\n                const tIcuIndex = ~removeOpCode;\n                const tIcu = _lView[TVIEW].data[tIcuIndex];\n                ngDevMode && assertTIcu(tIcu);\n                enterIcu(tIcu, _lView);\n                return icuContainerIteratorNext();\n            }\n        }\n        else {\n            if (_stack.length === 0) {\n                return null;\n            }\n            else {\n                _removes = _stack.pop();\n                _index = _stack.pop();\n                return icuContainerIteratorNext();\n            }\n        }\n    }\n    return icuContainerIteratorStart;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n    const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n    let lines = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        const opCode = createOpCodes[i++];\n        const text = createOpCodes[i];\n        const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n        const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n        const index = opCode >>> I18nCreateOpCode.SHIFT;\n        lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n        if (appendNow) {\n            lines.push(`parent.appendChild(lView[${index}]);`);\n        }\n    }\n    return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n    let lines = [];\n    function consumeOpCode(value) {\n        const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n        switch (opCode) {\n            case 0 /* I18nUpdateOpCode.Text */:\n                return `(lView[${ref}] as Text).textContent = $$$`;\n            case 1 /* I18nUpdateOpCode.Attr */:\n                const attrName = parser.consumeString();\n                const sanitizationFn = parser.consumeFunction();\n                const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n                return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n            case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                return `icuSwitchCase(${ref}, $$$)`;\n            case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                return `icuUpdateCase(${ref})`;\n        }\n        throw new Error('unexpected OpCode');\n    }\n    while (parser.hasMore()) {\n        let mask = parser.consumeNumber();\n        let size = parser.consumeNumber();\n        const end = parser.i + size;\n        const statements = [];\n        let statement = '';\n        while (parser.i < end) {\n            let value = parser.consumeNumberOrString();\n            if (typeof value === 'string') {\n                statement += value;\n            }\n            else if (value < 0) {\n                // Negative numbers are ref indexes\n                // Here `i` refers to current binding index. It is to signify that the value is relative,\n                // rather than absolute.\n                statement += '${lView[i' + value + ']}';\n            }\n            else {\n                // Positive numbers are operations.\n                const opCodeText = consumeOpCode(value);\n                statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n                statement = '';\n            }\n        }\n        lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n    }\n    return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n    let lines = [];\n    function consumeOpCode(opCode) {\n        const parent = getParentFromIcuCreateOpCode(opCode);\n        const ref = getRefFromIcuCreateOpCode(opCode);\n        switch (getInstructionFromIcuCreateOpCode(opCode)) {\n            case 0 /* IcuCreateOpCode.AppendChild */:\n                return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n            case 1 /* IcuCreateOpCode.Attr */:\n                return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n        }\n        throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n    }\n    let lastRef = -1;\n    while (parser.hasMore()) {\n        let value = parser.consumeNumberStringOrMarker();\n        if (value === ICU_MARKER) {\n            const text = parser.consumeString();\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n        }\n        else if (value === ELEMENT_MARKER) {\n            const text = parser.consumeString();\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n        }\n        else if (typeof value === 'string') {\n            lastRef = parser.consumeNumber();\n            lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n        }\n        else if (typeof value === 'number') {\n            const line = consumeOpCode(value);\n            line && lines.push(line);\n        }\n        else {\n            throw new Error('Unexpected value');\n        }\n    }\n    return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n    const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n    let lines = [];\n    for (let i = 0; i < removeCodes.length; i++) {\n        const nodeOrIcuIndex = removeCodes[i];\n        if (nodeOrIcuIndex > 0) {\n            // Positive numbers are `RNode`s.\n            lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n        }\n        else {\n            // Negative numbers are ICUs\n            lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n        }\n    }\n    return lines;\n}\nclass OpCodeParser {\n    constructor(codes) {\n        this.i = 0;\n        this.codes = codes;\n    }\n    hasMore() {\n        return this.i < this.codes.length;\n    }\n    consumeNumber() {\n        let value = this.codes[this.i++];\n        assertNumber(value, 'expecting number in OpCode');\n        return value;\n    }\n    consumeString() {\n        let value = this.codes[this.i++];\n        assertString(value, 'expecting string in OpCode');\n        return value;\n    }\n    consumeFunction() {\n        let value = this.codes[this.i++];\n        if (value === null || typeof value === 'function') {\n            return value;\n        }\n        throw new Error('expecting function in OpCode');\n    }\n    consumeNumberOrString() {\n        let value = this.codes[this.i++];\n        if (typeof value === 'string') {\n            return value;\n        }\n        assertNumber(value, 'expecting number or string in OpCode');\n        return value;\n    }\n    consumeNumberStringOrMarker() {\n        let value = this.codes[this.i++];\n        if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER ||\n            value == ELEMENT_MARKER) {\n            return value;\n        }\n        assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n        return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n    return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n    const rootTNode = getCurrentParentTNode();\n    const createOpCodes = [];\n    const updateOpCodes = [];\n    const existingTNodeStack = [[]];\n    if (ngDevMode) {\n        attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    message = getTranslationForTemplate(message, subTemplateIndex);\n    const msgParts = replaceNgsp(message).split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        let value = msgParts[i];\n        if ((i & 1) === 0) {\n            // Even indexes are text (including bindings & ICU expressions)\n            const parts = i18nParseTextIntoPartsAndICU(value);\n            for (let j = 0; j < parts.length; j++) {\n                let part = parts[j];\n                if ((j & 1) === 0) {\n                    // `j` is odd therefore `part` is string\n                    const text = part;\n                    ngDevMode && assertString(text, 'Parsed ICU part should be string');\n                    if (text !== '') {\n                        i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n                    }\n                }\n                else {\n                    // `j` is Even therefor `part` is an `ICUExpression`\n                    const icuExpression = part;\n                    // Verify that ICU expression has the right shape. Translations might contain invalid\n                    // constructions (while original messages were correct), so ICU parsing at runtime may\n                    // not succeed (thus `icuExpression` remains a string).\n                    // Note: we intentionally retain the error here by not using `ngDevMode`, because\n                    // the value can change based on the locale and users aren't guaranteed to hit\n                    // an invalid string while they're developing.\n                    if (typeof icuExpression !== 'object') {\n                        throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n                    }\n                    const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n                    const icuNodeIndex = icuContainerTNode.index;\n                    ngDevMode &&\n                        assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n                    icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n                }\n            }\n        }\n        else {\n            // Odd indexes are placeholders (elements and sub-templates)\n            // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n            const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n            const type = value.charCodeAt(isClosing ? 1 : 0);\n            ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n            const index = HEADER_OFFSET + Number.parseInt(value.substring((isClosing ? 2 : 1)));\n            if (isClosing) {\n                existingTNodeStack.shift();\n                setCurrentTNode(getCurrentParentTNode(), false);\n            }\n            else {\n                const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n                existingTNodeStack.unshift([]);\n                setCurrentTNode(tNode, true);\n            }\n        }\n    }\n    tView.data[index] = {\n        create: createOpCodes,\n        update: updateOpCodes,\n    };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n    const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n    let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n    let parentTNode = getCurrentParentTNode();\n    if (rootTNode === parentTNode) {\n        // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n        // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n        // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n        parentTNode = null;\n    }\n    if (parentTNode === null) {\n        // If we don't have a parent that means that we can eagerly add nodes.\n        // If we have a parent than these nodes can't be added now (as the parent has not been created\n        // yet) and instead the `parentTNode` is responsible for adding it. See\n        // `TNode.insertBeforeIndex`\n        opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n    }\n    if (isICU) {\n        opCode |= I18nCreateOpCode.COMMENT;\n        ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n    }\n    createOpCodes.push(opCode, text === null ? '' : text);\n    // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n    // bindings are.\n    const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? (ngDevMode ? '{{?}}' : '') : text, null);\n    addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n    const tNodeIdx = tNode.index;\n    setCurrentTNode(tNode, false /* Text nodes are self closing */);\n    if (parentTNode !== null && rootTNode !== parentTNode) {\n        // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n        // We have to make sure to add ourselves to the parent.\n        setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n    }\n    return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n    const hasBinding = text.match(BINDING_REGEXP);\n    const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n    if (hasBinding) {\n        generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n    }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    const previousElement = getCurrentTNode();\n    const previousElementIndex = previousElement.index;\n    const updateOpCodes = [];\n    if (ngDevMode) {\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    if (tView.firstCreatePass && tView.data[index] === null) {\n        for (let i = 0; i < values.length; i += 2) {\n            const attrName = values[i];\n            const message = values[i + 1];\n            if (message !== '') {\n                // Check if attribute value contains an ICU and throw an error if that's the case.\n                // ICUs in element attributes are not supported.\n                // Note: we intentionally retain the error here by not using `ngDevMode`, because\n                // the `value` can change based on the locale and users aren't guaranteed to hit\n                // an invalid string while they're developing.\n                if (ICU_REGEXP.test(message)) {\n                    throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n                }\n                // i18n attributes that hit this code path are guaranteed to have bindings, because\n                // the compiler treats static i18n attributes as regular attribute bindings.\n                // Since this may not be the first i18n attribute on this element we need to pass in how\n                // many previous bindings there have already been.\n                generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n            }\n        }\n        tView.data[index] = updateOpCodes;\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n    ngDevMode &&\n        assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n    const maskIndex = updateOpCodes.length; // Location of mask\n    const sizeIndex = maskIndex + 1; // location of size for skipping\n    updateOpCodes.push(null, null); // Alloc space for mask and size\n    const startIndex = maskIndex + 2; // location of first allocation.\n    if (ngDevMode) {\n        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n    }\n    const textParts = str.split(BINDING_REGEXP);\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            const bindingIndex = bindingStart + parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ |\n        (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[maskIndex] = mask;\n    updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n    return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n    let count = 0;\n    for (let i = 0; i < opCodes.length; i++) {\n        const opCode = opCodes[i];\n        // Bindings are negative numbers.\n        if (typeof opCode === 'number' && opCode < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\nfunction isRootTemplateMessage(subTemplateIndex) {\n    return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n    let match;\n    let res = '';\n    let index = 0;\n    let inTemplate = false;\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.slice(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (isRootTemplateMessage(subTemplateIndex)) {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n    ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n    let bindingMask = 0;\n    const tIcu = {\n        type: icuExpression.type,\n        currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n        anchorIdx,\n        cases: [],\n        create: [],\n        remove: [],\n        update: []\n    };\n    addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n    setTIcu(tView, anchorIdx, tIcu);\n    const values = icuExpression.values;\n    for (let i = 0; i < values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        const valueArr = values[i];\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                const icuIndex = nestedIcus.push(value) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) |\n            bindingMask;\n    }\n    if (bindingMask) {\n        addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n    }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n    const cases = [];\n    const values = [];\n    let icuType = 1 /* IcuType.plural */;\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* IcuType.select */;\n        }\n        else {\n            icuType = 1 /* IcuType.plural */;\n        }\n        mainBinding = parseInt(binding.slice(1), 10);\n        return '';\n    });\n    const parts = i18nParseTextIntoPartsAndICU(pattern);\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* IcuType.plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n        if (cases.length > values.length) {\n            values.push(blocks);\n        }\n    }\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    let prevPos = 0;\n    const braceStack = [];\n    const results = [];\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    let match;\n    while (match = braces.exec(pattern)) {\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else {\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    const substring = pattern.substring(prevPos);\n    results.push(substring);\n    return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n    const create = [];\n    const remove = [];\n    const update = [];\n    if (ngDevMode) {\n        attachDebugGetter(create, icuCreateOpCodesToString);\n        attachDebugGetter(remove, i18nRemoveOpCodesToString);\n        attachDebugGetter(update, i18nUpdateOpCodesToString);\n    }\n    tIcu.cases.push(caseName);\n    tIcu.create.push(create);\n    tIcu.remove.push(remove);\n    tIcu.update.push(update);\n    const inertBodyHelper = getInertBodyHelper(getDocument());\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n    ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n    const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n    if (inertRootNode) {\n        return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n    }\n    else {\n        return 0;\n    }\n}\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n    let bindingMask = 0;\n    let currentNode = parentNode.firstChild;\n    while (currentNode) {\n        const newIndex = allocExpando(tView, lView, 1, null);\n        switch (currentNode.nodeType) {\n            case Node.ELEMENT_NODE:\n                const element = currentNode;\n                const tagName = element.tagName.toLowerCase();\n                if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                    addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n                    tView.data[newIndex] = tagName;\n                    const elAttrs = element.attributes;\n                    for (let i = 0; i < elAttrs.length; i++) {\n                        const attr = elAttrs.item(i);\n                        const lowerAttrName = attr.name.toLowerCase();\n                        const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                        // we assume the input string is safe, unless it's using a binding\n                        if (hasBinding) {\n                            if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                if (URI_ATTRS[lowerAttrName]) {\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                                }\n                                else {\n                                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                                }\n                            }\n                            else {\n                                ngDevMode &&\n                                    console.warn(`WARNING: ignoring unsafe attribute value ` +\n                                        `${lowerAttrName} on element ${tagName} ` +\n                                        `(see https://g.co/ng/security#xss)`);\n                            }\n                        }\n                        else {\n                            addCreateAttribute(create, newIndex, attr);\n                        }\n                    }\n                    // Parse the children of this node (if any)\n                    bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) |\n                        bindingMask;\n                    addRemoveNode(remove, newIndex, depth);\n                }\n                break;\n            case Node.TEXT_NODE:\n                const value = currentNode.textContent || '';\n                const hasBinding = value.match(BINDING_REGEXP);\n                addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n                addRemoveNode(remove, newIndex, depth);\n                if (hasBinding) {\n                    bindingMask =\n                        generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n                }\n                break;\n            case Node.COMMENT_NODE:\n                // Check if the comment node is a placeholder for a nested ICU\n                const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n                if (isNestedIcu) {\n                    const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n                    const icuExpression = nestedIcus[nestedIcuIndex];\n                    // Create the comment node that will anchor the ICU expression\n                    addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n                    icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n                    addRemoveNestedIcu(remove, newIndex, depth);\n                }\n                break;\n        }\n        currentNode = currentNode.nextSibling;\n    }\n    return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n    if (depth === 0) {\n        remove.push(index);\n    }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n    if (depth === 0) {\n        remove.push(~index); // remove ICU at `index`\n        remove.push(index); // remove ICU comment at `index`\n    }\n}\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n    update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n    update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n    if (marker !== null) {\n        create.push(marker);\n    }\n    create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n    create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n    /**\n     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n     * front of �#6�. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     */\n    let result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        const matches = {};\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n            const content = phs || tmpl;\n            const placeholders = matches[content] || [];\n            if (!placeholders.length) {\n                content.split('|').forEach((placeholder) => {\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                });\n                matches[content] = placeholders;\n            }\n            if (!placeholders.length) {\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n            }\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n            let idx = 0;\n            // find placeholder index that matches current template id\n            for (let i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n            if (isCloseTemplateTag) {\n                templateIdsStack.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        });\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    });\n    /**\n     * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n     */\n    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n        return replacements.hasOwnProperty(key) ? replacements[key] : match;\n    });\n    /**\n     * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            const list = replacements[key];\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return list.shift();\n        }\n        return match;\n    });\n    return result;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n    const tView = getTView();\n    const lView = getLView();\n    const adjustedIndex = HEADER_OFFSET + index;\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const message = getConstant(tView.consts, messageIndex);\n    const parentTNode = getCurrentParentTNode();\n    if (tView.firstCreatePass) {\n        i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n    }\n    const tI18n = tView.data[adjustedIndex];\n    const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n    const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n    // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n    // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n    const insertInFrontOf = parentTNode && (parentTNode.type & 8 /* TNodeType.ElementContainer */) ?\n        lView[parentTNode.index] :\n        null;\n    applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n    setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n    setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n    ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n    ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n    const tView = getTView();\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const attrs = getConstant(tView.consts, attrsIndex);\n    i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n    const lView = getLView();\n    setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n    return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n    applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n    return i18nPostprocess(message, replacements);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        const isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        const tView = getTView();\n        const lView = getLView();\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        let providerFactory = providerToFactory(provider);\n        const tNode = getCurrentTNode();\n        const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n        const endIndex = tNode.directiveStart;\n        const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex === -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex :\n                    existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n                registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :\n                    existingViewProvidersFactoryIndex, indexInFactory);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n            }\n        }\n    }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n    const providerIsTypeProvider = isTypeProvider(provider);\n    const providerIsClassProvider = isClassProvider(provider);\n    if (providerIsTypeProvider || providerIsClassProvider) {\n        // Resolve forward references as `useClass` can hold a forward reference.\n        const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n        const prototype = classToken.prototype;\n        const ngOnDestroy = prototype.ngOnDestroy;\n        if (ngOnDestroy) {\n            const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n            if (!providerIsTypeProvider && provider.multi) {\n                ngDevMode &&\n                    assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n                const existingCallbacksIndex = hooks.indexOf(contextIndex);\n                if (existingCallbacksIndex === -1) {\n                    hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n                }\n                else {\n                    hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n                }\n            }\n            else {\n                hooks.push(contextIndex, ngOnDestroy);\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    if (isComponentProvider) {\n        multiFactory.componentProviders++;\n    }\n    return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n    const factories = this.multi;\n    let result;\n    if (this.providerFactory) {\n        const componentCount = this.providerFactory.componentProviders;\n        const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        const factory = factories[i];\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n    return (definition) => {\n        definition.providersResolver =\n            (def, processProvidersFn) => {\n                return providersResolver(def, //\n                processProvidersFn ? processProvidersFn(providers) : providers, //\n                viewProviders);\n            };\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nclass NgModuleRef$1 {\n}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nclass NgModuleFactory$1 {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n    return new NgModuleRef(ngModule, parentInjector ?? null);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n    constructor(ngModuleType, _parent) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.destroyCbs = [];\n        // When bootstrapping a module we have a dependency graph that looks like this:\n        // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n        // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n        // circular dependency which will result in a runtime error, because the injector doesn't\n        // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n        // and providing it, rather than letting the injector resolve it.\n        this.componentFactoryResolver = new ComponentFactoryResolver(this);\n        const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode &&\n            assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        this._bootstrapComponents = maybeUnwrapFn$1(ngModuleDef.bootstrap);\n        this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [\n            { provide: NgModuleRef$1, useValue: this }, {\n                provide: ComponentFactoryResolver$1,\n                useValue: this.componentFactoryResolver\n            }\n        ], stringify(ngModuleType), new Set(['environment']));\n        // We need to resolve the injector types separately from the injector creation, because\n        // the module might be trying to use this ref in its constructor for DI which will cause a\n        // circular error that will eventually error out, because the injector isn't created yet.\n        this._r3Injector.resolveInjectorInitializers();\n        this.instance = this._r3Injector.get(ngModuleType);\n    }\n    get injector() {\n        return this._r3Injector;\n    }\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        const injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        this.destroyCbs.forEach(fn => fn());\n        this.destroyCbs = null;\n    }\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        this.destroyCbs.push(callback);\n    }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n    }\n    create(parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    }\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n    constructor(providers, parent, source) {\n        super();\n        this.componentFactoryResolver = new ComponentFactoryResolver(this);\n        this.instance = null;\n        const injector = new R3Injector([\n            ...providers,\n            { provide: NgModuleRef$1, useValue: this },\n            { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver },\n        ], parent || getNullInjector(), source, new Set(['environment']));\n        this.injector = injector;\n        injector.resolveInjectorInitializers();\n    }\n    destroy() {\n        this.injector.destroy();\n    }\n    onDestroy(callback) {\n        this.injector.onDestroy(callback);\n    }\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n * @developerPreview\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n    const adapter = new EnvironmentNgModuleRefAdapter(providers, parent, debugName);\n    return adapter.injector;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService {\n    constructor(_injector) {\n        this._injector = _injector;\n        this.cachedInjectors = new Map();\n    }\n    getOrCreateStandaloneInjector(componentDef) {\n        if (!componentDef.standalone) {\n            return null;\n        }\n        if (!this.cachedInjectors.has(componentDef.id)) {\n            const providers = internalImportProvidersFrom(false, componentDef.type);\n            const standaloneInjector = providers.length > 0 ?\n                createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) :\n                null;\n            this.cachedInjectors.set(componentDef.id, standaloneInjector);\n        }\n        return this.cachedInjectors.get(componentDef.id);\n    }\n    ngOnDestroy() {\n        try {\n            for (const injector of this.cachedInjectors.values()) {\n                if (injector !== null) {\n                    injector.destroy();\n                }\n            }\n        }\n        finally {\n            this.cachedInjectors.clear();\n        }\n    }\n}\n/** @nocollapse */\nStandaloneService.ɵprov = ɵɵdefineInjectable({\n    token: StandaloneService,\n    providedIn: 'environment',\n    factory: () => new StandaloneService(ɵɵinject(EnvironmentInjector)),\n});\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nfunction ɵɵStandaloneFeature(definition) {\n    definition.getStandaloneInjector = (parentInjector) => {\n        return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getComponent(element) {\n    ngDevMode && assertDomElement(element);\n    const context = getLContext(element);\n    if (context === null)\n        return null;\n    if (context.component === undefined) {\n        const lView = context.lView;\n        if (lView === null) {\n            return null;\n        }\n        context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n    }\n    return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getContext(element) {\n    assertDomElement(element);\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getOwningComponent(elementOrDir) {\n    const context = getLContext(elementOrDir);\n    let lView = context ? context.lView : null;\n    if (lView === null)\n        return null;\n    let parent;\n    while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n        lView = parent;\n    }\n    return lView[FLAGS] & 256 /* LViewFlags.IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getRootComponents(elementOrDir) {\n    const lView = readPatchedLView(elementOrDir);\n    return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getInjector(elementOrDir) {\n    const context = getLContext(elementOrDir);\n    const lView = context ? context.lView : null;\n    if (lView === null)\n        return Injector.NULL;\n    const tNode = lView[TVIEW].data[context.nodeIndex];\n    return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null)\n        return [];\n    const tView = lView[TVIEW];\n    const tNode = tView.data[context.nodeIndex];\n    const providerTokens = [];\n    const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectives(node) {\n    // Skip text nodes because we can't have directives associated with them.\n    if (node instanceof Text) {\n        return [];\n    }\n    const context = getLContext(node);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n        return [];\n    }\n    const tView = lView[TVIEW];\n    const nodeIndex = context.nodeIndex;\n    if (!tView?.data[nodeIndex]) {\n        return [];\n    }\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n    }\n    // The `directives` in this case are a named array called `LComponentView`. Clone the\n    // result so we don't expose an internal data structure in the user's console.\n    return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectiveMetadata(directiveOrComponentInstance) {\n    const { constructor } = directiveOrComponentInstance;\n    if (!constructor) {\n        throw new Error('Unable to find the instance constructor');\n    }\n    // In case a component inherits from a directive, we may have component and directive metadata\n    // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n    const componentDef = getComponentDef$1(constructor);\n    if (componentDef) {\n        return {\n            inputs: componentDef.inputs,\n            outputs: componentDef.outputs,\n            encapsulation: componentDef.encapsulation,\n            changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush :\n                ChangeDetectionStrategy.Default\n        };\n    }\n    const directiveDef = getDirectiveDef(constructor);\n    if (directiveDef) {\n        return { inputs: directiveDef.inputs, outputs: directiveDef.outputs };\n    }\n    return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n    const context = getLContext(target);\n    if (context === null)\n        return {};\n    if (context.localRefs === undefined) {\n        const lView = context.lView;\n        if (lView === null) {\n            return {};\n        }\n        context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getHostElement(componentOrDirective) {\n    return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nfunction getRenderedText(component) {\n    const hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getListeners(element) {\n    ngDevMode && assertDomElement(element);\n    const lContext = getLContext(element);\n    const lView = lContext === null ? null : lContext.lView;\n    if (lView === null)\n        return [];\n    const tView = lView[TVIEW];\n    const lCleanup = lView[CLEANUP];\n    const tCleanup = tView.cleanup;\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            const firstParam = tCleanup[i++];\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                const name = firstParam;\n                const listenerElement = unwrapRNode(lView[secondParam]);\n                const callback = lCleanup[tCleanup[i++]];\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                const type = (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture, type });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n/**\n * Returns the attached `DebugNode` instance for an element in the DOM.\n *\n * @param element DOM element which is owned by an existing component's view.\n */\nfunction getDebugNode(element) {\n    if (ngDevMode && !(element instanceof Node)) {\n        throw new Error('Expecting instance of DOM Element');\n    }\n    const lContext = getLContext(element);\n    const lView = lContext ? lContext.lView : null;\n    if (lView === null) {\n        return null;\n    }\n    const nodeIndex = lContext.nodeIndex;\n    if (nodeIndex !== -1) {\n        const valueInLView = lView[nodeIndex];\n        // this means that value in the lView is a component with its own\n        // data. In this situation the TNode is not accessed at the same spot.\n        const tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);\n        ngDevMode &&\n            assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');\n        return buildDebugNode(tNode, lView);\n    }\n    return null;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nfunction getComponentLView(target) {\n    const lContext = getLContext(target);\n    const nodeIndx = lContext.nodeIndex;\n    const lView = lContext.lView;\n    ngDevMode && assertLView(lView);\n    const componentLView = lView[nodeIndx];\n    ngDevMode && assertLView(componentLView);\n    return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n    if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n        throw new Error('Expecting instance of DOM Element');\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    return noSideEffects(() => {\n        const clazz = type;\n        if (decorators !== null) {\n            if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n                clazz.decorators.push(...decorators);\n            }\n            else {\n                clazz.decorators = decorators;\n            }\n        }\n        if (ctorParameters !== null) {\n            // Rather than merging, clobber the existing parameters. If other projects exist which\n            // use tsickle-style annotations and reflect over them in the same way, this could\n            // cause issues, but that is vanishingly unlikely.\n            clazz.ctorParameters = ctorParameters;\n        }\n        if (propDecorators !== null) {\n            // The property decorator objects are merged as it is possible different fields have\n            // different decorator types. Decorators on individual fields are not merged, as it's\n            // also incredibly unlikely that a field will be decorated both with an Angular\n            // decorator and a non-Angular decorator that's also been downleveled.\n            if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n                clazz.propDecorators = { ...clazz.propDecorators, ...propDecorators };\n            }\n            else {\n                clazz.propDecorators = propDecorators;\n            }\n        }\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    return lView[bindingIndex] === NO_CHANGE ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n    return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    const bindingIndex = getBindingRoot() + slotOffset;\n    const lView = getLView();\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n    ngDevMode && assertIndexInRange(lView, returnValueIndex);\n    const lastReturnValue = lView[returnValueIndex];\n    return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    const bindingIndex = bindingRoot + slotOffset;\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n    let bindingIndex = bindingRoot + slotOffset;\n    let different = false;\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n    const tView = getTView();\n    let pipeDef;\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstCreatePass) {\n        // The `getPipeDef` throws if a pipe with a given name is not found\n        // (so we use non-null assertion below).\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = tView.data[adjustedIndex];\n    }\n    const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n    const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n    try {\n        // DI for pipes is supposed to behave like directives when placed on a component\n        // host node, which means that we have to disable access to `viewProviders`.\n        const previousIncludeViewProviders = setIncludeViewProviders(false);\n        const pipeInstance = pipeFactory();\n        setIncludeViewProviders(previousIncludeViewProviders);\n        store(tView, getLView(), adjustedIndex, pipeInstance);\n        return pipeInstance;\n    }\n    finally {\n        // we have to restore the injector implementation in finally, just in case the creation of the\n        // pipe throws an error.\n        setInjectImplementation(previousInjectImplementation);\n    }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    if (ngDevMode) {\n        throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n    }\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n    const lView = getLView();\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    const hostIsStandalone = isHostComponentStandalone(lView);\n    const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n    const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n        'declared or imported in this module'}`;\n    const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n    return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, slotOffset, v1) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n    const adjustedIndex = index + HEADER_OFFSET;\n    const lView = getLView();\n    const pipeInstance = load(lView, adjustedIndex);\n    return isPure(lView, adjustedIndex) ?\n        pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n    return lView[TVIEW].data[index].pure;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass EventEmitter_ extends Subject {\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    emit(value) {\n        super.next(value);\n    }\n    subscribe(observerOrNext, error, complete) {\n        let nextFn = observerOrNext;\n        let errorFn = error || (() => null);\n        let completeFn = complete;\n        if (observerOrNext && typeof observerOrNext === 'object') {\n            const observer = observerOrNext;\n            nextFn = observer.next?.bind(observer);\n            errorFn = observer.error?.bind(observer);\n            completeFn = observer.complete?.bind(observer);\n        }\n        if (this.__isAsync) {\n            errorFn = _wrapInTimeout(errorFn);\n            if (nextFn) {\n                nextFn = _wrapInTimeout(nextFn);\n            }\n            if (completeFn) {\n                completeFn = _wrapInTimeout(completeFn);\n            }\n        }\n        const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });\n        if (observerOrNext instanceof Subscription) {\n            observerOrNext.add(sink);\n        }\n        return sink;\n    }\n}\nfunction _wrapInTimeout(fn) {\n    return (value) => {\n        setTimeout(fn, undefined, value);\n    };\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction symbolIterator() {\n    return this._results[getSymbolIterator()]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n    /**\n     * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n     *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n     *     the same result)\n     */\n    constructor(_emitDistinctChangesOnly = false) {\n        this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n        this.dirty = true;\n        this._results = [];\n        this._changesDetected = false;\n        this._changes = null;\n        this.length = 0;\n        this.first = undefined;\n        this.last = undefined;\n        // This function should be declared on the prototype, but doing so there will cause the class\n        // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n        // the constructor.\n        // [getSymbolIterator()](): Iterator<T> { ... }\n        const symbol = getSymbolIterator();\n        const proto = QueryList.prototype;\n        if (!proto[symbol])\n            proto[symbol] = symbolIterator;\n    }\n    /**\n     * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n     */\n    get changes() {\n        return this._changes || (this._changes = new EventEmitter());\n    }\n    /**\n     * Returns the QueryList entry at `index`.\n     */\n    get(index) {\n        return this._results[index];\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    map(fn) {\n        return this._results.map(fn);\n    }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    forEach(fn) {\n        this._results.forEach(fn);\n    }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * Returns a copy of the internal results list as an Array.\n     */\n    toArray() {\n        return this._results.slice();\n    }\n    toString() {\n        return this._results.toString();\n    }\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param resultsTree The query results to store\n     * @param identityAccessor Optional function for extracting stable object identity from a value\n     *    in the array. This function is executed for each element of the query result list while\n     *    comparing current query list with the new one (provided as a first argument of the `reset`\n     *    function) to detect if the lists are different. If the function is not provided, elements\n     *    are compared as is (without any pre-processing).\n     */\n    reset(resultsTree, identityAccessor) {\n        // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n        // QueryList (but not for QueryList itself.)\n        const self = this;\n        self.dirty = false;\n        const newResultFlat = flatten$1(resultsTree);\n        if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n            self._results = newResultFlat;\n            self.length = newResultFlat.length;\n            self.last = newResultFlat[this.length - 1];\n            self.first = newResultFlat[0];\n        }\n    }\n    /**\n     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n     */\n    notifyOnChanges() {\n        if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly))\n            this._changes.emit(this);\n    }\n    /** internal */\n    setDirty() {\n        this.dirty = true;\n    }\n    /** internal */\n    destroy() {\n        this.changes.complete();\n        this.changes.unsubscribe();\n    }\n}\nSymbol.iterator;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nclass TemplateRef {\n}\n/**\n * @internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;\nconst ViewEngineTemplateRef = TemplateRef;\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n    constructor(_declarationLView, _declarationTContainer, elementRef) {\n        super();\n        this._declarationLView = _declarationLView;\n        this._declarationTContainer = _declarationTContainer;\n        this.elementRef = elementRef;\n    }\n    createEmbeddedView(context, injector) {\n        const embeddedTView = this._declarationTContainer.tViews;\n        const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16 /* LViewFlags.CheckAlways */, null, embeddedTView.declTNode, null, null, null, null, injector || null);\n        const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n        ngDevMode && assertLContainer(declarationLContainer);\n        embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n        const declarationViewLQueries = this._declarationLView[QUERIES];\n        if (declarationViewLQueries !== null) {\n            embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n        }\n        renderView(embeddedTView, embeddedLView, context);\n        return new ViewRef(embeddedLView);\n    }\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n    return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n    if (hostTNode.type & 4 /* TNodeType.Container */) {\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nclass ViewContainerRef {\n}\n/**\n * @internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef() {\n    const previousTNode = getCurrentTNode();\n    return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n    constructor(_lContainer, _hostTNode, _hostLView) {\n        super();\n        this._lContainer = _lContainer;\n        this._hostTNode = _hostTNode;\n        this._hostLView = _hostLView;\n    }\n    get element() {\n        return createElementRef(this._hostTNode, this._hostLView);\n    }\n    get injector() {\n        return new NodeInjector(this._hostTNode, this._hostLView);\n    }\n    /** @deprecated No replacement */\n    get parentInjector() {\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n        if (hasParentInjector(parentLocation)) {\n            const parentView = getParentInjectorView(parentLocation, this._hostLView);\n            const injectorIndex = getParentInjectorIndex(parentLocation);\n            ngDevMode && assertNodeInjector(parentView, injectorIndex);\n            const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n            return new NodeInjector(parentTNode, parentView);\n        }\n        else {\n            return new NodeInjector(null, this._hostLView);\n        }\n    }\n    clear() {\n        while (this.length > 0) {\n            this.remove(this.length - 1);\n        }\n    }\n    get(index) {\n        const viewRefs = getViewRefs(this._lContainer);\n        return viewRefs !== null && viewRefs[index] || null;\n    }\n    get length() {\n        return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n    }\n    createEmbeddedView(templateRef, context, indexOrOptions) {\n        let index;\n        let injector;\n        if (typeof indexOrOptions === 'number') {\n            index = indexOrOptions;\n        }\n        else if (indexOrOptions != null) {\n            index = indexOrOptions.index;\n            injector = indexOrOptions.injector;\n        }\n        const viewRef = templateRef.createEmbeddedView(context || {}, injector);\n        this.insert(viewRef, index);\n        return viewRef;\n    }\n    createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n        const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n        let index;\n        // This function supports 2 signatures and we need to handle options correctly for both:\n        //   1. When first argument is a Component type. This signature also requires extra\n        //      options to be provided as as object (more ergonomic option).\n        //   2. First argument is a Component factory. In this case extra options are represented as\n        //      positional arguments. This signature is less ergonomic and will be deprecated.\n        if (isComponentFactory) {\n            if (ngDevMode) {\n                assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' +\n                    'and an options object as the second argument. This combination of arguments ' +\n                    'is incompatible. You can either change the first argument to provide Component ' +\n                    'type or change the second argument to be a number (representing an index at ' +\n                    'which to insert the new component\\'s host view into this container)');\n            }\n            index = indexOrOptions;\n        }\n        else {\n            if (ngDevMode) {\n                assertDefined(getComponentDef$1(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` +\n                    `Please check whether provided class has @Component decorator.`);\n                assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' +\n                    'and a number (representing an index at which to insert the new component\\'s ' +\n                    'host view into this container as the second argument. This combination of arguments ' +\n                    'is incompatible. Please use an object as the second argument instead.');\n            }\n            const options = (indexOrOptions || {});\n            if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n                throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n            }\n            index = options.index;\n            injector = options.injector;\n            projectableNodes = options.projectableNodes;\n            environmentInjector = options.environmentInjector || options.ngModuleRef;\n        }\n        const componentFactory = isComponentFactory ?\n            componentFactoryOrType :\n            new ComponentFactory(getComponentDef$1(componentFactoryOrType));\n        const contextInjector = injector || this.parentInjector;\n        // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n        if (!environmentInjector && componentFactory.ngModule == null) {\n            // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n            // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n            // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n            // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n            // using a provided injector first, then fall back to the parent injector of this\n            // `ViewContainerRef` instance.\n            //\n            // For the factory-less case, it's critical to establish a connection with the module\n            // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n            // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n            // rely on the provided injector, since it might be detached from the DI tree (for example, if\n            // it was created via `Injector.create` without specifying a parent injector, or if an\n            // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n            // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n            // injector, which is normally connected to the DI tree, which includes module injector\n            // subtree.\n            const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n            // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n            // undefined` expression which seems to cause internal google apps to fail. This is documented\n            // in the following internal bug issue: go/b/142967802\n            const result = _injector.get(EnvironmentInjector, null);\n            if (result) {\n                environmentInjector = result;\n            }\n        }\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, environmentInjector);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    }\n    insert(viewRef, index) {\n        const lView = viewRef._lView;\n        const tView = lView[TVIEW];\n        if (ngDevMode && viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        if (viewAttachedToContainer(lView)) {\n            // If view is already attached, detach it first so we clean up references appropriately.\n            const prevIdx = this.indexOf(viewRef);\n            // A view might be attached either to this or a different container. The `prevIdx` for\n            // those cases will be:\n            // equal to -1 for views attached to this ViewContainerRef\n            // >= 0 for views attached to a different ViewContainerRef\n            if (prevIdx !== -1) {\n                this.detach(prevIdx);\n            }\n            else {\n                const prevLContainer = lView[PARENT];\n                ngDevMode &&\n                    assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n                // We need to re-create a R3ViewContainerRef instance since those are not stored on\n                // LView (nor anywhere else).\n                const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n                prevVCRef.detach(prevVCRef.indexOf(viewRef));\n            }\n        }\n        // Logical operation of adding `LView` to `LContainer`\n        const adjustedIdx = this._adjustIndex(index);\n        const lContainer = this._lContainer;\n        insertView(tView, lView, lContainer, adjustedIdx);\n        // Physical operation of adding the DOM nodes.\n        const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n        const renderer = lView[RENDERER];\n        const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n        if (parentRNode !== null) {\n            addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n        }\n        viewRef.attachToViewContainerRef();\n        addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n        return viewRef;\n    }\n    move(viewRef, newIndex) {\n        if (ngDevMode && viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        return this.insert(viewRef, newIndex);\n    }\n    indexOf(viewRef) {\n        const viewRefsArr = getViewRefs(this._lContainer);\n        return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n    }\n    remove(index) {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const detachedView = detachView(this._lContainer, adjustedIdx);\n        if (detachedView) {\n            // Before destroying the view, remove it from the container's array of `ViewRef`s.\n            // This ensures the view container length is updated before calling\n            // `destroyLView`, which could recursively call view container methods that\n            // rely on an accurate container length.\n            // (e.g. a method on this view container being called by a child directive's OnDestroy\n            // lifecycle hook)\n            removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n            destroyLView(detachedView[TVIEW], detachedView);\n        }\n    }\n    detach(index) {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const view = detachView(this._lContainer, adjustedIdx);\n        const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n        return wasDetached ? new ViewRef(view) : null;\n    }\n    _adjustIndex(index, shift = 0) {\n        if (index == null) {\n            return this.length + shift;\n        }\n        if (ngDevMode) {\n            assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n            // +1 because it's legal to insert at the end.\n            assertLessThan(index, this.length + 1 + shift, 'index');\n        }\n        return index;\n    }\n};\nfunction getViewRefs(lContainer) {\n    return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n    return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []));\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n    ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n    let lContainer;\n    const slotValue = hostLView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n    }\n    else {\n        let commentNode;\n        // If the host is an element container, the native host element is guaranteed to be a\n        // comment and we can reuse that comment as anchor element for the new LContainer.\n        // The comment node in question is already part of the DOM structure so we don't need to append\n        // it again.\n        if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n            commentNode = unwrapRNode(slotValue);\n        }\n        else {\n            // If the host is a regular element, we have to insert a comment node manually which will\n            // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n            // manipulation to insert it.\n            const renderer = hostLView[RENDERER];\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n            const hostNative = getNativeByTNode(hostTNode, hostLView);\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n        }\n        hostLView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostLView, commentNode, hostTNode);\n        addToViewTree(hostLView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$1 = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd = 1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$6 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd;\nclass LQuery_ {\n    constructor(queryList) {\n        this.queryList = queryList;\n        this.matches = null;\n    }\n    clone() {\n        return new LQuery_(this.queryList);\n    }\n    setDirty() {\n        this.queryList.setDirty();\n    }\n}\nclass LQueries_ {\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    createEmbeddedView(tView) {\n        const tQueries = tView.queries;\n        if (tQueries !== null) {\n            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n            const viewLQueries = [];\n            // An embedded view has queries propagated from a declaration view at the beginning of the\n            // TQueries collection and up until a first content query declared in the embedded view. Only\n            // propagated LQueries are created at this point (LQuery corresponding to declared content\n            // queries will be instantiated from the content query instructions for each directive).\n            for (let i = 0; i < noOfInheritedQueries; i++) {\n                const tQuery = tQueries.getByIndex(i);\n                const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n                viewLQueries.push(parentLQuery.clone());\n            }\n            return new LQueries_(viewLQueries);\n        }\n        return null;\n    }\n    insertView(tView) {\n        this.dirtyQueriesWithMatches(tView);\n    }\n    detachView(tView) {\n        this.dirtyQueriesWithMatches(tView);\n    }\n    dirtyQueriesWithMatches(tView) {\n        for (let i = 0; i < this.queries.length; i++) {\n            if (getTQuery(tView, i).matches !== null) {\n                this.queries[i].setDirty();\n            }\n        }\n    }\n}\nclass TQueryMetadata_ {\n    constructor(predicate, flags, read = null) {\n        this.predicate = predicate;\n        this.flags = flags;\n        this.read = read;\n    }\n}\nclass TQueries_ {\n    constructor(queries = []) {\n        this.queries = queries;\n    }\n    elementStart(tView, tNode) {\n        ngDevMode &&\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].elementStart(tView, tNode);\n        }\n    }\n    elementEnd(tNode) {\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].elementEnd(tNode);\n        }\n    }\n    embeddedTView(tNode) {\n        let queriesForTemplateRef = null;\n        for (let i = 0; i < this.length; i++) {\n            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n            if (tqueryClone) {\n                tqueryClone.indexInDeclarationView = i;\n                if (queriesForTemplateRef !== null) {\n                    queriesForTemplateRef.push(tqueryClone);\n                }\n                else {\n                    queriesForTemplateRef = [tqueryClone];\n                }\n            }\n        }\n        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n    }\n    template(tView, tNode) {\n        ngDevMode &&\n            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n        for (let i = 0; i < this.queries.length; i++) {\n            this.queries[i].template(tView, tNode);\n        }\n    }\n    getByIndex(index) {\n        ngDevMode && assertIndexInRange(this.queries, index);\n        return this.queries[index];\n    }\n    get length() {\n        return this.queries.length;\n    }\n    track(tquery) {\n        this.queries.push(tquery);\n    }\n}\nclass TQuery_ {\n    constructor(metadata, nodeIndex = -1) {\n        this.metadata = metadata;\n        this.matches = null;\n        this.indexInDeclarationView = -1;\n        this.crossesNgTemplate = false;\n        /**\n         * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n         * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n         * elements in a template.\n         */\n        this._appliesToNextNode = true;\n        this._declarationNodeIndex = nodeIndex;\n    }\n    elementStart(tView, tNode) {\n        if (this.isApplyingToNode(tNode)) {\n            this.matchTNode(tView, tNode);\n        }\n    }\n    elementEnd(tNode) {\n        if (this._declarationNodeIndex === tNode.index) {\n            this._appliesToNextNode = false;\n        }\n    }\n    template(tView, tNode) {\n        this.elementStart(tView, tNode);\n    }\n    embeddedTView(tNode, childQueryIndex) {\n        if (this.isApplyingToNode(tNode)) {\n            this.crossesNgTemplate = true;\n            // A marker indicating a `<ng-template>` element (a placeholder for query results from\n            // embedded views created based on this `<ng-template>`).\n            this.addMatch(-tNode.index, childQueryIndex);\n            return new TQuery_(this.metadata);\n        }\n        return null;\n    }\n    isApplyingToNode(tNode) {\n        if (this._appliesToNextNode &&\n            (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n            const declarationNodeIdx = this._declarationNodeIndex;\n            let parent = tNode.parent;\n            // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n            // declared (only direct children of query's host node can match with the descendants: false\n            // option). There are 3 main use-case / conditions to consider here:\n            // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n            // host node;\n            // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n            // here <i #target> parent node is null;\n            // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n            // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n            // up past the query's host node!).\n            while (parent !== null && (parent.type & 8 /* TNodeType.ElementContainer */) &&\n                parent.index !== declarationNodeIdx) {\n                parent = parent.parent;\n            }\n            return declarationNodeIdx === (parent !== null ? parent.index : -1);\n        }\n        return this._appliesToNextNode;\n    }\n    matchTNode(tView, tNode) {\n        const predicate = this.metadata.predicate;\n        if (Array.isArray(predicate)) {\n            for (let i = 0; i < predicate.length; i++) {\n                const name = predicate[i];\n                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n                // Also try matching the name to a provider since strings can be used as DI tokens too.\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n            }\n        }\n        else {\n            if (predicate === TemplateRef) {\n                if (tNode.type & 4 /* TNodeType.Container */) {\n                    this.matchTNodeWithReadOption(tView, tNode, -1);\n                }\n            }\n            else {\n                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n            }\n        }\n    }\n    matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n        if (nodeMatchIdx !== null) {\n            const read = this.metadata.read;\n            if (read !== null) {\n                if (read === ElementRef || read === ViewContainerRef ||\n                    read === TemplateRef && (tNode.type & 4 /* TNodeType.Container */)) {\n                    this.addMatch(tNode.index, -2);\n                }\n                else {\n                    const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n                    if (directiveOrProviderIdx !== null) {\n                        this.addMatch(tNode.index, directiveOrProviderIdx);\n                    }\n                }\n            }\n            else {\n                this.addMatch(tNode.index, nodeMatchIdx);\n            }\n        }\n    }\n    addMatch(tNodeIdx, matchIdx) {\n        if (this.matches === null) {\n            this.matches = [tNodeIdx, matchIdx];\n        }\n        else {\n            this.matches.push(tNodeIdx, matchIdx);\n        }\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    const localNames = tNode.localNames;\n    if (localNames !== null) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return localNames[i + 1];\n            }\n        }\n    }\n    return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n    if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n        return createElementRef(tNode, currentView);\n    }\n    else if (tNode.type & 4 /* TNodeType.Container */) {\n        return createTemplateRef(tNode, currentView);\n    }\n    return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n    if (matchingIdx === -1) {\n        // if read token and / or strategy is not specified, detect it using appropriate tNode type\n        return createResultByTNodeType(tNode, lView);\n    }\n    else if (matchingIdx === -2) {\n        // read a special token from a node injector\n        return createSpecialToken(lView, tNode, read);\n    }\n    else {\n        // read a token\n        return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n    }\n}\nfunction createSpecialToken(lView, tNode, read) {\n    if (read === ElementRef) {\n        return createElementRef(tNode, lView);\n    }\n    else if (read === TemplateRef) {\n        return createTemplateRef(tNode, lView);\n    }\n    else if (read === ViewContainerRef) {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n        return createContainerRef(tNode, lView);\n    }\n    else {\n        ngDevMode &&\n            throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n    }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n    const lQuery = lView[QUERIES].queries[queryIndex];\n    if (lQuery.matches === null) {\n        const tViewData = tView.data;\n        const tQueryMatches = tQuery.matches;\n        const result = [];\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            const matchedNodeIdx = tQueryMatches[i];\n            if (matchedNodeIdx < 0) {\n                // we at the <ng-template> marker which might have results in views created based on this\n                // <ng-template> - those results will be in separate views though, so here we just leave\n                // null as a placeholder\n                result.push(null);\n            }\n            else {\n                ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n                const tNode = tViewData[matchedNodeIdx];\n                result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n            }\n        }\n        lQuery.matches = result;\n    }\n    return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n    const tQuery = tView.queries.getByIndex(queryIndex);\n    const tQueryMatches = tQuery.matches;\n    if (tQueryMatches !== null) {\n        const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n        for (let i = 0; i < tQueryMatches.length; i += 2) {\n            const tNodeIdx = tQueryMatches[i];\n            if (tNodeIdx > 0) {\n                result.push(lViewResults[i / 2]);\n            }\n            else {\n                const childQueryIndex = tQueryMatches[i + 1];\n                const declarationLContainer = lView[-tNodeIdx];\n                ngDevMode && assertLContainer(declarationLContainer);\n                // collect matches for views inserted in this container\n                for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n                    const embeddedLView = declarationLContainer[i];\n                    if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n                    }\n                }\n                // collect matches for views created from this declaration container and inserted into\n                // different containers\n                if (declarationLContainer[MOVED_VIEWS] !== null) {\n                    const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n                    for (let i = 0; i < embeddedLViews.length; i++) {\n                        const embeddedLView = embeddedLViews[i];\n                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n    const lView = getLView();\n    const tView = getTView();\n    const queryIndex = getCurrentQueryIndex();\n    setCurrentQueryIndex(queryIndex + 1);\n    const tQuery = getTQuery(tView, queryIndex);\n    if (queryList.dirty &&\n        (isCreationMode(lView) ===\n            ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */))) {\n        if (tQuery.matches === null) {\n            queryList.reset([]);\n        }\n        else {\n            const result = tQuery.crossesNgTemplate ?\n                collectQueryResults(tView, lView, queryIndex, []) :\n                materializeViewResults(tView, lView, tQuery, queryIndex);\n            queryList.reset(result, unwrapElementRef);\n            queryList.notifyOnChanges();\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n    ngDevMode && assertNumber(flags, 'Expecting flags');\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n            tView.staticViewQueries = true;\n        }\n    }\n    createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n    ngDevMode && assertNumber(flags, 'Expecting flags');\n    const tView = getTView();\n    if (tView.firstCreatePass) {\n        const tNode = getCurrentTNode();\n        createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n        saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n        if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n            tView.staticContentQueries = true;\n        }\n    }\n    createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n    return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\nfunction loadQueryInternal(lView, queryIndex) {\n    ngDevMode &&\n        assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n    ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n    return lView[QUERIES].queries[queryIndex].queryList;\n}\nfunction createLQuery(tView, lView, flags) {\n    const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n    storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n    if (lView[QUERIES] === null)\n        lView[QUERIES] = new LQueries_();\n    lView[QUERIES].queries.push(new LQuery_(queryList));\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n    if (tView.queries === null)\n        tView.queries = new TQueries_();\n    tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n    const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n    if (directiveIndex !== lastSavedDirectiveIndex) {\n        tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n    }\n}\nfunction getTQuery(tView, index) {\n    ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n    return tView.queries.getByIndex(index);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n    return createTemplateRef(tNode, lView);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = (() => ({\n    'ɵɵattribute': ɵɵattribute,\n    'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n    'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n    'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n    'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n    'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n    'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n    'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n    'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n    'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n    'ɵɵdefineComponent': ɵɵdefineComponent,\n    'ɵɵdefineDirective': ɵɵdefineDirective,\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵdefineNgModule': ɵɵdefineNgModule,\n    'ɵɵdefinePipe': ɵɵdefinePipe,\n    'ɵɵdirectiveInject': ɵɵdirectiveInject,\n    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinjectAttribute': ɵɵinjectAttribute,\n    'ɵɵinvalidFactory': ɵɵinvalidFactory,\n    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n    'ɵɵresetView': ɵɵresetView,\n    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n    'ɵɵProvidersFeature': ɵɵProvidersFeature,\n    'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n    'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n    'ɵɵnextContext': ɵɵnextContext,\n    'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n    'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n    'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n    'ɵɵenableBindings': ɵɵenableBindings,\n    'ɵɵdisableBindings': ɵɵdisableBindings,\n    'ɵɵelementStart': ɵɵelementStart,\n    'ɵɵelementEnd': ɵɵelementEnd,\n    'ɵɵelement': ɵɵelement,\n    'ɵɵelementContainerStart': ɵɵelementContainerStart,\n    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n    'ɵɵelementContainer': ɵɵelementContainer,\n    'ɵɵpureFunction0': ɵɵpureFunction0,\n    'ɵɵpureFunction1': ɵɵpureFunction1,\n    'ɵɵpureFunction2': ɵɵpureFunction2,\n    'ɵɵpureFunction3': ɵɵpureFunction3,\n    'ɵɵpureFunction4': ɵɵpureFunction4,\n    'ɵɵpureFunction5': ɵɵpureFunction5,\n    'ɵɵpureFunction6': ɵɵpureFunction6,\n    'ɵɵpureFunction7': ɵɵpureFunction7,\n    'ɵɵpureFunction8': ɵɵpureFunction8,\n    'ɵɵpureFunctionV': ɵɵpureFunctionV,\n    'ɵɵgetCurrentView': ɵɵgetCurrentView,\n    'ɵɵrestoreView': ɵɵrestoreView,\n    'ɵɵlistener': ɵɵlistener,\n    'ɵɵprojection': ɵɵprojection,\n    'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n    'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n    'ɵɵpipeBind1': ɵɵpipeBind1,\n    'ɵɵpipeBind2': ɵɵpipeBind2,\n    'ɵɵpipeBind3': ɵɵpipeBind3,\n    'ɵɵpipeBind4': ɵɵpipeBind4,\n    'ɵɵpipeBindV': ɵɵpipeBindV,\n    'ɵɵprojectionDef': ɵɵprojectionDef,\n    'ɵɵhostProperty': ɵɵhostProperty,\n    'ɵɵproperty': ɵɵproperty,\n    'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n    'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n    'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n    'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n    'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n    'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n    'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n    'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n    'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n    'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n    'ɵɵpipe': ɵɵpipe,\n    'ɵɵqueryRefresh': ɵɵqueryRefresh,\n    'ɵɵviewQuery': ɵɵviewQuery,\n    'ɵɵloadQuery': ɵɵloadQuery,\n    'ɵɵcontentQuery': ɵɵcontentQuery,\n    'ɵɵreference': ɵɵreference,\n    'ɵɵclassMap': ɵɵclassMap,\n    'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n    'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n    'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n    'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n    'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n    'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n    'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n    'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n    'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n    'ɵɵstyleMap': ɵɵstyleMap,\n    'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n    'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n    'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n    'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n    'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n    'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n    'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n    'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n    'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n    'ɵɵstyleProp': ɵɵstyleProp,\n    'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n    'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n    'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n    'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n    'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n    'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n    'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n    'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n    'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n    'ɵɵclassProp': ɵɵclassProp,\n    'ɵɵadvance': ɵɵadvance,\n    'ɵɵtemplate': ɵɵtemplate,\n    'ɵɵtext': ɵɵtext,\n    'ɵɵtextInterpolate': ɵɵtextInterpolate,\n    'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n    'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n    'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n    'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n    'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n    'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n    'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n    'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n    'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n    'ɵɵi18n': ɵɵi18n,\n    'ɵɵi18nAttributes': ɵɵi18nAttributes,\n    'ɵɵi18nExp': ɵɵi18nExp,\n    'ɵɵi18nStart': ɵɵi18nStart,\n    'ɵɵi18nEnd': ɵɵi18nEnd,\n    'ɵɵi18nApply': ɵɵi18nApply,\n    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n    'ɵɵresolveWindow': ɵɵresolveWindow,\n    'ɵɵresolveDocument': ɵɵresolveDocument,\n    'ɵɵresolveBody': ɵɵresolveBody,\n    'ɵɵsetComponentScope': ɵɵsetComponentScope,\n    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n    'ɵɵregisterNgModuleType': registerNgModuleType,\n    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n    'ɵɵsanitizeScript': ɵɵsanitizeScript,\n    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n    'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n    'forwardRef': forwardRef,\n    'resolveForwardRef': resolveForwardRef,\n}))();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchModuleCompilation() {\n    // Does nothing, but exists as a target for patching.\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isModuleWithProviders$1(value) {\n    return value.ngModule !== undefined;\n}\nfunction isNgModule$1(value) {\n    return !!getNgModuleDef(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    patchModuleCompilation();\n    compileNgModuleDefs(moduleType, ngModule);\n    if (ngModule.id !== undefined) {\n        registerNgModuleType(moduleType, ngModule.id);\n    }\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n    let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MOD_DEF, {\n        configurable: true,\n        get: () => {\n            if (ngModuleDef === null) {\n                if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n                    // We need to assert this immediately, because allowing it to continue will cause it to\n                    // go into an infinite loop before we've reached the point where we throw all the errors.\n                    throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n                }\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n                    type: moduleType,\n                    bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten$1(ngModule.imports || EMPTY_ARRAY)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten$1(ngModule.exports || EMPTY_ARRAY)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    schemas: ngModule.schemas ? flatten$1(ngModule.schemas) : null,\n                    id: ngModule.id || null,\n                });\n                // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n                // should verify that there are no unknown elements in a template. In AOT mode, that check\n                // happens at compile time and `schemas` information is not present on Component and Module\n                // defs after compilation (so the check doesn't happen the second time at runtime).\n                if (!ngModuleDef.schemas) {\n                    ngModuleDef.schemas = [];\n                }\n            }\n            return ngModuleDef;\n        }\n    });\n    let ngFactoryDef = null;\n    Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n        get: () => {\n            if (ngFactoryDef === null) {\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    target: compiler.FactoryTarget.NgModule,\n                    typeArgumentCount: 0,\n                });\n            }\n            return ngFactoryDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJ_DEF, {\n        get: () => {\n            if (ngInjectorDef === null) {\n                ngDevMode &&\n                    verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    providers: ngModule.providers || EMPTY_ARRAY,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\n                    ],\n                };\n                const compiler = getCompilerFacade({ usage: 0 /* JitCompilerUsage.Decorator */, kind: 'NgModule', type: moduleType });\n                ngInjectorDef =\n                    compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n    const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n    const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` +\n        'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n    return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    // skip verifications of standalone components, directives and pipes\n    if (isStandalone(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    let ngModuleDef;\n    if (importingModule) {\n        ngModuleDef = getNgModuleDef(moduleType);\n        if (!ngModuleDef) {\n            throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n    else {\n        ngModuleDef = getNgModuleDef(moduleType, true);\n    }\n    const errors = [];\n    const declarations = maybeUnwrapFn$1(ngModuleDef.declarations);\n    const imports = maybeUnwrapFn$1(ngModuleDef.imports);\n    flatten$1(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n        verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n        verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n    });\n    const exports = maybeUnwrapFn$1(ngModuleDef.exports);\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\n    declarations.forEach(verifyDirectivesHaveSelector);\n    declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));\n    const combinedDeclarations = [\n        ...declarations.map(resolveForwardRef),\n        ...flatten$1(imports.map(computeCombinedExports)).map(resolveForwardRef),\n    ];\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\n    declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n    declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten$1(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n                verifySemanticsOfNgModuleImport(mod, moduleType);\n                verifySemanticsOfNgModuleDef(mod, false, moduleType);\n            });\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents &&\n            deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    function verifyDirectivesHaveSelector(type) {\n        type = resolveForwardRef(type);\n        const def = getDirectiveDef(type);\n        if (!getComponentDef$1(type) && def && def.selectors.length == 0) {\n            errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n        }\n    }\n    function verifyNotStandalone(type, moduleType) {\n        type = resolveForwardRef(type);\n        const def = getComponentDef$1(type) || getDirectiveDef(type) || getPipeDef$1(type);\n        if (def?.standalone) {\n            const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n            errors.push(generateStandaloneInDeclarationsError(type, location));\n        }\n    }\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        const kind = getComponentDef$1(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef$1(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    function verifyDeclarationIsUnique(type, suppressErrors) {\n        type = resolveForwardRef(type);\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            if (!suppressErrors) {\n                const modules = [existingModule, moduleType].map(stringifyForError).sort();\n                errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                    `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                    `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n            }\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule && !isStandalone(type)) {\n            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef$1(type)) {\n            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n        }\n        if (isStandalone(type)) {\n            // Note: this error should be the same as the\n            // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n            errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` +\n                `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` +\n                `function for bootstrap instead.`);\n        }\n    }\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef$1(type)) {\n            // We know we are component\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n    function verifySemanticsOfNgModuleImport(type, importingModule) {\n        type = resolveForwardRef(type);\n        const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n        if (directiveDef !== null && !directiveDef.standalone) {\n            throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n        const pipeDef = getPipeDef$1(type);\n        if (pipeDef !== null && !pipeDef.standalone) {\n            throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n        }\n    }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = decorator;\n            }\n            else if (decorator.type) {\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n    ownerNgModule = new WeakMap();\n    verifiedNgModule = new WeakMap();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    const ngModuleDef = getNgModuleDef(type);\n    // a standalone component, directive or pipe\n    if (ngModuleDef === null) {\n        return [type];\n    }\n    return [...flatten$1(maybeUnwrapFn$1(ngModuleDef.exports).map((type) => {\n            const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef(type, false);\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY);\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(declaration => {\n        declaration = resolveForwardRef(declaration);\n        if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n            // A `ɵcmp` field exists - go ahead and patch the component directly.\n            const component = declaration;\n            const componentDef = getComponentDef$1(component);\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            declaration.ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\n        .map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef$1(dir) : getDirectiveDef(dir))\n        .filter(def => !!def);\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n    componentDef.schemas = transitiveScopes.schemas;\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n    // may face a problem where previously compiled defs available to a given Component/Directive\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n    // order to avoid this problem, we force fresh TView to be created.\n    componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n    if (isNgModule$1(type)) {\n        return transitiveScopesForNgModule(type);\n    }\n    else if (isStandalone(type)) {\n        const directiveDef = getComponentDef$1(type) || getDirectiveDef(type);\n        if (directiveDef !== null) {\n            return {\n                schemas: null,\n                compilation: {\n                    directives: new Set(),\n                    pipes: new Set(),\n                },\n                exported: {\n                    directives: new Set([type]),\n                    pipes: new Set(),\n                },\n            };\n        }\n        const pipeDef = getPipeDef$1(type);\n        if (pipeDef !== null) {\n            return {\n                schemas: null,\n                compilation: {\n                    directives: new Set(),\n                    pipes: new Set(),\n                },\n                exported: {\n                    directives: new Set(),\n                    pipes: new Set([type]),\n                },\n            };\n        }\n    }\n    // TODO: change the error message to be more user-facing and take standalone into account\n    throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nfunction transitiveScopesForNgModule(moduleType) {\n    const def = getNgModuleDef(moduleType, true);\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    const scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    maybeUnwrapFn$1(def.imports).forEach((imported) => {\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        const importedScope = transitiveScopesFor(imported);\n        importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n        importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n    maybeUnwrapFn$1(def.declarations).forEach(declared => {\n        const declaredWithDefs = declared;\n        if (getPipeDef$1(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    maybeUnwrapFn$1(def.exports).forEach((exported) => {\n        const exportedType = exported;\n        // Either the type is a module, a pipe, or a component/directive (which may not have a\n        // ɵcmp as it might be compiled asynchronously).\n        if (isNgModule$1(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            const exportedScope = transitiveScopesFor(exportedType);\n            exportedScope.exported.directives.forEach(entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef$1(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders$1(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextReferenceId = 0;\nclass MetadataOverrider {\n    constructor() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    overrideMetadata(metadataClass, oldMetadata, override) {\n        const props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach((prop) => props[prop] = oldMetadata[prop]);\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(props);\n    }\n}\nfunction removeMetadata(metadata, remove, references) {\n    const removeObjects = new Set();\n    for (const prop in remove) {\n        const removeValue = remove[prop];\n        if (Array.isArray(removeValue)) {\n            removeValue.forEach((value) => {\n                removeObjects.add(_propHashKey(prop, value, references));\n            });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    }\n    for (const prop in metadata) {\n        const propValue = metadata[prop];\n        if (Array.isArray(propValue)) {\n            metadata[prop] = propValue.filter((value) => !removeObjects.has(_propHashKey(prop, value, references)));\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    }\n}\nfunction addMetadata(metadata, add) {\n    for (const prop in add) {\n        const addValue = add[prop];\n        const propValue = metadata[prop];\n        if (propValue != null && Array.isArray(propValue)) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\nfunction setMetadata(metadata, set) {\n    for (const prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\nfunction _propHashKey(propName, propValue, references) {\n    let nextObjectId = 0;\n    const objectIds = new Map();\n    const replacer = (key, value) => {\n        if (value !== null && typeof value === 'object') {\n            if (objectIds.has(value)) {\n                return objectIds.get(value);\n            }\n            // Record an id for this object such that any later references use the object's id instead\n            // of the object itself, in order to break cyclic pointers in objects.\n            objectIds.set(value, `ɵobj#${nextObjectId++}`);\n            // The first time an object is seen the object itself is serialized.\n            return value;\n        }\n        else if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\nfunction _serializeReference(ref, references) {\n    let id = references.get(ref);\n    if (!id) {\n        id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n        references.set(ref, id);\n    }\n    return id;\n}\nfunction _valueProps(obj) {\n    const props = [];\n    // regular public props\n    Object.keys(obj).forEach((prop) => {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    let proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach((protoProp) => {\n            const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nclass OverrideResolver {\n    constructor() {\n        this.overrides = new Map();\n        this.resolved = new Map();\n    }\n    addOverride(type, override) {\n        const overrides = this.overrides.get(type) || [];\n        overrides.push(override);\n        this.overrides.set(type, overrides);\n        this.resolved.delete(type);\n    }\n    setOverrides(overrides) {\n        this.overrides.clear();\n        overrides.forEach(([type, override]) => {\n            this.addOverride(type, override);\n        });\n    }\n    getAnnotation(type) {\n        const annotations = reflection.annotations(type);\n        // Try to find the nearest known Type annotation and make sure that this annotation is an\n        // instance of the type we are looking for, so we can use it for resolution. Note: there might\n        // be multiple known annotations found due to the fact that Components can extend Directives (so\n        // both Directive and Component annotations would be present), so we always check if the known\n        // annotation has the right type.\n        for (let i = annotations.length - 1; i >= 0; i--) {\n            const annotation = annotations[i];\n            const isKnownType = annotation instanceof Directive || annotation instanceof Component ||\n                annotation instanceof Pipe || annotation instanceof NgModule;\n            if (isKnownType) {\n                return annotation instanceof this.type ? annotation : null;\n            }\n        }\n        return null;\n    }\n    resolve(type) {\n        let resolved = this.resolved.get(type) || null;\n        if (!resolved) {\n            resolved = this.getAnnotation(type);\n            if (resolved) {\n                const overrides = this.overrides.get(type);\n                if (overrides) {\n                    const overrider = new MetadataOverrider();\n                    overrides.forEach(override => {\n                        resolved = overrider.overrideMetadata(this.type, resolved, override);\n                    });\n                }\n            }\n            this.resolved.set(type, resolved);\n        }\n        return resolved;\n    }\n}\nclass DirectiveResolver extends OverrideResolver {\n    get type() {\n        return Directive;\n    }\n}\nclass ComponentResolver extends OverrideResolver {\n    get type() {\n        return Component;\n    }\n}\nclass PipeResolver extends OverrideResolver {\n    get type() {\n        return Pipe;\n    }\n}\nclass NgModuleResolver extends OverrideResolver {\n    get type() {\n        return NgModule;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n    TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n    return value === TestingModuleOverride.DECLARATION ||\n        value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nfunction assertNoStandaloneComponents(types, resolver, location) {\n    types.forEach(type => {\n        const component = resolver.resolve(type);\n        if (component && component.standalone) {\n            throw new Error(generateStandaloneInDeclarationsError(type, location));\n        }\n    });\n}\nclass TestBedCompiler {\n    constructor(platform, additionalModuleTypes) {\n        this.platform = platform;\n        this.additionalModuleTypes = additionalModuleTypes;\n        this.originalComponentResolutionQueue = null;\n        // Testing module configuration\n        this.declarations = [];\n        this.imports = [];\n        this.providers = [];\n        this.schemas = [];\n        // Queues of components/directives/pipes that should be recompiled.\n        this.pendingComponents = new Set();\n        this.pendingDirectives = new Set();\n        this.pendingPipes = new Set();\n        // Keep track of all components and directives, so we can patch Providers onto defs later.\n        this.seenComponents = new Set();\n        this.seenDirectives = new Set();\n        // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n        this.overriddenModules = new Set();\n        // Store resolved styles for Components that have template overrides present and `styleUrls`\n        // defined at the same time.\n        this.existingComponentStyles = new Map();\n        this.resolvers = initResolvers();\n        this.componentToModuleScope = new Map();\n        // Map that keeps initial version of component/directive/pipe defs in case\n        // we compile a Type again, thus overriding respective static fields. This is\n        // required to make sure we restore defs to their initial states between test runs.\n        // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an\n        // NgModule), store all of them in a map.\n        this.initialNgDefs = new Map();\n        // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n        // defs in case TestBed makes changes to the originals.\n        this.defCleanupOps = [];\n        this._injector = null;\n        this.compilerProviders = null;\n        this.providerOverrides = [];\n        this.rootProviderOverrides = [];\n        // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n        // module's provider list.\n        this.providerOverridesByModule = new Map();\n        this.providerOverridesByToken = new Map();\n        this.scopesWithOverriddenProviders = new Set();\n        this.testModuleRef = null;\n        class DynamicTestModule {\n        }\n        this.testModuleType = DynamicTestModule;\n    }\n    setCompilerProviders(providers) {\n        this.compilerProviders = providers;\n        this._injector = null;\n    }\n    configureTestingModule(moduleDef) {\n        // Enqueue any compilation tasks for the directly declared component.\n        if (moduleDef.declarations !== undefined) {\n            // Verify that there are no standalone components\n            assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n            this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n            this.declarations.push(...moduleDef.declarations);\n        }\n        // Enqueue any compilation tasks for imported modules.\n        if (moduleDef.imports !== undefined) {\n            this.queueTypesFromModulesArray(moduleDef.imports);\n            this.imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.providers !== undefined) {\n            this.providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.schemas !== undefined) {\n            this.schemas.push(...moduleDef.schemas);\n        }\n    }\n    overrideModule(ngModule, override) {\n        this.overriddenModules.add(ngModule);\n        // Compile the module right away.\n        this.resolvers.module.addOverride(ngModule, override);\n        const metadata = this.resolvers.module.resolve(ngModule);\n        if (metadata === null) {\n            throw invalidTypeError(ngModule.name, 'NgModule');\n        }\n        this.recompileNgModule(ngModule, metadata);\n        // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n        // new declarations or imported modules. Ingest any possible new types and add them to the\n        // current queue.\n        this.queueTypesFromModulesArray([ngModule]);\n    }\n    overrideComponent(component, override) {\n        this.verifyNoStandaloneFlagOverrides(component, override);\n        this.resolvers.component.addOverride(component, override);\n        this.pendingComponents.add(component);\n    }\n    overrideDirective(directive, override) {\n        this.verifyNoStandaloneFlagOverrides(directive, override);\n        this.resolvers.directive.addOverride(directive, override);\n        this.pendingDirectives.add(directive);\n    }\n    overridePipe(pipe, override) {\n        this.verifyNoStandaloneFlagOverrides(pipe, override);\n        this.resolvers.pipe.addOverride(pipe, override);\n        this.pendingPipes.add(pipe);\n    }\n    verifyNoStandaloneFlagOverrides(type, override) {\n        if (override.add?.hasOwnProperty('standalone') || override.set?.hasOwnProperty('standalone') ||\n            override.remove?.hasOwnProperty('standalone')) {\n            throw new Error(`An override for the ${type.name} class has the \\`standalone\\` flag. ` +\n                `Changing the \\`standalone\\` flag via TestBed overrides is not supported.`);\n        }\n    }\n    overrideProvider(token, provider) {\n        let providerDef;\n        if (provider.useFactory !== undefined) {\n            providerDef = {\n                provide: token,\n                useFactory: provider.useFactory,\n                deps: provider.deps || [],\n                multi: provider.multi\n            };\n        }\n        else if (provider.useValue !== undefined) {\n            providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n        }\n        else {\n            providerDef = { provide: token };\n        }\n        const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n        const providedIn = injectableDef === null ? null : resolveForwardRef$1(injectableDef.providedIn);\n        const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n        overridesBucket.push(providerDef);\n        // Keep overrides grouped by token as well for fast lookups using token\n        this.providerOverridesByToken.set(token, providerDef);\n        if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n            const existingOverrides = this.providerOverridesByModule.get(providedIn);\n            if (existingOverrides !== undefined) {\n                existingOverrides.push(providerDef);\n            }\n            else {\n                this.providerOverridesByModule.set(providedIn, [providerDef]);\n            }\n        }\n    }\n    overrideTemplateUsingTestingModule(type, template) {\n        const def = type[ɵNG_COMP_DEF];\n        const hasStyleUrls = () => {\n            const metadata = this.resolvers.component.resolve(type);\n            return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n        };\n        const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n        // In Ivy, compiling a component does not require knowing the module providing the\n        // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n        // overrideComponent. Important: overriding template requires full Component re-compilation,\n        // which may fail in case styleUrls are also present (thus Component is considered as required\n        // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n        // preserve current styles available on Component def and restore styles back once compilation\n        // is complete.\n        const override = overrideStyleUrls ? { template, styles: [], styleUrls: [] } : { template };\n        this.overrideComponent(type, { set: override });\n        if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n            this.existingComponentStyles.set(type, def.styles);\n        }\n        // Set the component's scope to be the testing module.\n        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n    }\n    async compileComponents() {\n        this.clearComponentResolutionQueue();\n        // Run compilers for all queued types.\n        let needsAsyncResources = this.compileTypesSync();\n        // compileComponents() should not be async unless it needs to be.\n        if (needsAsyncResources) {\n            let resourceLoader;\n            let resolver = (url) => {\n                if (!resourceLoader) {\n                    resourceLoader = this.injector.get(ResourceLoader);\n                }\n                return Promise.resolve(resourceLoader.get(url));\n            };\n            await resolveComponentResources(resolver);\n        }\n    }\n    finalize() {\n        // One last compile\n        this.compileTypesSync();\n        // Create the testing module itself.\n        this.compileTestModule();\n        this.applyTransitiveScopes();\n        this.applyProviderOverrides();\n        // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n        // Components have `styleUrls` fields defined and template override was requested.\n        this.patchComponentsWithExistingStyles();\n        // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n        // every component.\n        this.componentToModuleScope.clear();\n        const parentInjector = this.platform.injector;\n        this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core.\n        // Cast it to any before accessing it.\n        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n        // Set locale ID after running app initializers, since locale information might be updated while\n        // running initializers. This is also consistent with the execution order while bootstrapping an\n        // app (see `packages/core/src/application_ref.ts` file).\n        const localeId = this.testModuleRef.injector.get(LOCALE_ID$1, ɵDEFAULT_LOCALE_ID);\n        ɵsetLocaleId(localeId);\n        return this.testModuleRef;\n    }\n    /**\n     * @internal\n     */\n    _compileNgModuleSync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        this.compileTypesSync();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesInScope(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    async _compileNgModuleAsync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        await this.compileComponents();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesInScope(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    _getModuleResolver() {\n        return this.resolvers.module;\n    }\n    /**\n     * @internal\n     */\n    _getComponentFactories(moduleType) {\n        return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n            const componentDef = declaration.ɵcmp;\n            componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n            return factories;\n        }, []);\n    }\n    compileTypesSync() {\n        // Compile all queued components, directives, pipes.\n        let needsAsyncResources = false;\n        this.pendingComponents.forEach(declaration => {\n            needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n            const metadata = this.resolvers.component.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Component');\n            }\n            this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n            ɵcompileComponent(declaration, metadata);\n        });\n        this.pendingComponents.clear();\n        this.pendingDirectives.forEach(declaration => {\n            const metadata = this.resolvers.directive.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Directive');\n            }\n            this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n            ɵcompileDirective(declaration, metadata);\n        });\n        this.pendingDirectives.clear();\n        this.pendingPipes.forEach(declaration => {\n            const metadata = this.resolvers.pipe.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Pipe');\n            }\n            this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n            ɵcompilePipe(declaration, metadata);\n        });\n        this.pendingPipes.clear();\n        return needsAsyncResources;\n    }\n    applyTransitiveScopes() {\n        if (this.overriddenModules.size > 0) {\n            // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n            // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n            // collect all affected modules and reset scopes to force their re-calculation.\n            const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n            const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n            if (affectedModules.size > 0) {\n                affectedModules.forEach(moduleType => {\n                    this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n                    moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n                });\n            }\n        }\n        const moduleToScope = new Map();\n        const getScopeOfModule = (moduleType) => {\n            if (!moduleToScope.has(moduleType)) {\n                const isTestingModule = isTestingModuleOverride(moduleType);\n                const realType = isTestingModule ? this.testModuleType : moduleType;\n                moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n            }\n            return moduleToScope.get(moduleType);\n        };\n        this.componentToModuleScope.forEach((moduleType, componentType) => {\n            const moduleScope = getScopeOfModule(moduleType);\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n            // `tView` that is stored on component def contains information about directives and pipes\n            // that are in the scope of this component. Patching component scope will cause `tView` to be\n            // changed. Store original `tView` before patching scope, so the `tView` (including scope\n            // information) is restored back to its previous/original state before running next test.\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n            ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n        });\n        this.componentToModuleScope.clear();\n    }\n    applyProviderOverrides() {\n        const maybeApplyOverrides = (field) => (type) => {\n            const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n            const metadata = resolver.resolve(type);\n            if (this.hasProviderOverrides(metadata.providers)) {\n                this.patchDefWithProviderOverrides(type, field);\n            }\n        };\n        this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n        this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n        this.seenComponents.clear();\n        this.seenDirectives.clear();\n    }\n    /**\n     * Applies provider overrides to a given type (either an NgModule or a standalone component)\n     * and all imported NgModules and standalone components recursively.\n     */\n    applyProviderOverridesInScope(type) {\n        const hasScope = isStandaloneComponent(type) || isNgModule(type);\n        // The function can be re-entered recursively while inspecting dependencies\n        // of an NgModule or a standalone component. Exit early if we come across a\n        // type that can not have a scope (directive or pipe) or the type is already\n        // processed earlier.\n        if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {\n            return;\n        }\n        this.scopesWithOverriddenProviders.add(type);\n        // NOTE: the line below triggers JIT compilation of the module injector,\n        // which also invokes verification of the NgModule semantics, which produces\n        // detailed error messages. The fact that the code relies on this line being\n        // present here is suspicious and should be refactored in a way that the line\n        // below can be moved (for ex. after an early exit check below).\n        const injectorDef = type[ɵNG_INJ_DEF];\n        // No provider overrides, exit early.\n        if (this.providerOverridesByToken.size === 0)\n            return;\n        if (isStandaloneComponent(type)) {\n            // Visit all component dependencies and override providers there.\n            const def = getComponentDef(type);\n            const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n            for (const dependency of dependencies) {\n                this.applyProviderOverridesInScope(dependency);\n            }\n        }\n        else {\n            const providers = [\n                ...injectorDef.providers,\n                ...(this.providerOverridesByModule.get(type) || [])\n            ];\n            if (this.hasProviderOverrides(providers)) {\n                this.maybeStoreNgDef(ɵNG_INJ_DEF, type);\n                this.storeFieldOfDefOnType(type, ɵNG_INJ_DEF, 'providers');\n                injectorDef.providers = this.getOverriddenProviders(providers);\n            }\n            // Apply provider overrides to imported modules recursively\n            const moduleDef = type[ɵNG_MOD_DEF];\n            const imports = maybeUnwrapFn(moduleDef.imports);\n            for (const importedModule of imports) {\n                this.applyProviderOverridesInScope(importedModule);\n            }\n            // Also override the providers on any ModuleWithProviders imports since those don't appear in\n            // the moduleDef.\n            for (const importedModule of flatten(injectorDef.imports)) {\n                if (isModuleWithProviders(importedModule)) {\n                    this.defCleanupOps.push({\n                        object: importedModule,\n                        fieldName: 'providers',\n                        originalValue: importedModule.providers\n                    });\n                    importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                }\n            }\n        }\n    }\n    patchComponentsWithExistingStyles() {\n        this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n        this.existingComponentStyles.clear();\n    }\n    queueTypeArray(arr, moduleType) {\n        for (const value of arr) {\n            if (Array.isArray(value)) {\n                this.queueTypeArray(value, moduleType);\n            }\n            else {\n                this.queueType(value, moduleType);\n            }\n        }\n    }\n    recompileNgModule(ngModule, metadata) {\n        // Cache the initial ngModuleDef as it will be overwritten.\n        this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n        ɵcompileNgModuleDefs(ngModule, metadata);\n    }\n    queueType(type, moduleType) {\n        const component = this.resolvers.component.resolve(type);\n        if (component) {\n            // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n            // missing. That might happen in case a class without any Angular decorators extends another\n            // class where Component/Directive/Pipe decorator is defined.\n            if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n                this.pendingComponents.add(type);\n            }\n            this.seenComponents.add(type);\n            // Keep track of the module which declares this component, so later the component's scope\n            // can be set correctly. If the component has already been recorded here, then one of several\n            // cases is true:\n            // * the module containing the component was imported multiple times (common).\n            // * the component is declared in multiple modules (which is an error).\n            // * the component was in 'declarations' of the testing module, and also in an imported module\n            //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n            // * overrideTemplateUsingTestingModule was called for the component in which case the module\n            //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n            //\n            // If the component was previously in the testing module's 'declarations' (meaning the\n            // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n            // real module, which was imported. This pattern is understood to mean that the component\n            // should use its original scope, but that the testing module should also contain the\n            // component in its scope.\n            //\n            // Note: standalone components have no associated NgModule, so the `moduleType` can be `null`.\n            if (moduleType !== null &&\n                (!this.componentToModuleScope.has(type) ||\n                    this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION)) {\n                this.componentToModuleScope.set(type, moduleType);\n            }\n            return;\n        }\n        const directive = this.resolvers.directive.resolve(type);\n        if (directive) {\n            if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n                this.pendingDirectives.add(type);\n            }\n            this.seenDirectives.add(type);\n            return;\n        }\n        const pipe = this.resolvers.pipe.resolve(type);\n        if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n            this.pendingPipes.add(type);\n            return;\n        }\n    }\n    queueTypesFromModulesArray(arr) {\n        // Because we may encounter the same NgModule while processing the imports and exports of an\n        // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n        // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n        const processedNgModuleDefs = new Set();\n        const queueTypesFromModulesArrayRecur = (arr) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    queueTypesFromModulesArrayRecur(value);\n                }\n                else if (hasNgModuleDef(value)) {\n                    const def = value.ɵmod;\n                    if (processedNgModuleDefs.has(def)) {\n                        continue;\n                    }\n                    processedNgModuleDefs.add(def);\n                    // Look through declarations, imports, and exports, and queue\n                    // everything found there.\n                    this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                }\n                else if (isModuleWithProviders(value)) {\n                    queueTypesFromModulesArrayRecur([value.ngModule]);\n                }\n                else if (isStandaloneComponent(value)) {\n                    this.queueType(value, null);\n                    const def = getComponentDef(value);\n                    const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n                    dependencies.forEach((dependency) => {\n                        // Note: in AOT, the `dependencies` might also contain regular\n                        // (NgModule-based) Component, Directive and Pipes, so we handle\n                        // them separately and proceed with recursive process for standalone\n                        // Components and NgModules only.\n                        if (isStandaloneComponent(dependency) || hasNgModuleDef(dependency)) {\n                            queueTypesFromModulesArrayRecur([dependency]);\n                        }\n                        else {\n                            this.queueType(dependency, null);\n                        }\n                    });\n                }\n            }\n        };\n        queueTypesFromModulesArrayRecur(arr);\n    }\n    // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n    // that import (even transitively) an overridden one. For all affected modules we need to\n    // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n    // of this function is to collect all affected modules in a set for further processing. Example:\n    // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n    // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n    // invalidated with the override.\n    collectModulesAffectedByOverrides(arr) {\n        const seenModules = new Set();\n        const affectedModules = new Set();\n        const calcAffectedModulesRecur = (arr, path) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    // If the value is an array, just flatten it (by invoking this function recursively),\n                    // keeping \"path\" the same.\n                    calcAffectedModulesRecur(value, path);\n                }\n                else if (hasNgModuleDef(value)) {\n                    if (seenModules.has(value)) {\n                        // If we've seen this module before and it's included into \"affected modules\" list, mark\n                        // the whole path that leads to that module as affected, but do not descend into its\n                        // imports, since we already examined them before.\n                        if (affectedModules.has(value)) {\n                            path.forEach(item => affectedModules.add(item));\n                        }\n                        continue;\n                    }\n                    seenModules.add(value);\n                    if (this.overriddenModules.has(value)) {\n                        path.forEach(item => affectedModules.add(item));\n                    }\n                    // Examine module imports recursively to look for overridden modules.\n                    const moduleDef = value[ɵNG_MOD_DEF];\n                    calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n                }\n            }\n        };\n        calcAffectedModulesRecur(arr, []);\n        return affectedModules;\n    }\n    /**\n     * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.\n     * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of\n     * an NgModule). If there is a def in a set already, don't override it, since\n     * an original one should be restored at the end of a test.\n     */\n    maybeStoreNgDef(prop, type) {\n        if (!this.initialNgDefs.has(type)) {\n            this.initialNgDefs.set(type, new Map());\n        }\n        const currentDefs = this.initialNgDefs.get(type);\n        if (!currentDefs.has(prop)) {\n            const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n            currentDefs.set(prop, currentDef);\n        }\n    }\n    storeFieldOfDefOnType(type, defField, fieldName) {\n        const def = type[defField];\n        const originalValue = def[fieldName];\n        this.defCleanupOps.push({ object: def, fieldName, originalValue });\n    }\n    /**\n     * Clears current components resolution queue, but stores the state of the queue, so we can\n     * restore it later. Clearing the queue is required before we try to compile components (via\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n     */\n    clearComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue === null) {\n            this.originalComponentResolutionQueue = new Map();\n        }\n        clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n    }\n    /*\n     * Restores component resolution queue to the previously saved state. This operation is performed\n     * as a part of restoring the state after completion of the current set of tests (that might\n     * potentially mutate the state).\n     */\n    restoreComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue !== null) {\n            restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n            this.originalComponentResolutionQueue = null;\n        }\n    }\n    restoreOriginalState() {\n        // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n        // case there were multiple overrides for the same field).\n        forEachRight(this.defCleanupOps, (op) => {\n            op.object[op.fieldName] = op.originalValue;\n        });\n        // Restore initial component/directive/pipe defs\n        this.initialNgDefs.forEach((defs, type) => {\n            defs.forEach((descriptor, prop) => {\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance\n                    // implications on objects they were applied to. In this particular case, situations\n                    // where this code is invoked should be quite rare to cause any noticeable impact,\n                    // since it's applied only to some test cases (for example when class with no\n                    // annotations extends some @Component) when we need to clear 'ɵcmp' field on a given\n                    // class to restore its original state (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n        });\n        this.initialNgDefs.clear();\n        this.scopesWithOverriddenProviders.clear();\n        this.restoreComponentResolutionQueue();\n        // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n        ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n    }\n    compileTestModule() {\n        class RootScopeModule {\n        }\n        ɵcompileNgModuleDefs(RootScopeModule, {\n            providers: [...this.rootProviderOverrides],\n        });\n        const ngZone = new NgZone({ enableLongStackTrace: true });\n        const providers = [\n            { provide: NgZone, useValue: ngZone },\n            { provide: Compiler, useFactory: () => new R3TestCompiler(this) },\n            ...this.providers,\n            ...this.providerOverrides,\n        ];\n        const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n        // clang-format off\n        ɵcompileNgModuleDefs(this.testModuleType, {\n            declarations: this.declarations,\n            imports,\n            schemas: this.schemas,\n            providers,\n        }, /* allowDuplicateDeclarationsInRoot */ true);\n        // clang-format on\n        this.applyProviderOverridesInScope(this.testModuleType);\n    }\n    get injector() {\n        if (this._injector !== null) {\n            return this._injector;\n        }\n        const providers = [];\n        const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n        compilerOptions.forEach(opts => {\n            if (opts.providers) {\n                providers.push(opts.providers);\n            }\n        });\n        if (this.compilerProviders !== null) {\n            providers.push(...this.compilerProviders);\n        }\n        // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n        class CompilerModule {\n        }\n        ɵcompileNgModuleDefs(CompilerModule, { providers });\n        const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n        this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n        return this._injector;\n    }\n    // get overrides for a specific provider (if any)\n    getSingleProviderOverrides(provider) {\n        const token = getProviderToken(provider);\n        return this.providerOverridesByToken.get(token) || null;\n    }\n    getProviderOverrides(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        // There are two flattening operations here. The inner flatten() operates on the metadata's\n        // providers and applies a mapping function which retrieves overrides for each incoming\n        // provider. The outer flatten() then flattens the produced overrides array. If this is not\n        // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n        // providers array and contaminate any error messages that might be generated.\n        return flatten(flatten(providers, (provider) => this.getSingleProviderOverrides(provider) || []));\n    }\n    getOverriddenProviders(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        const flattenedProviders = flatten(providers);\n        const overrides = this.getProviderOverrides(flattenedProviders);\n        const overriddenProviders = [...flattenedProviders, ...overrides];\n        const final = [];\n        const seenOverriddenProviders = new Set();\n        // We iterate through the list of providers in reverse order to make sure provider overrides\n        // take precedence over the values defined in provider list. We also filter out all providers\n        // that have overrides, keeping overridden values only. This is needed, since presence of a\n        // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n        forEachRight(overriddenProviders, (provider) => {\n            const token = getProviderToken(provider);\n            if (this.providerOverridesByToken.has(token)) {\n                if (!seenOverriddenProviders.has(token)) {\n                    seenOverriddenProviders.add(token);\n                    // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                    // make sure that provided override takes highest precedence and is not combined with\n                    // other instances of the same multi provider.\n                    final.unshift({ ...provider, multi: false });\n                }\n            }\n            else {\n                final.unshift(provider);\n            }\n        });\n        return final;\n    }\n    hasProviderOverrides(providers) {\n        return this.getProviderOverrides(providers).length > 0;\n    }\n    patchDefWithProviderOverrides(declaration, field) {\n        const def = declaration[field];\n        if (def && def.providersResolver) {\n            this.maybeStoreNgDef(field, declaration);\n            const resolver = def.providersResolver;\n            const processProvidersFn = (providers) => this.getOverriddenProviders(providers);\n            this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n            def.providersResolver = (ngDef) => resolver(ngDef, processProvidersFn);\n        }\n    }\n}\nfunction initResolvers() {\n    return {\n        module: new NgModuleResolver(),\n        component: new ComponentResolver(),\n        directive: new DirectiveResolver(),\n        pipe: new PipeResolver()\n    };\n}\nfunction isStandaloneComponent(value) {\n    const def = getComponentDef(value);\n    return !!def?.standalone;\n}\nfunction getComponentDef(value) {\n    return value.ɵcmp ?? null;\n}\nfunction hasNgModuleDef(value) {\n    return value.hasOwnProperty('ɵmod');\n}\nfunction isNgModule(value) {\n    return hasNgModuleDef(value);\n}\nfunction maybeUnwrapFn(maybeFn) {\n    return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values, mapFn) {\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten(value, mapFn));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\nfunction getProviderField(provider, field) {\n    return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n    return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n    return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n    for (let idx = values.length - 1; idx >= 0; idx--) {\n        fn(values[idx], idx);\n    }\n}\nfunction invalidTypeError(name, expectedType) {\n    return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\nclass R3TestCompiler {\n    constructor(testBed) {\n        this.testBed = testBed;\n    }\n    compileModuleSync(moduleType) {\n        this.testBed._compileNgModuleSync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    async compileModuleAsync(moduleType) {\n        await this.testBed._compileNgModuleAsync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        const ngModuleFactory = this.compileModuleSync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    async compileModuleAndAllComponentsAsync(moduleType) {\n        const ngModuleFactory = await this.compileModuleAsync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    clearCache() { }\n    clearCacheFor(type) { }\n    getModuleId(moduleType) {\n        const meta = this.testBed._getModuleResolver().resolve(moduleType);\n        return meta && meta.id || undefined;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextRootElementId = 0;\n/**\n * Returns a singleton of the `TestBed` class.\n *\n * @publicApi\n */\nfunction getTestBed() {\n    return TestBedImpl.INSTANCE;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\nclass TestBedImpl {\n    constructor() {\n        // Properties\n        this.platform = null;\n        this.ngModule = null;\n        this._compiler = null;\n        this._testModuleRef = null;\n        this._activeFixtures = [];\n        /**\n         * Internal-only flag to indicate whether a module\n         * scoping queue has been checked and flushed already.\n         * @nodoc\n         */\n        this.globalCompilationChecked = false;\n    }\n    static get INSTANCE() {\n        return TestBedImpl._INSTANCE = TestBedImpl._INSTANCE || new TestBedImpl();\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    static initTestEnvironment(ngModule, platform, options) {\n        const testBed = TestBedImpl.INSTANCE;\n        testBed.initTestEnvironment(ngModule, platform, options);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    static resetTestEnvironment() {\n        TestBedImpl.INSTANCE.resetTestEnvironment();\n    }\n    static configureCompiler(config) {\n        return TestBedImpl.INSTANCE.configureCompiler(config);\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef) {\n        return TestBedImpl.INSTANCE.configureTestingModule(moduleDef);\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents() {\n        return TestBedImpl.INSTANCE.compileComponents();\n    }\n    static overrideModule(ngModule, override) {\n        return TestBedImpl.INSTANCE.overrideModule(ngModule, override);\n    }\n    static overrideComponent(component, override) {\n        return TestBedImpl.INSTANCE.overrideComponent(component, override);\n    }\n    static overrideDirective(directive, override) {\n        return TestBedImpl.INSTANCE.overrideDirective(directive, override);\n    }\n    static overridePipe(pipe, override) {\n        return TestBedImpl.INSTANCE.overridePipe(pipe, override);\n    }\n    static overrideTemplate(component, template) {\n        return TestBedImpl.INSTANCE.overrideTemplate(component, template);\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        return TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template);\n    }\n    static overrideProvider(token, provider) {\n        return TestBedImpl.INSTANCE.overrideProvider(token, provider);\n    }\n    static inject(token, notFoundValue, flags) {\n        return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    static get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n        return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n    }\n    static createComponent(component) {\n        return TestBedImpl.INSTANCE.createComponent(component);\n    }\n    static resetTestingModule() {\n        return TestBedImpl.INSTANCE.resetTestingModule();\n    }\n    static execute(tokens, fn, context) {\n        return TestBedImpl.INSTANCE.execute(tokens, fn, context);\n    }\n    static get platform() {\n        return TestBedImpl.INSTANCE.platform;\n    }\n    static get ngModule() {\n        return TestBedImpl.INSTANCE.ngModule;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule, platform, options) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        TestBedImpl._environmentTeardownOptions = options?.teardown;\n        TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;\n        TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;\n        this.platform = platform;\n        this.ngModule = ngModule;\n        this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n        // TestBed does not have an API which can reliably detect the start of a test, and thus could be\n        // used to track the state of the NgModule registry and reset it correctly. Instead, when we\n        // know we're in a testing scenario, we disable the check for duplicate NgModule registration\n        // completely.\n        ɵsetAllowDuplicateNgModuleIdsForTest(true);\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this._compiler = null;\n        this.platform = null;\n        this.ngModule = null;\n        TestBedImpl._environmentTeardownOptions = undefined;\n        ɵsetAllowDuplicateNgModuleIdsForTest(false);\n    }\n    resetTestingModule() {\n        this.checkGlobalCompilationFinished();\n        ɵresetCompiledComponents();\n        if (this._compiler !== null) {\n            this.compiler.restoreOriginalState();\n        }\n        this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n        // Restore the previous value of the \"error on unknown elements\" option\n        ɵsetUnknownElementStrictMode$1(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT);\n        // Restore the previous value of the \"error on unknown properties\" option\n        ɵsetUnknownPropertyStrictMode$1(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT);\n        // We have to chain a couple of try/finally blocks, because each step can\n        // throw errors and we don't want it to interrupt the next step and we also\n        // want an error to be thrown at the end.\n        try {\n            this.destroyActiveFixtures();\n        }\n        finally {\n            try {\n                if (this.shouldTearDownTestingModule()) {\n                    this.tearDownTestingModule();\n                }\n            }\n            finally {\n                this._testModuleRef = null;\n                this._instanceTeardownOptions = undefined;\n                this._instanceErrorOnUnknownElementsOption = undefined;\n                this._instanceErrorOnUnknownPropertiesOption = undefined;\n            }\n        }\n        return this;\n    }\n    configureCompiler(config) {\n        if (config.useJit != null) {\n            throw new Error('the Render3 compiler JiT mode is not configurable !');\n        }\n        if (config.providers !== undefined) {\n            this.compiler.setCompilerProviders(config.providers);\n        }\n        return this;\n    }\n    configureTestingModule(moduleDef) {\n        this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n        // Trigger module scoping queue flush before executing other TestBed operations in a test.\n        // This is needed for the first test invocation to ensure that globally declared modules have\n        // their components scoped properly. See the `checkGlobalCompilationFinished` function\n        // description for additional info.\n        this.checkGlobalCompilationFinished();\n        // Always re-assign the options, even if they're undefined.\n        // This ensures that we don't carry them between tests.\n        this._instanceTeardownOptions = moduleDef.teardown;\n        this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;\n        this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties;\n        // Store the current value of the strict mode option,\n        // so we can restore it later\n        this._previousErrorOnUnknownElementsOption = ɵgetUnknownElementStrictMode$1();\n        ɵsetUnknownElementStrictMode$1(this.shouldThrowErrorOnUnknownElements());\n        this._previousErrorOnUnknownPropertiesOption = ɵgetUnknownPropertyStrictMode$1();\n        ɵsetUnknownPropertyStrictMode$1(this.shouldThrowErrorOnUnknownProperties());\n        this.compiler.configureTestingModule(moduleDef);\n        return this;\n    }\n    compileComponents() {\n        return this.compiler.compileComponents();\n    }\n    inject(token, notFoundValue, flags) {\n        if (token === TestBed) {\n            return this;\n        }\n        const UNDEFINED = {};\n        const result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    get(token, notFoundValue = Injector$1.THROW_IF_NOT_FOUND, flags = InjectFlags$1.Default) {\n        return this.inject(token, notFoundValue, flags);\n    }\n    execute(tokens, fn, context) {\n        const params = tokens.map(t => this.inject(t));\n        return fn.apply(context, params);\n    }\n    overrideModule(ngModule, override) {\n        this.assertNotInstantiated('overrideModule', 'override module metadata');\n        this.compiler.overrideModule(ngModule, override);\n        return this;\n    }\n    overrideComponent(component, override) {\n        this.assertNotInstantiated('overrideComponent', 'override component metadata');\n        this.compiler.overrideComponent(component, override);\n        return this;\n    }\n    overrideTemplateUsingTestingModule(component, template) {\n        this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n        this.compiler.overrideTemplateUsingTestingModule(component, template);\n        return this;\n    }\n    overrideDirective(directive, override) {\n        this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this.compiler.overrideDirective(directive, override);\n        return this;\n    }\n    overridePipe(pipe, override) {\n        this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this.compiler.overridePipe(pipe, override);\n        return this;\n    }\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token, provider) {\n        this.assertNotInstantiated('overrideProvider', 'override provider');\n        this.compiler.overrideProvider(token, provider);\n        return this;\n    }\n    overrideTemplate(component, template) {\n        return this.overrideComponent(component, { set: { template, templateUrl: null } });\n    }\n    createComponent(type) {\n        const testComponentRenderer = this.inject(TestComponentRenderer);\n        const rootElId = `root${_nextRootElementId++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        const componentDef = type.ɵcmp;\n        if (!componentDef) {\n            throw new Error(`It looks like '${ɵstringify(type)}' has not been compiled.`);\n        }\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n        const ngZone = noNgZone ? null : this.inject(NgZone, null);\n        const componentFactory = new ɵRender3ComponentFactory(componentDef);\n        const initComponent = () => {\n            const componentRef = componentFactory.create(Injector$1.NULL, [], `#${rootElId}`, this.testModuleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get compiler() {\n        if (this._compiler === null) {\n            throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n        }\n        return this._compiler;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get testModuleRef() {\n        if (this._testModuleRef === null) {\n            this._testModuleRef = this.compiler.finalize();\n        }\n        return this._testModuleRef;\n    }\n    assertNotInstantiated(methodName, methodDescription) {\n        if (this._testModuleRef !== null) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    /**\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\n     *\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n     * in-progress module compilation. This creates a potential hazard - the very first time the\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\n     * compilations of modules declared in global scope. These compilations should be finished.\n     *\n     * To ensure that globally declared modules have their components scoped properly, this function\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n     * to any other operations, the scoping queue is flushed.\n     */\n    checkGlobalCompilationFinished() {\n        // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n        // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n        if (!this.globalCompilationChecked && this._testModuleRef === null) {\n            ɵflushModuleScopingQueueAsMuchAsPossible();\n        }\n        this.globalCompilationChecked = true;\n    }\n    destroyActiveFixtures() {\n        let errorCount = 0;\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                errorCount++;\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n        if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n            throw Error(`${errorCount} ${(errorCount === 1 ? 'component' : 'components')} ` +\n                `threw errors during cleanup`);\n        }\n    }\n    shouldRethrowTeardownErrors() {\n        const instanceOptions = this._instanceTeardownOptions;\n        const environmentOptions = TestBedImpl._environmentTeardownOptions;\n        // If the new teardown behavior hasn't been configured, preserve the old behavior.\n        if (!instanceOptions && !environmentOptions) {\n            return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n        }\n        // Otherwise use the configured behavior or default to rethrowing.\n        return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ??\n            this.shouldTearDownTestingModule();\n    }\n    shouldThrowErrorOnUnknownElements() {\n        // Check if a configuration has been provided to throw when an unknown element is found\n        return this._instanceErrorOnUnknownElementsOption ??\n            TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;\n    }\n    shouldThrowErrorOnUnknownProperties() {\n        // Check if a configuration has been provided to throw when an unknown property is found\n        return this._instanceErrorOnUnknownPropertiesOption ??\n            TestBedImpl._environmentErrorOnUnknownPropertiesOption ??\n            THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;\n    }\n    shouldTearDownTestingModule() {\n        return this._instanceTeardownOptions?.destroyAfterEach ??\n            TestBedImpl._environmentTeardownOptions?.destroyAfterEach ??\n            TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    }\n    tearDownTestingModule() {\n        // If the module ref has already been destroyed, we won't be able to get a test renderer.\n        if (this._testModuleRef === null) {\n            return;\n        }\n        // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n        // last step, but the injector will be destroyed as a part of the module ref destruction.\n        const testRenderer = this.inject(TestComponentRenderer);\n        try {\n            this._testModuleRef.destroy();\n        }\n        catch (e) {\n            if (this.shouldRethrowTeardownErrors()) {\n                throw e;\n            }\n            else {\n                console.error('Error during cleanup of a testing module', {\n                    component: this._testModuleRef.instance,\n                    stacktrace: e,\n                });\n            }\n        }\n        finally {\n            testRenderer.removeAllRootElements?.();\n        }\n    }\n}\nTestBedImpl._INSTANCE = null;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @publicApi\n */\nconst TestBed = TestBedImpl;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`. Note: this function\n * (imported from the `@angular/core/testing` package) can **only** be used to inject dependencies\n * in tests. To inject dependencies in your application code, use the [`inject`](api/core/inject)\n * function from the `@angular/core` package instead.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n    const testBed = TestBedImpl.INSTANCE;\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        return testBed.execute(tokens, fn, this);\n    };\n}\n/**\n * @publicApi\n */\nclass InjectSetupWrapper {\n    constructor(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    _addModule() {\n        const moduleDef = this._moduleDef();\n        if (moduleDef) {\n            TestBedImpl.configureTestingModule(moduleDef);\n        }\n    }\n    inject(tokens, fn) {\n        const self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    }\n}\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            const testBed = TestBedImpl.INSTANCE;\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _global = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n    _global.beforeEach(getCleanupHook(false));\n}\n// We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\nif (_global.afterEach) {\n    _global.afterEach(getCleanupHook(true));\n}\nfunction getCleanupHook(expectedTeardownValue) {\n    return () => {\n        const testBed = TestBedImpl.INSTANCE;\n        if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n            testBed.resetTestingModule();\n            resetFakeAsyncZone();\n        }\n    };\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };\n"],"mappings":"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;;EACD,MAAM,IAAI4C,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,IAAT,CAAcC,MAAM,GAAG,CAAvB,EAA0BC,WAAW,GAAG;EACpCC,iCAAiC,EAAE;AADC,CAAxC,EAEG;EACC,IAAIP,mBAAJ,EAAyB;IACrB,OAAOA,mBAAmB,CAACI,IAApB,CAAyBC,MAAzB,EAAiCC,WAAjC,CAAP;EACH;;EACD,MAAM,IAAIrB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,KAAT,CAAeC,QAAf,EAAyB;EACrB,IAAIT,mBAAJ,EAAyB;IACrB,OAAOA,mBAAmB,CAACQ,KAApB,CAA0BC,QAA1B,CAAP;EACH;;EACD,MAAM,IAAIxB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASS,oBAAT,GAAgC;EAC5B,IAAIV,mBAAJ,EAAyB;IACrB,OAAOA,mBAAmB,CAACU,oBAApB,EAAP;EACH;;EACD,MAAM,IAAIzB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASU,eAAT,GAA2B;EACvB,IAAIX,mBAAJ,EAAyB;IACrB,OAAOA,mBAAmB,CAACW,eAApB,EAAP;EACH;;EACD,MAAM,IAAI1B,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMW,0CAA0C,GAAG,IAA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CAAC;QAAE;QAAH,EAAyCqJ,SAAzC,EAAoDH,IAApD,CAAR;MACH;IACJ;EACJ,CAfD,MAgBK;IACDlJ,QAAQ,CAAC;IAAE;IAAH,EAA2CqJ,SAA3C,EAAsDH,IAAtD,CAAR;;IACA,IAAI;MACAA,IAAI,CAAC/e,IAAL,CAAUkf,SAAV;IACH,CAFD,SAGQ;MACJrJ,QAAQ,CAAC;MAAE;MAAH,EAAyCqJ,SAAzC,EAAoDH,IAApD,CAAR;IACH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,kBAAkB,GAAG,CAAC,CAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAN,CAA0B;EACtB3xB,WAAW;EACX;AACJ;AACA;EACIyK,OAJW;EAKX;AACJ;AACA;EACImnB,cARW,EAQKC,oBARL,EAQ2B;IAClC,KAAKpnB,OAAL,GAAeA,OAAf;IACA;AACR;AACA;AACA;;IACQ,KAAKqnB,SAAL,GAAiB,KAAjB;IACArpB,SAAS,IAAI4F,aAAa,CAAC5D,OAAD,EAAU,uBAAV,CAA1B;IACAhC,SAAS,IAAIoF,WAAW,CAAC,OAAOpD,OAAR,EAAiB,UAAjB,EAA6B,4BAA7B,CAAxB;IACA,KAAKsnB,mBAAL,GAA2BH,cAA3B;IACA,KAAKI,UAAL,GAAkBH,oBAAlB;EACH;;AApBq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;IACA,KAAKsL,KAAL,GAAaF,IAAI,CAACpL,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAb;IACA,KAAKuL,KAAL,GAAaH,IAAI,CAACpL,KAAL,CAAW,GAAX,EAAgB1wB,KAAhB,CAAsB,CAAtB,EAAyBnG,IAAzB,CAA8B,GAA9B,CAAb;EACH;;AANS;AAQd;AACA;AACA;;;AACA,MAAMqiC,OAAO,GAAG,IAAIL,OAAJ,CAAY,QAAZ,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMM,qCAAqC,GAAG,EAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG;EAC3BpjC,IAAI,EAAE;AADqB,CAA/B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMqjC,gBAAgB,GAAG;EACrBrjC,IAAI,EAAE;AADe,CAAzB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIsjC,gCAAgC,GAAG,KAAvC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASztC,4BAAT,CAAsC0tC,WAAtC,EAAmD;EAC/CD,gCAAgC,GAAGC,WAAnC;AACH;AACD;AACA;AACA;;;AACA,SAASttC,4BAAT,GAAwC;EACpC,OAAOqtC,gCAAP;AACH;;AACD,IAAIE,iCAAiC,GAAG,KAAxC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASztC,6BAAT,CAAuCwtC,WAAvC,EAAoD;EAChDC,iCAAiC,GAAGD,WAApC;AACH;AACD;AACA;AACA;;;AACA,SAASptC,6BAAT,GAAyC;EACrC,OAAOqtC,iCAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCzR,OAAhC,EAAyCpW,KAAzC,EA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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAN,CAAyB;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACkB,OAAPvhD,OAAO,CAACwI,SAAD,EAAY;IACtB,OAAOg4C,0BAA0B,CAACh4C,SAAD,CAAjC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC2B,OAAhBg5C,gBAAgB,CAACh5C,SAAD,EAAYua,MAAZ,EAAoB;IACvC,MAAM0+B,2BAA2B,GAAGF,kBAAkB,CAACvhD,OAAnB,CAA2BwI,SAA3B,CAApC;IACA,OAAO+4C,kBAAkB,CAACG,qBAAnB,CAAyCD,2BAAzC,EAAsE1+B,MAAtE,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACgC,OAArB2+B,qBAAqB,CAACl5C,SAAD,EAAYua,MAAZ,EAAoB;IAC5C,OAAO,IAAI4+B,mBAAJ,CAAwBn5C,SAAxB,EAAmCua,MAAnC,CAAP;EACH;;AAzFoB;;AA2FzB,MAAM4+B,mBAAN,CAA0B;EACtB;AACJ;AACA;EACIjkD,WAAW,CAACkkD,UAAD,EAAaC,OAAb,EAAsB;IAC7B;IACA,KAAKC,oBAAL,GAA4B,CAA5B;IACA,KAAKF,UAAL,GAAkBA,UAAlB;IACA,KAAK7+B,MAAL,GAAc8+B,OAAO,IAAI,IAAzB;IACA,MAAME,GAAG,GAAGH,UAAU,CAACp+C,MAAvB;IACA,KAAKw+C,MAAL,GAAc,EAAd;IACA,KAAKC,IAAL,GAAY,EAAZ;;IACA,KAAK,IAAIr1C,CAAC,GAAG,CAAb,EA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,aAAa,CAAC,KAAKwB,mBAAL,IAA4B,KAAKv/B,MAAlC,CAAb;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI6/B,MAAM,GAAG;IACL,KAAK7/B,MAAL,CAAYxW,KAAZ,KAAsB,CAAC;IAAG;IAA1B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIs2C,QAAQ,GAAG;IACP,KAAK9/B,MAAL,CAAYxW,KAAZ,KAAsB;IAAG;IAAzB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI3gB,aAAa,GAAG;IACZm1D,qBAAqB,CAAC,KAAKh+B,MAAL,CAAYzW,KAAZ,CAAD,EAAqB,KAAKyW,MAA1B,EAAkC,KAAKtc,OAAvC,CAArB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIta,cAAc,GAAG;IACb,IAAI0G,SAAJ,EAAe;MACXquD,sBAAsB,CAAC,KAAKn+B,MAAL,CAAYzW,KAAZ,CAAD,EAAqB,KAAKyW,MAA1B,EAAkC,KAAKtc,OAAvC,CAAtB;IACH;EACJ;;EACDq8C,wBAAwB,GAAG;IACvB,IAAI,KAAKP,OAAT,EAAkB;MACd,MAAM,IAAI/rD,YAAJ,CAAiB;MAAI;MAArB,EAAmE3D,SAAS,IAAI,+DAAhF,CAAN;IACH;;IACD,KAAK2vD,wBAAL,GAAgC,IAAhC;EACH;;EACDO,gBAAgB,GAAG;IACf,KAAKR,OAAL,GAAe,IAAf;IACA/iB,gBAAgB,CAAC,KAAKzc,MAAL,CAAYzW,KAAZ,CAAD,EAAqB,KAAKyW,MAA1B,CAAhB;EACH;;EACDigC,cAAc,CAACC,MAAD,EAAS;IACnB,IAAI,KAAKT,wBAAT,EAAmC;MAC/B,MAAM,IAAIhsD,YAAJ,CAAiB;MAAI;MAArB,EAAmE3D,SAAS,IAAI,mDAAhF,CAAN;IACH;;IACD,KAAK0vD,OAAL,GAAeU,MAAf;EACH;;AAtQS;AAwQd;;;AACA,MAAMC,WAAN,SAA0Bb,OAA1B,CAAkC;EAC9Bj4D,WAAW,CAAC+4D,KAAD,EAAQ;IACf,MAAMA,KAAN;IACA,KAAKA,KAAL,GAAaA,KAAb;EACH;;EACDv3D,aAAa,GAAG;IACZ,MAAMijB,KAAK,GAAG,KAAKs0C,KAAnB;IACA,MAAM5hD,KAAK,GAAGsN,KAAK,CAACvC,KAAD,CAAnB;IACA,MAAM7F,OAAO,GAAGoI,KAAK,CAAChC,OAAD,CAArB;IACAk0C,qBAAqB,CAACx/C,KAAD,EAAQsN,KAAR,EAAepI,OAAf,EAAwB,KAAxB,CAArB;EACH;;EACDta,cAAc,GAAG;IACb,IAAI0G,SAAJ,EAAe;MACX,MAAMgc,KAAK,GAAG,KAAKs0C,KAAnB;MACA,MAAM5hD,KAAK,GAAGsN,KAAK,CAACvC,KAAD,CAAnB;MACA,MAAM7F,OAAO,GAAGoI,KAAK,CAAChC,OAAD,CAArB;MACAq0C,sBAAsB,CAAC3/C,KAAD,EAAQsN,KAAR,EAAepI,OAAf,EAAwB,KAAxB,CAAtB;IACH;EACJ;;EACU,IAAPA,OAAO,GAAG;IACV,OAAO,IAAP;EACH;;AArB6B;AAwBlC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM28C,wBAAN,SAAuCjuB,0BAAvC,CAAkE;EAC9D;AACJ;AACA;EACI/qC,WAAW,CAACqmC,QAAD,EAAW;IAClB;IACA,KAAKA,QAAL,GAAgBA,QAAhB;EACH;;EACDyE,uBAAuB,CAACzlC,SAAD,EAAY;IAC/BoD,SAAS,IAAIuc,mBAAmB,CAAC3f,SAAD,CAAhC;IACA,MAAMmoC,YAAY,GAAG/sB,iBAAiB,CAACpb,SAAD,CAAtC;IACA,OAAO,IAAI4zD,gBAAJ,CAAqBzrB,YAArB,EAAmC,KAAKnH,QAAxC,CAAP;EACH;;AAZ6D;;AAclE,SAAS6yB,UAAT,CAAoBzvD,GAApB,EAAyB;EACrB,MAAM4G,KAAK,GAAG,EAAd;;EACA,KAAK,IAAI8oD,WAAT,IAAwB1vD,GAAxB,EAA6B;IACzB,IAAIA,GAAG,CAACzC,cAAJ,CAAmBmyD,WAAnB,CAAJ,EAAqC;MACjC,MAAMC,QAAQ,GAAG3vD,GAAG,CAAC0vD,WAAD,CAApB;MACA9oD,KAAK,CAAC5K,IAAN,CAAW;QAAE0N,QAAQ,EAAEimD,QAAZ;QAAsBC,YAAY,EAAEF;MAApC,CAAX;IACH;EACJ;;EACD,OAAO9oD,KAAP;AACH;;AACD,SAASipD,YAAT,CAAsBC,WAAtB,EAAmC;EAC/B,MAAM1wD,IAAI,GAAG0wD,WAAW,CAAC3wC,WAAZ,EAAb;EACA,OAAO/f,IAAI,KAAK,KAAT,GAAiByf,aAAjB,GAAkCzf,IAAI,KAAK,MAAT,GAAkB2f,iBAAlB,GAAsC,IAA/E;AACH;AACD;AACA;AACA;AACA;;;AACA,MAAMgxC,eAAN,CAAsB;EAClBx5D,WAAW,CAAC2C,QAAD,EAAW82D,cAAX,EAA2B;IAClC,KAAK92D,QAAL,GAAgBA,QAAhB;IACA,KAAK82D,cAAL,GAAsBA,cAAtB;EACH;;EACD72D,GAAG,CAAC0G,KAAD,EAAQwQ,aAAR,EAAuBC,KAAvB,EAA8B;IAC7B,MAAMrP,KAAK,GAAG,KAAK/H,QAAL,CAAcC,GAAd,CAAkB0G,KAAlB,EAAyB0iC,qCAAzB,EAAgEjyB,KAAhE,CAAd;;IACA,IAAIrP,KAAK,KAAKshC,qCAAV,IACAlyB,aAAa,KAAKkyB,qCADtB,EAC6D;MACzD;MACA;MACA;MACA;MACA;MACA,OAAOthC,KAAP;IACH;;IACD,OAAO,KAAK+uD,cAAL,CAAoB72D,GAApB,CAAwB0G,KAAxB,EAA+BwQ,aAA/B,EAA8CC,KAA9C,CAAP;EACH;;AAjBiB;AAmBtB;AACA;AACA;;;AACA,MAAMk/C,gBAAN,SAA+BxuB,kBAA/B,CAAkD;EAC9C;AACJ;AACA;AACA;EACIzqC,WAAW,CAACwtC,YAAD,EAAenH,QAAf,EAAyB;IAChC;IACA,KAAKmH,YAAL,GAAoBA,YAApB;IACA,KAAKnH,QAAL,GAAgBA,QAAhB;IACA,KAAKqzB,aAAL,GAAqBlsB,YAAY,CAACloC,IAAlC;IACA,KAAK62C,QAAL,GAAgB6B,wBAAwB,CAACxQ,YAAY,CAACjuB,SAAd,CAAxC;IACA,KAAKf,kBAAL,GACIgvB,YAAY,CAAChvB,kBAAb,GAAkCgvB,YAAY,CAAChvB,kBAA/C,GAAoE,EADxE;IAEA,KAAKm7C,eAAL,GAAuB,CAAC,CAACtzB,QAAzB;EACH;;EACS,IAANxnB,MAAM,GAAG;IACT,OAAOq6C,UAAU,CAAC,KAAK1rB,YAAL,CAAkB3uB,MAAnB,CAAjB;EACH;;EACU,IAAPC,OAAO,GAAG;IACV,OAAOo6C,UAAU,CAAC,KAAK1rB,YAAL,CAAkB1uB,OAAnB,CAAjB;EACH;;EACDhM,MAAM,CAACnQ,QAAD,EAAWi3D,gBAAX,EAA6BC,kBAA7B,EAAiDC,mBAAjD,EAAsE;IACxEA,mBAAmB,GAAGA,mBAAmB,IAAI,KAAKzzB,QAAlD;IACA,IAAI0zB,uBAAuB,GAAGD,mBAAmB,YAAY3xB,mBAA/B,GAC1B2xB,mBAD0B,GAE1BA,mBAAmB,EAAEn3D,QAFzB;;IAGA,IAAIo3D,uBAAuB,IAAI,KAAKvsB,YAAL,CAAkBluB,qBAAlB,KAA4C,IAA3E,EAAiF;MAC7Ey6C,uBAAuB,GAAG,KAAKvsB,YAAL,CAAkBluB,qBAAlB,CAAwCy6C,uBAAxC,KACtBA,uBADJ;IAEH;;IACD,MAAMC,gBAAgB,GAAGD,uBAAuB,GAAG,IAAIP,eAAJ,CAAoB72D,QAApB,EAA8Bo3D,uBAA9B,CAAH,GAA4Dp3D,QAA5G;IACA,MAAMmqD,eAAe,GAAGkN,gBAAgB,CAACp3D,GAAjB,CAAqB5G,gBAArB,EAAuC,IAAvC,CAAxB;;IACA,IAAI8wD,eAAe,KAAK,IAAxB,EAA8B;MAC1B,MAAM,IAAI1gD,YAAJ,CAAiB;MAAI;MAArB,EAAgE3D,SAAS,IAC3E,mEACI,+CADJ,GAEI,iFAHF,CAAN;IAIH;;IACD,MAAM26B,SAAS,GAAG42B,gBAAgB,CAACp3D,GAAjB,CAAqB6oC,SAArB,EAAgC,IAAhC,CAAlB;IACA,MAAMwuB,YAAY,GAAGnN,eAAe,CAAC2I,cAAhB,CAA+B,IAA/B,EAAqC,KAAKjoB,YAA1C,CAArB,CAlBwE,CAmBxE;IACA;;IACA,MAAM+rB,WAAW,GAAG,KAAK/rB,YAAL,CAAkBjuB,SAAlB,CAA4B,CAA5B,EAA+B,CAA/B,KAAqC,KAAzD;IACA,MAAM26C,SAAS,GAAGL,kBAAkB,GAChCnI,iBAAiB,CAACuI,YAAD,EAAeJ,kBAAf,EAAmC,KAAKrsB,YAAL,CAAkB7tB,aAArD,CADe,GAEhCo1B,iBAAiB,CAAC+X,eAAe,CAAC2I,cAAhB,CAA+B,IAA/B,EAAqC,KAAKjoB,YAA1C,CAAD,EAA0D+rB,WAA1D,EAAuED,YAAY,CAACC,WAAD,CAAnF,CAFrB;IAGA,MAAMY,SAAS,GAAG,KAAK3sB,YAAL,CAAkBxuB,MAAlB,GAA2B;IAAG;IAAH,EAA4B;IAAI;IAA3D,EACd;IAAG;IAAH,EAAkC;IAAI;IAD1C,CAzBwE,CA2BxE;;IACA,MAAMo7C,SAAS,GAAGjJ,WAAW,CAAC;IAAE;IAAH,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,CAA7B;IACA,MAAMkJ,SAAS,GAAGhL,WAAW,CAAC,IAAD,EAAO+K,SAAP,EAAkB,IAAlB,EAAwBD,SAAxB,EAAmC,IAAnC,EAAyC,IAAzC,EAA+CrN,eAA/C,EAAgEmN,YAAhE,EAA8E72B,SAA9E,EAAyF42B,gBAAzF,EAA2G,IAA3G,CAA7B,CA7BwE,CA8BxE;IACA;IACA;IACA;IACA;;IACArsC,SAAS,CAAC0sC,SAAD,CAAT;IACA,IAAIh1D,SAAJ;IACA,IAAIi1D,YAAJ;;IACA,IAAI;MACA,MAAM3pB,aAAa,GAAG4pB,uBAAuB,CAACL,SAAD,EAAY,KAAK1sB,YAAjB,EAA+B6sB,SAA/B,EAA0CvN,eAA1C,EAA2DmN,YAA3D,CAA7C;;MACA,IAAIC,SAAJ,EAAe;QACX,IAAIL,kBAAJ,EAAwB;UACpBlnC,eAAe,CAACsnC,YAAD,EAAeC,SAAf,EAA0B,CAAC,YAAD,EAAenuB,OAAO,CAACJ,IAAvB,CAA1B,CAAf;QACH,CAFD,MAGK;UACD;UACA;UACA;UACA,MAAM;YAAE9Y,KAAF;YAASsD;UAAT,IAAqB+nB,kCAAkC,CAAC,KAAK1Q,YAAL,CAAkBjuB,SAAlB,CAA4B,CAA5B,CAAD,CAA7D;;UACA,IAAIsT,KAAJ,EAAW;YACPF,eAAe,CAACsnC,YAAD,EAAeC,SAAf,EAA0BrnC,KAA1B,CAAf;UACH;;UACD,IAAIsD,OAAO,IAAIA,OAAO,CAACrwB,MAAR,GAAiB,CAAhC,EAAmC;YAC/Bs1C,gBAAgB,CAAC6e,YAAD,EAAeC,SAAf,EAA0B/jC,OAAO,CAACzsB,IAAR,CAAa,GAAb,CAA1B,CAAhB;UACH;QACJ;MACJ;;MACD4wD,YAAY,GAAGnxC,QAAQ,CAACixC,SAAD,EAAY72C,aAAZ,CAAvB;;MACA,IAAIq2C,gBAAgB,KAAKl3D,SAAzB,EAAoC;QAChC,MAAM8jB,UAAU,GAAG8zC,YAAY,CAAC9zC,UAAb,GAA0B,EAA7C;;QACA,KAAK,IAAItX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsP,kBAAL,CAAwB1Y,MAA5C,EAAoDoJ,CAAC,EAArD,EAAyD;UACrD,MAAMsrD,YAAY,GAAGZ,gBAAgB,CAAC1qD,CAAD,CAArC,CADqD,CAErD;UACA;UACA;UACA;UACA;;UACAsX,UAAU,CAAC/gB,IAAX,CAAgB+0D,YAAY,IAAI,IAAhB,GAAuBjxD,KAAK,CAAC65C,IAAN,CAAWoX,YAAX,CAAvB,GAAkD,IAAlE;QACH;MACJ,CA/BD,CAgCA;MACA;MACA;;;MACAn1D,SAAS,GACLo1D,mBAAmB,CAAC9pB,aAAD,EAAgB,KAAKnD,YAArB,EAAmC6sB,SAAnC,EAA8C,CAACK,qBAAD,CAA9C,CADvB;MAEA5K,UAAU,CAACsK,SAAD,EAAYC,SAAZ,EAAuB,IAAvB,CAAV;IACH,CAtCD,SAuCQ;MACJ9rC,SAAS;IACZ;;IACD,OAAO,IAAIosC,YAAJ,CAAiB,KAAKjB,aAAtB,EAAqCr0D,SAArC,EAAgD6lC,gBAAgB,CAACovB,YAAD,EAAeD,SAAf,CAAhE,EAA2FA,SAA3F,EAAsGC,YAAtG,CAAP;EACH;;AAtG6C;;AAwGlD,MAAMM,wBAAwB,GAAG,IAAI5B,wBAAJ,EAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS6B,8BAAT,GAA0C;EACtC,OAAOD,wBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMD,YAAN,SAA2BnwB,cAA3B,CAA0C;EACtCxqC,WAAW,CAAC05D,aAAD,EAAgBx4D,QAAhB,EAA0BJ,QAA1B,EAAoCg6D,UAApC,EAAgDpiC,MAAhD,EAAwD;IAC/D;IACA,KAAK53B,QAAL,GAAgBA,QAAhB;IACA,KAAKg6D,UAAL,GAAkBA,UAAlB;IACA,KAAKpiC,MAAL,GAAcA,MAAd;IACA,KAAKx3B,QAAL,GAAgBA,QAAhB;IACA,KAAKsoB,QAAL,GAAgB,KAAK5oB,iBAAL,GAAyB,IAAIk4D,WAAJ,CAAgBgC,UAAhB,CAAzC;IACA,KAAKpB,aAAL,GAAqBA,aAArB;EACH;;EACD55C,QAAQ,CAACjX,IAAD,EAAO6B,KAAP,EAAc;IAClB,MAAMyoD,SAAS,GAAG,KAAKz6B,MAAL,CAAY7Z,MAA9B;IACA,IAAIu0C,SAAJ;;IACA,IAAID,SAAS,KAAK,IAAd,KAAuBC,SAAS,GAAGD,SAAS,CAACtqD,IAAD,CAA5C,CAAJ,EAAyD;MACrD,MAAM4b,KAAK,GAAG,KAAKq2C,UAAnB;MACAzH,oBAAoB,CAAC5uC,KAAK,CAACvC,KAAD,CAAN,EAAeuC,KAAf,EAAsB2uC,SAAtB,EAAiCvqD,IAAjC,EAAuC6B,KAAvC,CAApB;MACA4oD,iBAAiB,CAAC7uC,KAAD,EAAQ,KAAKiU,MAAL,CAAY1yB,KAApB,CAAjB;IACH,CAJD,MAKK;MACD,IAAIyC,SAAJ,EAAe;QACX,MAAMsyD,eAAe,GAAGpiD,iBAAiB,CAAC,KAAK+gD,aAAN,CAAzC;QACA,IAAI9wD,OAAO,GAAI,2BAA0BC,IAAK,mBAAkBkyD,eAAgB,eAAhF;QACAnyD,OAAO,IAAK,uBAAsBC,IAAK,6DAA4DA,IAAK,YAAxG;QACAwkC,0BAA0B,CAACzkC,OAAD,CAA1B;MACH;IACJ;EACJ;;EACW,IAARjG,QAAQ,GAAG;IACX,OAAO,IAAI81B,YAAJ,CAAiB,KAAKC,MAAtB,EAA8B,KAAKoiC,UAAnC,CAAP;EACH;;EACD/3D,OAAO,GAAG;IACN,KAAKymB,QAAL,CAAczmB,OAAd;EACH;;EACD8e,SAAS,CAACqnB,QAAD,EAAW;IAChB,KAAK1f,QAAL,CAAc3H,SAAd,CAAwBqnB,QAAxB;EACH;;AAnCqC,C,CAqC1C;;;AACA,MAAM8xB,aAAa,GAAG;EAClBp4D,GAAG,EAAE,CAAC0G,KAAD,EAAQwQ,aAAR,KAA0B;IAC3BT,0BAA0B,CAAC/P,KAAD,EAAQ,cAAR,CAA1B;EACH;AAHiB,CAAtB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASixD,uBAAT,CAAiCpmB,KAAjC,EAAwC5oC,GAAxC,EAA6CkoC,QAA7C,EAAuDqZ,eAAvD,EAAwEmN,YAAxE,EAAsF72B,SAAtF,EAAiG;EAC7F,MAAMjsB,KAAK,GAAGs8B,QAAQ,CAACvxB,KAAD,CAAtB;EACA,MAAMlc,KAAK,GAAGud,aAAd;EACA9a,SAAS,IAAIiG,kBAAkB,CAAC+kC,QAAD,EAAWztC,KAAX,CAA/B;EACAytC,QAAQ,CAACztC,KAAD,CAAR,GAAkBmuC,KAAlB,CAJ6F,CAK7F;EACA;EACA;;EACA,MAAMj9B,KAAK,GAAGq4C,gBAAgB,CAACp4C,KAAD,EAAQnR,KAAR,EAAe;EAAE;EAAjB,EAA0C,OAA1C,EAAmD,IAAnD,CAA9B;EACA,MAAMkjD,WAAW,GAAGhyC,KAAK,CAACgyC,WAAN,GAAoB39C,GAAG,CAACoT,SAA5C;;EACA,IAAIuqC,WAAW,KAAK,IAApB,EAA0B;IACtBuO,oBAAoB,CAACvgD,KAAD,EAAQgyC,WAAR,EAAqB,IAArB,CAApB;;IACA,IAAI/U,KAAK,KAAK,IAAd,EAAoB;MAChBxhB,eAAe,CAACsnC,YAAD,EAAe9lB,KAAf,EAAsB+U,WAAtB,CAAf;;MACA,IAAIhyC,KAAK,CAACif,OAAN,KAAkB,IAAtB,EAA4B;QACxBilB,gBAAgB,CAAC6e,YAAD,EAAe9lB,KAAf,EAAsBj9B,KAAK,CAACif,OAA5B,CAAhB;MACH;;MACD,IAAIjf,KAAK,CAACtR,MAAN,KAAiB,IAArB,EAA2B;QACvBu1C,gBAAgB,CAAC8e,YAAD,EAAe9lB,KAAf,EAAsBj9B,KAAK,CAACtR,MAA5B,CAAhB;MACH;IACJ;EACJ;;EACD,MAAMq1D,YAAY,GAAGnO,eAAe,CAAC2I,cAAhB,CAA+BthB,KAA/B,EAAsC5oC,GAAtC,CAArB;EACA,MAAMolC,aAAa,GAAG0e,WAAW,CAAC5b,QAAD,EAAWyd,yBAAyB,CAAC3lD,GAAD,CAApC,EAA2C,IAA3C,EAAiDA,GAAG,CAACyT,MAAJ,GAAa;EAAG;EAAhB,EAAyC;EAAG;EAA7F,EAA2Hy0B,QAAQ,CAACztC,KAAD,CAAnI,EAA4IkR,KAA5I,EAAmJ41C,eAAnJ,EAAoKmO,YAApK,EAAkL73B,SAAS,IAAI,IAA/L,EAAqM,IAArM,EAA2M,IAA3M,CAAjC;;EACA,IAAIjsB,KAAK,CAACF,eAAV,EAA2B;IACvB+e,kBAAkB,CAACb,8BAA8B,CAACje,KAAD,EAAQu8B,QAAR,CAA/B,EAAkDt8B,KAAlD,EAAyD5L,GAAG,CAACjG,IAA7D,CAAlB;IACA6vD,mBAAmB,CAACh+C,KAAD,EAAQD,KAAR,CAAnB;IACAi9C,cAAc,CAACj9C,KAAD,EAAQu8B,QAAQ,CAAC3tC,MAAjB,EAAyB,CAAzB,CAAd;EACH;;EACD0vD,aAAa,CAAC/hB,QAAD,EAAW9C,aAAX,CAAb,CA7B6F,CA8B7F;;EACA,OAAO8C,QAAQ,CAACztC,KAAD,CAAR,GAAkB2qC,aAAzB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS8pB,mBAAT,CAA6B9pB,aAA7B,EAA4CnD,YAA5C,EAA0D6sB,SAA1D,EAAqEa,YAArE,EAAmF;EAC/E,MAAM/jD,KAAK,GAAGkjD,SAAS,CAACn4C,KAAD,CAAvB,CAD+E,CAE/E;;EACA,MAAM7c,SAAS,GAAGuuD,wBAAwB,CAACz8C,KAAD,EAAQkjD,SAAR,EAAmB7sB,YAAnB,CAA1C,CAH+E,CAI/E;EACA;;EACAmD,aAAa,CAACluB,OAAD,CAAb,GAAyB43C,SAAS,CAAC53C,OAAD,CAAT,GAAqBpd,SAA9C;;EACA,IAAI61D,YAAY,KAAK,IAArB,EAA2B;IACvB,KAAK,MAAMl7C,OAAX,IAAsBk7C,YAAtB,EAAoC;MAChCl7C,OAAO,CAAC3a,SAAD,EAAYmoC,YAAZ,CAAP;IACH;EACJ,CAX8E,CAY/E;EACA;;;EACA,IAAIA,YAAY,CAAC5uB,cAAjB,EAAiC;IAC7B,MAAM1H,KAAK,GAAGoU,eAAe,EAA7B;IACA7iB,SAAS,IAAI4F,aAAa,CAAC6I,KAAD,EAAQ,gBAAR,CAA1B;IACAs2B,YAAY,CAAC5uB,cAAb,CAA4B;IAAE;IAA9B,EAAwDvZ,SAAxD,EAAmE6R,KAAK,CAAC4Y,cAAzE;EACH;;EACD,MAAM+jC,SAAS,GAAGvoC,eAAe,EAAjC;EACA7iB,SAAS,IAAI4F,aAAa,CAACwlD,SAAD,EAAY,wCAAZ,CAA1B;;EACA,IAAI18C,KAAK,CAACF,eAAN,KACCu2B,YAAY,CAAC/uB,YAAb,KAA8B,IAA9B,IAAsC+uB,YAAY,CAAC7uB,SAAb,KAA2B,IADlE,CAAJ,EAC6E;IACzEmQ,gBAAgB,CAAC+kC,SAAS,CAAC7tD,KAAX,CAAhB;IACA,MAAMo0D,SAAS,GAAGC,SAAS,CAACn4C,KAAD,CAA3B;IACAuyC,0BAA0B,CAAC2F,SAAD,EAAYvG,SAAZ,EAAuBwG,SAAvB,EAAkCxG,SAAS,CAAC/jC,cAA5C,EAA4D+jC,SAAS,CAAC9jC,YAAtE,EAAoFyd,YAApF,CAA1B;IACAynB,gCAAgC,CAACznB,YAAD,EAAenoC,SAAf,CAAhC;EACH;;EACD,OAAOA,SAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASq1D,qBAAT,GAAiC;EAC7B,MAAMxjD,KAAK,GAAGoU,eAAe,EAA7B;EACA7iB,SAAS,IAAI4F,aAAa,CAAC6I,KAAD,EAAQ,mBAAR,CAA1B;EACA2Y,sBAAsB,CAAC7E,QAAQ,GAAG9I,KAAH,CAAT,EAAoBhL,KAApB,CAAtB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASikD,YAAT,CAAsB71D,IAAtB,EAA4B;EACxB,OAAOqN,MAAM,CAACiE,cAAP,CAAsBtR,IAAI,CAACuN,SAA3B,EAAsC7S,WAA7C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASo7D,0BAAT,CAAoC/zC,UAApC,EAAgD;EAC5C,IAAIg0C,SAAS,GAAGF,YAAY,CAAC9zC,UAAU,CAAC/hB,IAAZ,CAA5B;EACA,IAAIg2D,mBAAmB,GAAG,IAA1B;EACA,MAAMC,gBAAgB,GAAG,CAACl0C,UAAD,CAAzB;;EACA,OAAOg0C,SAAP,EAAkB;IACd,IAAIG,QAAQ,GAAG94D,SAAf;;IACA,IAAI4hB,cAAc,CAAC+C,UAAD,CAAlB,EAAgC;MAC5B;MACAm0C,QAAQ,GAAGH,SAAS,CAACj+C,IAAV,IAAkBi+C,SAAS,CAAC/9C,IAAvC;IACH,CAHD,MAIK;MACD,IAAI+9C,SAAS,CAACj+C,IAAd,EAAoB;QAChB,MAAM,IAAIhR,YAAJ,CAAiB;QAAI;QAArB,EAAiE3D,SAAS,IAC3E,mDAAkDkQ,iBAAiB,CAAC0O,UAAU,CAAC/hB,IAAZ,CAAkB,sCAAqCqT,iBAAiB,CAAC0iD,SAAD,CAAY,EADtJ,CAAN;MAEH,CAJA,CAKD;;;MACAG,QAAQ,GAAGH,SAAS,CAAC/9C,IAArB;IACH;;IACD,IAAIk+C,QAAJ,EAAc;MACV,IAAIF,mBAAJ,EAAyB;QACrBC,gBAAgB,CAAC91D,IAAjB,CAAsB+1D,QAAtB,EADqB,CAErB;QACA;;QACA,MAAMC,YAAY,GAAGp0C,UAArB;QACAo0C,YAAY,CAAC58C,MAAb,GAAsB68C,gBAAgB,CAACr0C,UAAU,CAACxI,MAAZ,CAAtC;QACA48C,YAAY,CAACt9C,cAAb,GAA8Bu9C,gBAAgB,CAACr0C,UAAU,CAAClJ,cAAZ,CAA9C;QACAs9C,YAAY,CAAC38C,OAAb,GAAuB48C,gBAAgB,CAACr0C,UAAU,CAACvI,OAAZ,CAAvC,CAPqB,CAQrB;;QACA,MAAM68C,iBAAiB,GAAGH,QAAQ,CAAC/8C,YAAnC;QACAk9C,iBAAiB,IAAIC,mBAAmB,CAACv0C,UAAD,EAAas0C,iBAAb,CAAxC,CAVqB,CAWrB;;QACA,MAAME,cAAc,GAAGL,QAAQ,CAACh8C,SAAhC;QACA,MAAMs8C,mBAAmB,GAAGN,QAAQ,CAAC58C,cAArC;QACAi9C,cAAc,IAAIE,gBAAgB,CAAC10C,UAAD,EAAaw0C,cAAb,CAAlC;QACAC,mBAAmB,IAAIE,qBAAqB,CAAC30C,UAAD,EAAay0C,mBAAb,CAA5C,CAfqB,CAgBrB;;QACA5yD,cAAc,CAACme,UAAU,CAACxI,MAAZ,EAAoB28C,QAAQ,CAAC38C,MAA7B,CAAd;QACA3V,cAAc,CAACme,UAAU,CAAClJ,cAAZ,EAA4Bq9C,QAAQ,CAACr9C,cAArC,CAAd;QACAjV,cAAc,CAACme,UAAU,CAACvI,OAAZ,EAAqB08C,QAAQ,CAAC18C,OAA9B,CAAd,CAnBqB,CAoBrB;QACA;;QACA,IAAIwF,cAAc,CAACk3C,QAAD,CAAd,IAA4BA,QAAQ,CAAC97C,IAAT,CAAcu8C,SAA9C,EAAyD;UACrD;UACA;UACA,MAAMC,OAAO,GAAG70C,UAAU,CAAC3H,IAA3B;UACAw8C,OAAO,CAACD,SAAR,GAAoB,CAACC,OAAO,CAACD,SAAR,IAAqB,EAAtB,EAA0BjnD,MAA1B,CAAiCwmD,QAAQ,CAAC97C,IAAT,CAAcu8C,SAA/C,CAApB;QACH;MACJ,CA7BS,CA8BV;;;MACA,MAAMx8C,QAAQ,GAAG+7C,QAAQ,CAAC/7C,QAA1B;;MACA,IAAIA,QAAJ,EAAc;QACV,KAAK,IAAIvQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuQ,QAAQ,CAAC3Z,MAA7B,EAAqCoJ,CAAC,EAAtC,EAA0C;UACtC,MAAM8Q,OAAO,GAAGP,QAAQ,CAACvQ,CAAD,CAAxB;;UACA,IAAI8Q,OAAO,IAAIA,OAAO,CAACyH,SAAvB,EAAkC;YAC9BzH,OAAO,CAACqH,UAAD,CAAP;UACH,CAJqC,CAKtC;UACA;UACA;UACA;UACA;UACA;UACA;;;UACA,IAAIrH,OAAO,KAAKo7C,0BAAhB,EAA4C;YACxCE,mBAAmB,GAAG,KAAtB;UACH;QACJ;MACJ;IACJ;;IACDD,SAAS,GAAG1oD,MAAM,CAACiE,cAAP,CAAsBykD,SAAtB,CAAZ;EACH;;EACDc,+BAA+B,CAACZ,gBAAD,CAA/B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,+BAAT,CAAyCZ,gBAAzC,EAA2D;EACvD,IAAI78C,QAAQ,GAAG,CAAf;EACA,IAAIC,SAAS,GAAG,IAAhB,CAFuD,CAGvD;;EACA,KAAK,IAAIzP,CAAC,GAAGqsD,gBAAgB,CAACz1D,MAAjB,GAA0B,CAAvC,EAA0CoJ,CAAC,IAAI,CAA/C,EAAkDA,CAAC,EAAnD,EAAuD;IACnD,MAAM3D,GAAG,GAAGgwD,gBAAgB,CAACrsD,CAAD,CAA5B,CADmD,CAEnD;;IACA3D,GAAG,CAACmT,QAAJ,GAAgBA,QAAQ,IAAInT,GAAG,CAACmT,QAAhC,CAHmD,CAInD;;IACAnT,GAAG,CAACoT,SAAJ,GACI4U,cAAc,CAAChoB,GAAG,CAACoT,SAAL,EAAgBA,SAAS,GAAG4U,cAAc,CAAC5U,SAAD,EAAYpT,GAAG,CAACoT,SAAhB,CAA1C,CADlB;EAEH;AACJ;;AACD,SAAS+8C,gBAAT,CAA0BhxD,KAA1B,EAAiC;EAC7B,IAAIA,KAAK,KAAKsS,SAAd,EAAyB;IACrB,OAAO,EAAP;EACH,CAFD,MAGK,IAAItS,KAAK,KAAKuS,WAAd,EAA2B;IAC5B,OAAO,EAAP;EACH,CAFI,MAGA;IACD,OAAOvS,KAAP;EACH;AACJ;;AACD,SAASqxD,gBAAT,CAA0B10C,UAA1B,EAAsCw0C,cAAtC,EAAsD;EAClD,MAAMO,aAAa,GAAG/0C,UAAU,CAAC7H,SAAjC;;EACA,IAAI48C,aAAJ,EAAmB;IACf/0C,UAAU,CAAC7H,SAAX,GAAuB,CAAC8wC,EAAD,EAAK+L,GAAL,KAAa;MAChCR,cAAc,CAACvL,EAAD,EAAK+L,GAAL,CAAd;MACAD,aAAa,CAAC9L,EAAD,EAAK+L,GAAL,CAAb;IACH,CAHD;EAIH,CALD,MAMK;IACDh1C,UAAU,CAAC7H,SAAX,GAAuBq8C,cAAvB;EACH;AACJ;;AACD,SAASG,qBAAT,CAA+B30C,UAA/B,EAA2Cy0C,mBAA3C,EAAgE;EAC5D,MAAMQ,kBAAkB,GAAGj1C,UAAU,CAACzI,cAAtC;;EACA,IAAI09C,kBAAJ,EAAwB;IACpBj1C,UAAU,CAACzI,cAAX,GAA4B,CAAC0xC,EAAD,EAAK+L,GAAL,EAAU/sC,cAAV,KAA6B;MACrDwsC,mBAAmB,CAACxL,EAAD,EAAK+L,GAAL,EAAU/sC,cAAV,CAAnB;MACAgtC,kBAAkB,CAAChM,EAAD,EAAK+L,GAAL,EAAU/sC,cAAV,CAAlB;IACH,CAHD;EAIH,CALD,MAMK;IACDjI,UAAU,CAACzI,cAAX,GAA4Bk9C,mBAA5B;EACH;AACJ;;AACD,SAASF,mBAAT,CAA6Bv0C,UAA7B,EAAyCs0C,iBAAzC,EAA4D;EACxD,MAAMY,gBAAgB,GAAGl1C,UAAU,CAAC5I,YAApC;;EACA,IAAI89C,gBAAJ,EAAsB;IAClBl1C,UAAU,CAAC5I,YAAX,GAA0B,CAAC6xC,EAAD,EAAK+L,GAAL,KAAa;MACnCV,iBAAiB,CAACrL,EAAD,EAAK+L,GAAL,CAAjB;MACAE,gBAAgB,CAACjM,EAAD,EAAK+L,GAAL,CAAhB;IACH,CAHD;EAIH,CALD,MAMK;IACDh1C,UAAU,CAAC5I,YAAX,GAA0Bk9C,iBAA1B;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMa,qBAAqB,GAAG,CAC1B;AACA,mBAF0B,CAG1B;AACA;AAJ0B,CAA9B;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,CAC1B;AACA;AACA,UAH0B,EAI1B,OAJ0B,EAK1B,QAL0B,EAM1B,MAN0B,EAO1B,QAP0B,EAQ1B,oBAR0B,EAS1B;AACA,QAV0B,EAW1B,eAX0B,EAY1B;AACA,SAb0B,CAA9B;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAiCr1C,UAAjC,EAA6C;EACzC,IAAIg0C,SAAS,GAAGF,YAAY,CAAC9zC,UAAU,CAAC/hB,IAAZ,CAA5B;EACA,IAAIk2D,QAAQ,GAAG94D,SAAf;;EACA,IAAI4hB,cAAc,CAAC+C,UAAD,CAAlB,EAAgC;IAC5B;IACAm0C,QAAQ,GAAGH,SAAS,CAACj+C,IAArB;EACH,CAHD,MAIK;IACD;IACAo+C,QAAQ,GAAGH,SAAS,CAAC/9C,IAArB;EACH,CAVwC,CAWzC;;;EACA,MAAMq/C,MAAM,GAAGt1C,UAAf,CAZyC,CAazC;;EACA,KAAK,MAAMhc,KAAX,IAAoBmxD,qBAApB,EAA2C;IACvCG,MAAM,CAACtxD,KAAD,CAAN,GAAgBmwD,QAAQ,CAACnwD,KAAD,CAAxB;EACH;;EACD,IAAIiZ,cAAc,CAACk3C,QAAD,CAAlB,EAA8B;IAC1B;IACA,KAAK,MAAMnwD,KAAX,IAAoBoxD,qBAApB,EAA2C;MACvCE,MAAM,CAACtxD,KAAD,CAAN,GAAgBmwD,QAAQ,CAACnwD,KAAD,CAAxB;IACH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIuxD,eAAe,GAAG,IAAtB;;AACA,SAASC,iBAAT,GAA6B;EACzB,IAAI,CAACD,eAAL,EAAsB;IAClB,MAAME,MAAM,GAAGn1D,SAAS,CAAC,QAAD,CAAxB;;IACA,IAAIm1D,MAAM,IAAIA,MAAM,CAACC,QAArB,EAA+B;MAC3BH,eAAe,GAAGE,MAAM,CAACC,QAAzB;IACH,CAFD,MAGK;MACD;MACA,MAAM9mD,IAAI,GAAGtD,MAAM,CAACqqD,mBAAP,CAA2Br4D,GAAG,CAACkO,SAA/B,CAAb;;MACA,KAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+G,IAAI,CAACnQ,MAAzB,EAAiC,EAAEoJ,CAAnC,EAAsC;QAClC,MAAMjG,GAAG,GAAGgN,IAAI,CAAC/G,CAAD,CAAhB;;QACA,IAAIjG,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,MAA7B,IACAtE,GAAG,CAACkO,SAAJ,CAAc5J,GAAd,MAAuBtE,GAAG,CAACkO,SAAJ,CAAc,SAAd,CAD3B,EACqD;UACjD+pD,eAAe,GAAG3zD,GAAlB;QACH;MACJ;IACJ;EACJ;;EACD,OAAO2zD,eAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,UAAT,CAAoB9gD,GAApB,EAAyB;EACrB,OAAOA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAA/B,IAA2CA,GAAG,CAAC0gD,iBAAiB,EAAlB,CAAH,KAA6Bn6D,SAA/E;AACH;;AACD,SAASw6D,kBAAT,CAA4B/gD,GAA5B,EAAiC;EAC7B,IAAI,CAACghD,UAAU,CAAChhD,GAAD,CAAf,EACI,OAAO,KAAP;EACJ,OAAO5S,KAAK,CAACC,OAAN,CAAc2S,GAAd,KACF,EAAEA,GAAG,YAAYxX,GAAjB,KAAyB;EACtBk4D,iBAAiB,MAAM1gD,GAF/B,CAH6B,CAKQ;AACxC;;AACD,SAASihD,iBAAT,CAA2BhuD,CAA3B,EAA8BC,CAA9B,EAAiCguD,UAAjC,EAA6C;EACzC,MAAMC,SAAS,GAAGluD,CAAC,CAACytD,iBAAiB,EAAlB,CAAD,EAAlB;EACA,MAAMU,SAAS,GAAGluD,CAAC,CAACwtD,iBAAiB,EAAlB,CAAD,EAAlB;;EACA,OAAO,IAAP,EAAa;IACT,MAAMW,KAAK,GAAGF,SAAS,CAACh8D,IAAV,EAAd;IACA,MAAMm8D,KAAK,GAAGF,SAAS,CAACj8D,IAAV,EAAd;IACA,IAAIk8D,KAAK,CAACE,IAAN,IAAcD,KAAK,CAACC,IAAxB,EACI,OAAO,IAAP;IACJ,IAAIF,KAAK,CAACE,IAAN,IAAcD,KAAK,CAACC,IAAxB,EACI,OAAO,KAAP;IACJ,IAAI,CAACL,UAAU,CAACG,KAAK,CAAC9yD,KAAP,EAAc+yD,KAAK,CAAC/yD,KAApB,CAAf,EACI,OAAO,KAAP;EACP;AACJ;;AACD,SAASizD,eAAT,CAAyBxhD,GAAzB,EAA8B5c,EAA9B,EAAkC;EAC9B,IAAIgK,KAAK,CAACC,OAAN,CAAc2S,GAAd,CAAJ,EAAwB;IACpB,KAAK,IAAIjN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiN,GAAG,CAACrW,MAAxB,EAAgCoJ,CAAC,EAAjC,EAAqC;MACjC3P,EAAE,CAAC4c,GAAG,CAACjN,CAAD,CAAJ,CAAF;IACH;EACJ,CAJD,MAKK;IACD,MAAM6tD,QAAQ,GAAG5gD,GAAG,CAAC0gD,iBAAiB,EAAlB,CAAH,EAAjB;IACA,IAAIjtD,IAAJ;;IACA,OAAO,CAAE,CAACA,IAAI,GAAGmtD,QAAQ,CAACz7D,IAAT,EAAR,EAAyBo8D,IAAlC,EAAyC;MACrCn+D,EAAE,CAACqQ,IAAI,CAAClF,KAAN,CAAF;IACH;EACJ;AACJ;;AACD,SAASyyD,UAAT,CAAoBS,CAApB,EAAuB;EACnB,OAAOA,CAAC,KAAK,IAAN,KAAe,OAAOA,CAAP,KAAa,UAAb,IAA2B,OAAOA,CAAP,KAAa,QAAvD,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBzuD,CAAtB,EAAyBC,CAAzB,EAA4B;EACxB,MAAMyuD,mBAAmB,GAAGZ,kBAAkB,CAAC9tD,CAAD,CAA9C;EACA,MAAM2uD,mBAAmB,GAAGb,kBAAkB,CAAC7tD,CAAD,CAA9C;;EACA,IAAIyuD,mBAAmB,IAAIC,mBAA3B,EAAgD;IAC5C,OAAOX,iBAAiB,CAAChuD,CAAD,EAAIC,CAAJ,EAAOwuD,YAAP,CAAxB;EACH,CAFD,MAGK;IACD,MAAMG,SAAS,GAAG5uD,CAAC,KAAK,OAAOA,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,UAA3C,CAAnB;IACA,MAAM6uD,SAAS,GAAG5uD,CAAC,KAAK,OAAOA,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,UAA3C,CAAnB;;IACA,IAAI,CAACyuD,mBAAD,IAAwBE,SAAxB,IAAqC,CAACD,mBAAtC,IAA6DE,SAAjE,EAA4E;MACxE,OAAO,IAAP;IACH,CAFD,MAGK;MACD,OAAOtrD,MAAM,CAACurD,EAAP,CAAU9uD,CAAV,EAAaC,CAAb,CAAP;IACH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAAS8uD,aAAT,CAAuB15C,KAAvB,EAA8B4H,YAA9B,EAA4C3hB,KAA5C,EAAmD;EAC/C,OAAO+Z,KAAK,CAAC4H,YAAD,CAAL,GAAsB3hB,KAA7B;AACH;AACD;;;AACA,SAAS0zD,UAAT,CAAoB35C,KAApB,EAA2B4H,YAA3B,EAAyC;EACrC5jB,SAAS,IAAIiG,kBAAkB,CAAC+V,KAAD,EAAQ4H,YAAR,CAA/B;EACA5jB,SAAS,IACLwF,aAAa,CAACwW,KAAK,CAAC4H,YAAD,CAAN,EAAsB8xB,SAAtB,EAAiC,yCAAjC,CADjB;EAEA,OAAO15B,KAAK,CAAC4H,YAAD,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgyC,cAAT,CAAwB55C,KAAxB,EAA+B4H,YAA/B,EAA6C3hB,KAA7C,EAAoD;EAChDjC,SAAS,IAAIwF,aAAa,CAACvD,KAAD,EAAQyzC,SAAR,EAAmB,2CAAnB,CAA1B;EACA11C,SAAS,IACLyF,cAAc,CAACme,YAAD,EAAe5H,KAAK,CAAC3e,MAArB,EAA8B,gDAA9B,CADlB;EAEA,MAAM4uB,QAAQ,GAAGjQ,KAAK,CAAC4H,YAAD,CAAtB;;EACA,IAAI1Z,MAAM,CAACurD,EAAP,CAAUxpC,QAAV,EAAoBhqB,KAApB,CAAJ,EAAgC;IAC5B,OAAO,KAAP;EACH,CAFD,MAGK;IACD,IAAIjC,SAAS,IAAIsjB,sBAAsB,EAAvC,EAA2C;MACvC;MACA;MACA,MAAMuyC,iBAAiB,GAAG5pC,QAAQ,KAAKypB,SAAb,GAAyBzpB,QAAzB,GAAoChyB,SAA9D;;MACA,IAAI,CAACm7D,YAAY,CAACS,iBAAD,EAAoB5zD,KAApB,CAAjB,EAA6C;QACzC,MAAM6zD,OAAO,GAAG/rB,gCAAgC,CAAC/tB,KAAD,EAAQ4H,YAAR,EAAsBiyC,iBAAtB,EAAyC5zD,KAAzC,CAAhD;QACAmnC,yBAAyB,CAACnd,QAAQ,KAAKypB,SAAd,EAAyBogB,OAAO,CAAC7pC,QAAjC,EAA2C6pC,OAAO,CAACjsB,QAAnD,EAA6DisB,OAAO,CAACprD,QAArE,CAAzB;MACH,CAPsC,CAQvC;MACA;MACA;MACA;;;MACA,OAAO,KAAP;IACH;;IACDsR,KAAK,CAAC4H,YAAD,CAAL,GAAsB3hB,KAAtB;IACA,OAAO,IAAP;EACH;AACJ;AACD;;;AACA,SAAS8zD,eAAT,CAAyB/5C,KAAzB,EAAgC4H,YAAhC,EAA8CoyC,IAA9C,EAAoDC,IAApD,EAA0D;EACtD,MAAMC,SAAS,GAAGN,cAAc,CAAC55C,KAAD,EAAQ4H,YAAR,EAAsBoyC,IAAtB,CAAhC;EACA,OAAOJ,cAAc,CAAC55C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0BqyC,IAA1B,CAAd,IAAiDC,SAAxD;AACH;AACD;;;AACA,SAASC,eAAT,CAAyBn6C,KAAzB,EAAgC4H,YAAhC,EAA8CoyC,IAA9C,EAAoDC,IAApD,EAA0DG,IAA1D,EAAgE;EAC5D,MAAMF,SAAS,GAAGH,eAAe,CAAC/5C,KAAD,EAAQ4H,YAAR,EAAsBoyC,IAAtB,EAA4BC,IAA5B,CAAjC;EACA,OAAOL,cAAc,CAAC55C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0BwyC,IAA1B,CAAd,IAAiDF,SAAxD;AACH;AACD;;;AACA,SAASG,eAAT,CAAyBr6C,KAAzB,EAAgC4H,YAAhC,EAA8CoyC,IAA9C,EAAoDC,IAApD,EAA0DG,IAA1D,EAAgEE,IAAhE,EAAsE;EAClE,MAAMJ,SAAS,GAAGH,eAAe,CAAC/5C,KAAD,EAAQ4H,YAAR,EAAsBoyC,IAAtB,EAA4BC,IAA5B,CAAjC;EACA,OAAOF,eAAe,CAAC/5C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0BwyC,IAA1B,EAAgCE,IAAhC,CAAf,IAAwDJ,SAA/D;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,WAAT,CAAqBn2D,IAArB,EAA2B6B,KAA3B,EAAkC04B,SAAlC,EAA6Cza,SAA7C,EAAwD;EACpD,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMqB,YAAY,GAAGE,gBAAgB,EAArC;;EACA,IAAI8xC,cAAc,CAAC55C,KAAD,EAAQ4H,YAAR,EAAsB3hB,KAAtB,CAAlB,EAAgD;IAC5C,MAAMyM,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAe5b,IAAf,EAAqB6B,KAArB,EAA4B04B,SAA5B,EAAuCza,SAAvC,CAAxB;IACAlgB,SAAS,IAAIuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB,UAAUrO,IAA9B,EAAoCwjB,YAApC,CAAzC;EACH;;EACD,OAAO2yC,WAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBx6C,KAAxB,EAA+BvR,MAA/B,EAAuC;EACnCzK,SAAS,IAAIyF,cAAc,CAAC,CAAD,EAAIgF,MAAM,CAACpN,MAAX,EAAmB,+BAAnB,CAA3B;EACA2C,SAAS,IAAIoF,WAAW,CAACqF,MAAM,CAACpN,MAAP,GAAgB,CAAjB,EAAoB,CAApB,EAAuB,qCAAvB,CAAxB;EACA,IAAIo5D,gBAAgB,GAAG,KAAvB;EACA,IAAI7yC,YAAY,GAAGD,eAAe,EAAlC;;EACA,KAAK,IAAIld,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgE,MAAM,CAACpN,MAA3B,EAAmCoJ,CAAC,IAAI,CAAxC,EAA2C;IACvC;IACAgwD,gBAAgB,GAAGb,cAAc,CAAC55C,KAAD,EAAQ4H,YAAY,EAApB,EAAwBnZ,MAAM,CAAChE,CAAD,CAA9B,CAAd,IAAoDgwD,gBAAvE;EACH;;EACD5yC,eAAe,CAACD,YAAD,CAAf;;EACA,IAAI,CAAC6yC,gBAAL,EAAuB;IACnB,OAAO/gB,SAAP;EACH,CAZkC,CAanC;;;EACA,IAAI3a,OAAO,GAAGtwB,MAAM,CAAC,CAAD,CAApB;;EACA,KAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgE,MAAM,CAACpN,MAA3B,EAAmCoJ,CAAC,IAAI,CAAxC,EAA2C;IACvCs0B,OAAO,IAAI/qB,eAAe,CAACvF,MAAM,CAAChE,CAAD,CAAP,CAAf,GAA6BgE,MAAM,CAAChE,CAAC,GAAG,CAAL,CAA9C;EACH;;EACD,OAAOs0B,OAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS27B,cAAT,CAAwB16C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CC,MAA3C,EAAmD;EAC/C,MAAMV,SAAS,GAAGN,cAAc,CAAC55C,KAAD,EAAQ8H,gBAAgB,EAAxB,EAA4B6yC,EAA5B,CAAhC;EACA,OAAOT,SAAS,GAAGvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BC,MAAlC,GAA2ClhB,SAA3D;AACH;AACD;AACA;AACA;;;AACA,SAASmhB,cAAT,CAAwB76C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDH,MAAnD,EAA2D;EACvD,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,MAAMuyC,SAAS,GAAGH,eAAe,CAAC/5C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,CAAjC;EACAhzC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GAAGvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DH,MAA7D,GAAsElhB,SAAtF;AACH;AACD;AACA;AACA;;;AACA,SAASshB,cAAT,CAAwBh7C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDE,EAAnD,EAAuDC,EAAvD,EAA2DN,MAA3D,EAAmE;EAC/D,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,MAAMuyC,SAAS,GAAGC,eAAe,CAACn6C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,EAA8BG,EAA9B,CAAjC;EACAnzC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GACZvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DE,EAA1D,GAA+DjnD,eAAe,CAACknD,EAAD,CAA9E,GAAqFN,MADzE,GAEZlhB,SAFJ;AAGH;AACD;AACA;AACA;;;AACA,SAASyhB,cAAT,CAAwBn7C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDE,EAAnD,EAAuDC,EAAvD,EAA2DE,EAA3D,EAA+DC,EAA/D,EAAmET,MAAnE,EAA2E;EACvE,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,MAAMuyC,SAAS,GAAGG,eAAe,CAACr6C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,CAAjC;EACAtzC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GAAGvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DE,EAA1D,GACfjnD,eAAe,CAACknD,EAAD,CADA,GACOE,EADP,GACYpnD,eAAe,CAACqnD,EAAD,CAD3B,GACkCT,MADrC,GAEZlhB,SAFJ;AAGH;AACD;AACA;AACA;;;AACA,SAAS4hB,cAAT,CAAwBt7C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDE,EAAnD,EAAuDC,EAAvD,EAA2DE,EAA3D,EAA+DC,EAA/D,EAAmEE,EAAnE,EAAuEC,EAAvE,EAA2EZ,MAA3E,EAAmF;EAC/E,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,IAAIuyC,SAAS,GAAGG,eAAe,CAACr6C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,CAA/B;EACAnB,SAAS,GAAGN,cAAc,CAAC55C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0B4zC,EAA1B,CAAd,IAA+CtB,SAA3D;EACAnyC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GAAGvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DE,EAA1D,GACfjnD,eAAe,CAACknD,EAAD,CADA,GACOE,EADP,GACYpnD,eAAe,CAACqnD,EAAD,CAD3B,GACkCE,EADlC,GACuCvnD,eAAe,CAACwnD,EAAD,CADtD,GAC6DZ,MADhE,GAEZlhB,SAFJ;AAGH;AACD;AACA;AACA;;;AACA,SAAS+hB,cAAT,CAAwBz7C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDE,EAAnD,EAAuDC,EAAvD,EAA2DE,EAA3D,EAA+DC,EAA/D,EAAmEE,EAAnE,EAAuEC,EAAvE,EAA2EE,EAA3E,EAA+EC,EAA/E,EAAmFf,MAAnF,EAA2F;EACvF,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,IAAIuyC,SAAS,GAAGG,eAAe,CAACr6C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,CAA/B;EACAnB,SAAS,GAAGH,eAAe,CAAC/5C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0B4zC,EAA1B,EAA8BG,EAA9B,CAAf,IAAoDzB,SAAhE;EACAnyC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GACZvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DE,EAA1D,GAA+DjnD,eAAe,CAACknD,EAAD,CAA9E,GAAqFE,EAArF,GACIpnD,eAAe,CAACqnD,EAAD,CADnB,GAC0BE,EAD1B,GAC+BvnD,eAAe,CAACwnD,EAAD,CAD9C,GACqDE,EADrD,GAC0D1nD,eAAe,CAAC2nD,EAAD,CADzE,GACgFf,MAFpE,GAGZlhB,SAHJ;AAIH;AACD;AACA;AACA;;;AACA,SAASkiB,cAAT,CAAwB57C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDE,EAAnD,EAAuDC,EAAvD,EAA2DE,EAA3D,EAA+DC,EAA/D,EAAmEE,EAAnE,EAAuEC,EAAvE,EAA2EE,EAA3E,EAA+EC,EAA/E,EAAmFE,EAAnF,EAAuFC,EAAvF,EAA2FlB,MAA3F,EAAmG;EAC/F,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,IAAIuyC,SAAS,GAAGG,eAAe,CAACr6C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,CAA/B;EACAnB,SAAS,GAAGC,eAAe,CAACn6C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0B4zC,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,CAAf,IAAwD5B,SAApE;EACAnyC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GAAGvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DE,EAA1D,GACfjnD,eAAe,CAACknD,EAAD,CADA,GACOE,EADP,GACYpnD,eAAe,CAACqnD,EAAD,CAD3B,GACkCE,EADlC,GACuCvnD,eAAe,CAACwnD,EAAD,CADtD,GAC6DE,EAD7D,GAEf1nD,eAAe,CAAC2nD,EAAD,CAFA,GAEOE,EAFP,GAEY7nD,eAAe,CAAC8nD,EAAD,CAF3B,GAEkClB,MAFrC,GAGZlhB,SAHJ;AAIH;AACD;AACA;AACA;;;AACA,SAASqiB,cAAT,CAAwB/7C,KAAxB,EAA+B2tB,MAA/B,EAAuCgtB,EAAvC,EAA2CG,EAA3C,EAA+CC,EAA/C,EAAmDE,EAAnD,EAAuDC,EAAvD,EAA2DE,EAA3D,EAA+DC,EAA/D,EAAmEE,EAAnE,EAAuEC,EAAvE,EAA2EE,EAA3E,EAA+EC,EAA/E,EAAmFE,EAAnF,EAAuFC,EAAvF,EAA2FE,EAA3F,EAA+FC,EAA/F,EAAmGrB,MAAnG,EAA2G;EACvG,MAAMhzC,YAAY,GAAGD,eAAe,EAApC;EACA,IAAIuyC,SAAS,GAAGG,eAAe,CAACr6C,KAAD,EAAQ4H,YAAR,EAAsB+yC,EAAtB,EAA0BI,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,CAA/B;EACAnB,SAAS,GAAGG,eAAe,CAACr6C,KAAD,EAAQ4H,YAAY,GAAG,CAAvB,EAA0B4zC,EAA1B,EAA8BG,EAA9B,EAAkCG,EAAlC,EAAsCG,EAAtC,CAAf,IAA4D/B,SAAxE;EACAnyC,qBAAqB,CAAC,CAAD,CAArB;EACA,OAAOmyC,SAAS,GAAGvsB,MAAM,GAAG35B,eAAe,CAAC2mD,EAAD,CAAxB,GAA+BG,EAA/B,GAAoC9mD,eAAe,CAAC+mD,EAAD,CAAnD,GAA0DE,EAA1D,GACfjnD,eAAe,CAACknD,EAAD,CADA,GACOE,EADP,GACYpnD,eAAe,CAACqnD,EAAD,CAD3B,GACkCE,EADlC,GACuCvnD,eAAe,CAACwnD,EAAD,CADtD,GAC6DE,EAD7D,GAEf1nD,eAAe,CAAC2nD,EAAD,CAFA,GAEOE,EAFP,GAEY7nD,eAAe,CAAC8nD,EAAD,CAF3B,GAEkCE,EAFlC,GAEuChoD,eAAe,CAACioD,EAAD,CAFtD,GAE6DrB,MAFhE,GAGZlhB,SAHJ;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwiB,uBAAT,CAAiC5tC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDC,MAAvD,EAA+Dj8B,SAA/D,EAA0Eza,SAA1E,EAAqF;EACjF,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGzB,cAAc,CAAC16C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBC,MAApB,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EitB,MAA5E,CADhC;EAEH;;EACD,OAAOsB,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,uBAAT,CAAiC9tC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DH,MAA/D,EAAuEj8B,SAAvE,EAAkFza,SAAlF,EAA6F;EACzF,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGtB,cAAc,CAAC76C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BH,MAA5B,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFF,MAAhF,CADhC;EAEH;;EACD,OAAOwB,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiC/tC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DE,EAA/D,EAAmEC,EAAnE,EAAuEN,MAAvE,EAA+Ej8B,SAA/E,EAA0Fza,SAA1F,EAAqG;EACjG,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGnB,cAAc,CAACh7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCN,MAApC,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFG,EAAhF,EAAoFL,MAApF,CADhC;EAEH;;EACD,OAAOyB,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiChuC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DE,EAA/D,EAAmEC,EAAnE,EAAuEE,EAAvE,EAA2EC,EAA3E,EAA+ET,MAA/E,EAAuFj8B,SAAvF,EAAkGza,SAAlG,EAA6G;EACzG,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGhB,cAAc,CAACn7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CT,MAA5C,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFG,EAAhF,EAAoFG,EAApF,EAAwFR,MAAxF,CADhC;EAEH;;EACD,OAAO0B,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCjuC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DE,EAA/D,EAAmEC,EAAnE,EAAuEE,EAAvE,EAA2EC,EAA3E,EAA+EE,EAA/E,EAAmFC,EAAnF,EAAuFZ,MAAvF,EAA+Fj8B,SAA/F,EAA0Gza,SAA1G,EAAqH;EACjH,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGb,cAAc,CAACt7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDZ,MAApD,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFG,EAAhF,EAAoFG,EAApF,EAAwFG,EAAxF,EAA4FX,MAA5F,CADhC;EAEH;;EACD,OAAO2B,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCluC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DE,EAA/D,EAAmEC,EAAnE,EAAuEE,EAAvE,EAA2EC,EAA3E,EAA+EE,EAA/E,EAAmFC,EAAnF,EAAuFE,EAAvF,EAA2FC,EAA3F,EAA+Ff,MAA/F,EAAuGj8B,SAAvG,EAAkHza,SAAlH,EAA6H;EACzH,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGV,cAAc,CAACz7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4Df,MAA5D,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFG,EAAhF,EAAoFG,EAApF,EAAwFG,EAAxF,EAA4FG,EAA5F,EAAgGd,MAAhG,CADhC;EAEH;;EACD,OAAO4B,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCnuC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DE,EAA/D,EAAmEC,EAAnE,EAAuEE,EAAvE,EAA2EC,EAA3E,EAA+EE,EAA/E,EAAmFC,EAAnF,EAAuFE,EAAvF,EAA2FC,EAA3F,EAA+FE,EAA/F,EAAmGC,EAAnG,EAAuGlB,MAAvG,EAA+Gj8B,SAA/G,EAA0Hza,SAA1H,EAAqI;EACjI,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGP,cAAc,CAAC57C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoElB,MAApE,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFG,EAAhF,EAAoFG,EAApF,EAAwFG,EAAxF,EAA4FG,EAA5F,EAAgGG,EAAhG,EAAoGjB,MAApG,CADhC;EAEH;;EACD,OAAO6B,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCpuC,QAAjC,EAA2Cqf,MAA3C,EAAmDgtB,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+DE,EAA/D,EAAmEC,EAAnE,EAAuEE,EAAvE,EAA2EC,EAA3E,EAA+EE,EAA/E,EAAmFC,EAAnF,EAAuFE,EAAvF,EAA2FC,EAA3F,EAA+FE,EAA/F,EAAmGC,EAAnG,EAAuGE,EAAvG,EAA2GC,EAA3G,EAA+GrB,MAA/G,EAAuHj8B,SAAvH,EAAkIza,SAAlI,EAA6I;EACzI,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGJ,cAAc,CAAC/7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4ErB,MAA5E,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyB6tC,iBAAzB,EAA4Cx9B,SAA5C,EAAuDza,SAAvD,CAAxB;IACAlgB,SAAS,IACLuuD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAK,CAAjE,EAAoEgmB,MAApE,EAA4EmtB,EAA5E,EAAgFG,EAAhF,EAAoFG,EAApF,EAAwFG,EAAxF,EAA4FG,EAA5F,EAAgGG,EAAhG,EAAoGG,EAApG,EAAwGpB,MAAxG,CADhC;EAEH;;EACD,OAAO8B,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCruC,QAAjC,EAA2C7f,MAA3C,EAAmDkwB,SAAnD,EAA8Dza,SAA9D,EAAyE;EACrE,MAAMlE,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGpC,cAAc,CAACx6C,KAAD,EAAQvR,MAAR,CAAnC;;EACA,IAAImuD,YAAY,KAAKljB,SAArB,EAAgC;IAC5B,MAAMjnC,KAAK,GAAG6X,gBAAgB,EAA9B;IACA2mC,wBAAwB,CAACx+C,KAAD,EAAQuN,KAAR,EAAesO,QAAf,EAAyBsuC,YAAzB,EAAuCj+B,SAAvC,EAAkDza,SAAlD,CAAxB;;IACA,IAAIlgB,SAAJ,EAAe;MACX,MAAM64D,sBAAsB,GAAG,CAACpuD,MAAM,CAAC,CAAD,CAAP,CAA/B,CADW,CACiC;;MAC5C,KAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgE,MAAM,CAACpN,MAA3B,EAAmCoJ,CAAC,IAAI,CAAxC,EAA2C;QACvCoyD,sBAAsB,CAAC77D,IAAvB,CAA4ByN,MAAM,CAAChE,CAAD,CAAlC;MACH;;MACD8nD,4BAA4B,CAAC/rC,QAAQ,GAAGvL,IAAZ,EAAkBxI,KAAlB,EAAyB,UAAU6b,QAAnC,EAA6C3G,eAAe,KAAKk1C,sBAAsB,CAACx7D,MAA3C,GAAoD,CAAjG,EAAoG,GAAGw7D,sBAAvG,CAA5B;IACH;EACJ;;EACD,OAAOF,uBAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS5/D,aAAT,CAAuB6D,SAAvB,EAAkC;EAC9B,MAAMgkB,IAAI,GAAG8mB,0BAA0B,CAAC9qC,SAAD,CAAvC;EACAsxD,qBAAqB,CAACttC,IAAI,CAACnH,KAAD,CAAL,EAAcmH,IAAd,EAAoBhkB,SAApB,CAArB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASk8D,uBAAT,CAAiCv7D,KAAjC,EAAwCmR,KAAxC,EAA+CsN,KAA/C,EAAsDurC,UAAtD,EAAkE3xC,KAAlE,EAAyEC,IAAzE,EAA+E4jB,OAA/E,EAAwFs/B,UAAxF,EAAoGC,cAApG,EAAoH;EAChHh5D,SAAS,IAAIid,qBAAqB,CAACvO,KAAD,CAAlC;EACA1O,SAAS,IAAIA,SAAS,CAACwO,eAAV,EAAb;EACA,MAAMyqD,WAAW,GAAGvqD,KAAK,CAACoH,MAA1B,CAHgH,CAIhH;;EACA,MAAMrH,KAAK,GAAGq4C,gBAAgB,CAACp4C,KAAD,EAAQnR,KAAR,EAAe;EAAE;EAAjB,EAA4Ck8B,OAAO,IAAI,IAAvD,EAA6DrY,WAAW,CAAC63C,WAAD,EAAcF,UAAd,CAAxE,CAA9B;EACAzN,iBAAiB,CAAC58C,KAAD,EAAQsN,KAAR,EAAevN,KAAf,EAAsB2S,WAAW,CAAC63C,WAAD,EAAcD,cAAd,CAAjC,CAAjB;EACA5xC,sBAAsB,CAAC1Y,KAAD,EAAQD,KAAR,CAAtB;EACA,MAAMk/C,aAAa,GAAGl/C,KAAK,CAACkyC,MAAN,GAAe+H,WAAW,CAAC;EAAE;EAAH,EAA6Bj6C,KAA7B,EAAoC84C,UAApC,EAAgD3xC,KAAhD,EAAuDC,IAAvD,EAA6DnH,KAAK,CAACmxC,iBAAnE,EAAsFnxC,KAAK,CAACoxC,YAA5F,EAA0G,IAA1G,EAAgHpxC,KAAK,CAAC4I,OAAtH,EAA+H2hD,WAA/H,CAAhD;;EACA,IAAIvqD,KAAK,CAAC+wC,OAAN,KAAkB,IAAtB,EAA4B;IACxB/wC,KAAK,CAAC+wC,OAAN,CAAcxiD,QAAd,CAAuByR,KAAvB,EAA8BD,KAA9B;IACAk/C,aAAa,CAAClO,OAAd,GAAwB/wC,KAAK,CAAC+wC,OAAN,CAAckO,aAAd,CAA4Bl/C,KAA5B,CAAxB;EACH;;EACD,OAAOA,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyqD,UAAT,CAAoB37D,KAApB,EAA2BgqD,UAA3B,EAAuC3xC,KAAvC,EAA8CC,IAA9C,EAAoD4jB,OAApD,EAA6Ds/B,UAA7D,EAAyEC,cAAzE,EAAyFxQ,iBAAzF,EAA4G;EACxG,MAAMxsC,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAM22C,aAAa,GAAG57D,KAAK,GAAGud,aAA9B;EACA,MAAMrM,KAAK,GAAGC,KAAK,CAACF,eAAN,GAAwBsqD,uBAAuB,CAACK,aAAD,EAAgBzqD,KAAhB,EAAuBsN,KAAvB,EAA8BurC,UAA9B,EAA0C3xC,KAA1C,EAAiDC,IAAjD,EAAuD4jB,OAAvD,EAAgEs/B,UAAhE,EAA4EC,cAA5E,CAA/C,GACVtqD,KAAK,CAACuI,IAAN,CAAWkiD,aAAX,CADJ;EAEAl2C,eAAe,CAACxU,KAAD,EAAQ,KAAR,CAAf;EACA,MAAM2qD,OAAO,GAAGp9C,KAAK,CAAC7B,QAAD,CAAL,CAAgBkyB,aAAhB,CAA8BrsC,SAAS,GAAG,WAAH,GAAiB,EAAxD,CAAhB;EACA02B,WAAW,CAAChoB,KAAD,EAAQsN,KAAR,EAAeo9C,OAAf,EAAwB3qD,KAAxB,CAAX;EACA84B,eAAe,CAAC6xB,OAAD,EAAUp9C,KAAV,CAAf;EACA+wC,aAAa,CAAC/wC,KAAD,EAAQA,KAAK,CAACm9C,aAAD,CAAL,GAAuB3L,gBAAgB,CAAC4L,OAAD,EAAUp9C,KAAV,EAAiBo9C,OAAjB,EAA0B3qD,KAA1B,CAA/C,CAAb;;EACA,IAAImN,eAAe,CAACnN,KAAD,CAAnB,EAA4B;IACxB05C,yBAAyB,CAACz5C,KAAD,EAAQsN,KAAR,EAAevN,KAAf,CAAzB;EACH;;EACD,IAAIuqD,cAAc,IAAI,IAAtB,EAA4B;IACxB1Q,wBAAwB,CAACtsC,KAAD,EAAQvN,KAAR,EAAe+5C,iBAAf,CAAxB;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASjpC,KAAT,CAAe7Q,KAAf,EAAsBsN,KAAtB,EAA6Bze,KAA7B,EAAoC0E,KAApC,EAA2C;EACvC;EACA;EACA,IAAI1E,KAAK,IAAImR,KAAK,CAACuI,IAAN,CAAW5Z,MAAxB,EAAgC;IAC5BqR,KAAK,CAACuI,IAAN,CAAW1Z,KAAX,IAAoB,IAApB;IACAmR,KAAK,CAACoe,SAAN,CAAgBvvB,KAAhB,IAAyB,IAAzB;EACH;;EACDye,KAAK,CAACze,KAAD,CAAL,GAAe0E,KAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASo3D,WAAT,CAAqB97D,KAArB,EAA4B;EACxB,MAAMolB,YAAY,GAAGU,eAAe,EAApC;EACA,OAAO1C,IAAI,CAACgC,YAAD,EAAe7H,aAAa,GAAGvd,KAA/B,CAAX;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+7D,UAAT,CAAoB5uD,QAApB,EAA8BzI,KAA9B,EAAqC04B,SAArC,EAAgD;EAC5C,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMqB,YAAY,GAAGE,gBAAgB,EAArC;;EACA,IAAI8xC,cAAc,CAAC55C,KAAD,EAAQ4H,YAAR,EAAsB3hB,KAAtB,CAAlB,EAAgD;IAC5C,MAAMyM,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCzI,KAAhC,EAAuC+Z,KAAK,CAAC7B,QAAD,CAA5C,EAAwDwgB,SAAxD,EAAmE,KAAnE,CAAvB;IACA36B,SAAS,IAAIuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BkZ,YAA9B,CAAzC;EACH;;EACD,OAAO01C,UAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,qCAAT,CAA+C7qD,KAA/C,EAAsDD,KAAtD,EAA6DuN,KAA7D,EAAoE/Z,KAApE,EAA2EgwC,YAA3E,EAAyF;EACrF,MAAM77B,MAAM,GAAG3H,KAAK,CAAC2H,MAArB;EACA,MAAMojD,QAAQ,GAAGvnB,YAAY,GAAG,OAAH,GAAa,OAA1C,CAFqF,CAGrF;;EACA2Y,oBAAoB,CAACl8C,KAAD,EAAQsN,KAAR,EAAe5F,MAAM,CAACojD,QAAD,CAArB,EAAiCA,QAAjC,EAA2Cv3D,KAA3C,CAApB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASw3D,2BAAT,CAAqCl8D,KAArC,EAA4CmR,KAA5C,EAAmDsN,KAAnD,EAA0DmO,MAA1D,EAAkE/pB,IAAlE,EAAwE24D,UAAxE,EAAoFC,cAApF,EAAoG;EAChGh5D,SAAS,IAAIid,qBAAqB,CAACvO,KAAD,CAAlC;EACA1O,SAAS,IAAIA,SAAS,CAACwO,eAAV,EAAb;EACA,MAAMyqD,WAAW,GAAGvqD,KAAK,CAACoH,MAA1B;EACA,MAAMsU,KAAK,GAAGhJ,WAAW,CAAC63C,WAAD,EAAcF,UAAd,CAAzB;EACA,MAAMtqD,KAAK,GAAGq4C,gBAAgB,CAACp4C,KAAD,EAAQnR,KAAR,EAAe;EAAE;EAAjB,EAA0C6C,IAA1C,EAAgDgqB,KAAhD,CAA9B;EACA,MAAM0Z,aAAa,GAAGwnB,iBAAiB,CAAC58C,KAAD,EAAQsN,KAAR,EAAevN,KAAf,EAAsB2S,WAAW,CAAC63C,WAAD,EAAcD,cAAd,CAAjC,CAAvC;;EACA,IAAIh5D,SAAJ,EAAe;IACX6jC,sBAAsB,CAAC1Z,MAAD,EAASnO,KAAT,EAAgBvN,KAAK,CAACxM,KAAtB,EAA6ByM,KAAK,CAAC4I,OAAnC,EAA4CwsB,aAA5C,CAAtB;EACH;;EACD,IAAIr1B,KAAK,CAAC2b,KAAN,KAAgB,IAApB,EAA0B;IACtB4kC,oBAAoB,CAACvgD,KAAD,EAAQA,KAAK,CAAC2b,KAAd,EAAqB,KAArB,CAApB;EACH;;EACD,IAAI3b,KAAK,CAACgyC,WAAN,KAAsB,IAA1B,EAAgC;IAC5BuO,oBAAoB,CAACvgD,KAAD,EAAQA,KAAK,CAACgyC,WAAd,EAA2B,IAA3B,CAApB;EACH;;EACD,IAAI/xC,KAAK,CAAC+wC,OAAN,KAAkB,IAAtB,EAA4B;IACxB/wC,KAAK,CAAC+wC,OAAN,CAAcia,YAAd,CAA2BhrD,KAA3B,EAAkCD,KAAlC;EACH;;EACD,OAAOA,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkrD,cAAT,CAAwBp8D,KAAxB,EAA+B6C,IAA/B,EAAqC24D,UAArC,EAAiDC,cAAjD,EAAiE;EAC7D,MAAMh9C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAM22C,aAAa,GAAGr+C,aAAa,GAAGvd,KAAtC;EACAyC,SAAS,IACLoF,WAAW,CAACue,eAAe,EAAhB,EAAoBjV,KAAK,CAAC8O,iBAA1B,EAA6C,gDAA7C,CADf;EAEAxd,SAAS,IAAIiG,kBAAkB,CAAC+V,KAAD,EAAQm9C,aAAR,CAA/B;EACA,MAAM9+D,QAAQ,GAAG2hB,KAAK,CAAC7B,QAAD,CAAtB;EACA,MAAMgQ,MAAM,GAAGnO,KAAK,CAACm9C,aAAD,CAAL,GAAuB7sB,iBAAiB,CAACjyC,QAAD,EAAW+F,IAAX,EAAiBumB,cAAc,EAA/B,CAAvD;EACA,MAAMlY,KAAK,GAAGC,KAAK,CAACF,eAAN,GACVirD,2BAA2B,CAACN,aAAD,EAAgBzqD,KAAhB,EAAuBsN,KAAvB,EAA8BmO,MAA9B,EAAsC/pB,IAAtC,EAA4C24D,UAA5C,EAAwDC,cAAxD,CADjB,GAEVtqD,KAAK,CAACuI,IAAN,CAAWkiD,aAAX,CAFJ;EAGAl2C,eAAe,CAACxU,KAAD,EAAQ,IAAR,CAAf;EACA,MAAMgyC,WAAW,GAAGhyC,KAAK,CAACgyC,WAA1B;;EACA,IAAIA,WAAW,KAAK,IAApB,EAA0B;IACtBv2B,eAAe,CAAC7vB,QAAD,EAAW8vB,MAAX,EAAmBs2B,WAAnB,CAAf;EACH;;EACD,MAAM/yB,OAAO,GAAGjf,KAAK,CAACif,OAAtB;;EACA,IAAIA,OAAO,KAAK,IAAhB,EAAsB;IAClBilB,gBAAgB,CAACt4C,QAAD,EAAW8vB,MAAX,EAAmBuD,OAAnB,CAAhB;EACH;;EACD,MAAMvwB,MAAM,GAAGsR,KAAK,CAACtR,MAArB;;EACA,IAAIA,MAAM,KAAK,IAAf,EAAqB;IACjBu1C,gBAAgB,CAACr4C,QAAD,EAAW8vB,MAAX,EAAmBhtB,MAAnB,CAAhB;EACH;;EACD,IAAI,CAACsR,KAAK,CAAC6C,KAAN,GAAc;EAAG;EAAlB,MAAmD;EAAG;EAA1D,EAAuF;IACnF;IACA;IACAolB,WAAW,CAAChoB,KAAD,EAAQsN,KAAR,EAAemO,MAAf,EAAuB1b,KAAvB,CAAX;EACH,CA7B4D,CA8B7D;EACA;EACA;;;EACA,IAAIuT,oBAAoB,OAAO,CAA/B,EAAkC;IAC9BulB,eAAe,CAACpd,MAAD,EAASnO,KAAT,CAAf;EACH;;EACDkG,yBAAyB;;EACzB,IAAItG,eAAe,CAACnN,KAAD,CAAnB,EAA4B;IACxB05C,yBAAyB,CAACz5C,KAAD,EAAQsN,KAAR,EAAevN,KAAf,CAAzB;IACAy5C,qBAAqB,CAACx5C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,CAArB;EACH;;EACD,IAAIg9C,cAAc,KAAK,IAAvB,EAA6B;IACzB1Q,wBAAwB,CAACtsC,KAAD,EAAQvN,KAAR,CAAxB;EACH;;EACD,OAAOkrD,cAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,GAAwB;EACpB,IAAI92C,YAAY,GAAGD,eAAe,EAAlC;EACA7iB,SAAS,IAAI4F,aAAa,CAACkd,YAAD,EAAe,0BAAf,CAA1B;;EACA,IAAII,oBAAoB,EAAxB,EAA4B;IACxBC,0BAA0B;EAC7B,CAFD,MAGK;IACDnjB,SAAS,IAAI2c,eAAe,CAACkG,eAAe,EAAhB,CAA5B;IACAC,YAAY,GAAGA,YAAY,CAAClG,MAA5B;IACAqG,eAAe,CAACH,YAAD,EAAe,KAAf,CAAf;EACH;;EACD,MAAMrU,KAAK,GAAGqU,YAAd;EACA9iB,SAAS,IAAI+pB,eAAe,CAACtb,KAAD,EAAQ;EAAE;EAAV,CAA5B;EACA0T,yBAAyB;EACzB,MAAMzT,KAAK,GAAG8T,QAAQ,EAAtB;;EACA,IAAI9T,KAAK,CAACF,eAAV,EAA2B;IACvB4Y,sBAAsB,CAAC1Y,KAAD,EAAQoU,YAAR,CAAtB;;IACA,IAAIpH,kBAAkB,CAACoH,YAAD,CAAtB,EAAsC;MAClCpU,KAAK,CAAC+wC,OAAN,CAAcoa,UAAd,CAAyB/2C,YAAzB;IACH;EACJ;;EACD,IAAIrU,KAAK,CAACqyC,kBAAN,IAA4B,IAA5B,IAAoCj3B,aAAa,CAACpb,KAAD,CAArD,EAA8D;IAC1D8qD,qCAAqC,CAAC7qD,KAAD,EAAQD,KAAR,EAAe8T,QAAQ,EAAvB,EAA2B9T,KAAK,CAACqyC,kBAAjC,EAAqD,IAArD,CAArC;EACH;;EACD,IAAIryC,KAAK,CAACmyC,iBAAN,IAA2B,IAA3B,IAAmC92B,aAAa,CAACrb,KAAD,CAApD,EAA6D;IACzD8qD,qCAAqC,CAAC7qD,KAAD,EAAQD,KAAR,EAAe8T,QAAQ,EAAvB,EAA2B9T,KAAK,CAACmyC,iBAAjC,EAAoD,KAApD,CAArC;EACH;;EACD,OAAOgZ,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBv8D,KAAnB,EAA0B6C,IAA1B,EAAgC24D,UAAhC,EAA4CC,cAA5C,EAA4D;EACxDW,cAAc,CAACp8D,KAAD,EAAQ6C,IAAR,EAAc24D,UAAd,EAA0BC,cAA1B,CAAd;EACAY,YAAY;EACZ,OAAOE,SAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oCAAT,CAA8Cx8D,KAA9C,EAAqDmR,KAArD,EAA4DsN,KAA5D,EAAmE+8C,UAAnE,EAA+EC,cAA/E,EAA+F;EAC3Fh5D,SAAS,IAAIA,SAAS,CAACwO,eAAV,EAAb;EACA,MAAMyqD,WAAW,GAAGvqD,KAAK,CAACoH,MAA1B;EACA,MAAMsU,KAAK,GAAGhJ,WAAW,CAAC63C,WAAD,EAAcF,UAAd,CAAzB;EACA,MAAMtqD,KAAK,GAAGq4C,gBAAgB,CAACp4C,KAAD,EAAQnR,KAAR,EAAe;EAAE;EAAjB,EAAmD,cAAnD,EAAmE6sB,KAAnE,CAA9B,CAJ2F,CAK3F;EACA;;EACA,IAAIA,KAAK,KAAK,IAAd,EAAoB;IAChB4kC,oBAAoB,CAACvgD,KAAD,EAAQ2b,KAAR,EAAe,IAAf,CAApB;EACH;;EACD,MAAMmhC,SAAS,GAAGnqC,WAAW,CAAC63C,WAAD,EAAcD,cAAd,CAA7B;EACA1N,iBAAiB,CAAC58C,KAAD,EAAQsN,KAAR,EAAevN,KAAf,EAAsB88C,SAAtB,CAAjB;;EACA,IAAI78C,KAAK,CAAC+wC,OAAN,KAAkB,IAAtB,EAA4B;IACxB/wC,KAAK,CAAC+wC,OAAN,CAAcia,YAAd,CAA2BhrD,KAA3B,EAAkCD,KAAlC;EACH;;EACD,OAAOA,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASurD,uBAAT,CAAiCz8D,KAAjC,EAAwCw7D,UAAxC,EAAoDC,cAApD,EAAoE;EAChE,MAAMh9C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAM22C,aAAa,GAAG57D,KAAK,GAAGud,aAA9B;EACA9a,SAAS,IAAIiG,kBAAkB,CAAC+V,KAAD,EAAQm9C,aAAR,CAA/B;EACAn5D,SAAS,IACLoF,WAAW,CAACue,eAAe,EAAhB,EAAoBjV,KAAK,CAAC8O,iBAA1B,EAA6C,0DAA7C,CADf;EAEA,MAAM/O,KAAK,GAAGC,KAAK,CAACF,eAAN,GACVurD,oCAAoC,CAACZ,aAAD,EAAgBzqD,KAAhB,EAAuBsN,KAAvB,EAA8B+8C,UAA9B,EAA0CC,cAA1C,CAD1B,GAEVtqD,KAAK,CAACuI,IAAN,CAAWkiD,aAAX,CAFJ;EAGAl2C,eAAe,CAACxU,KAAD,EAAQ,IAAR,CAAf;EACAzO,SAAS,IAAIA,SAAS,CAAC6P,qBAAV,EAAb;EACA,MAAMsa,MAAM,GAAGnO,KAAK,CAACm9C,aAAD,CAAL,GACXn9C,KAAK,CAAC7B,QAAD,CAAL,CAAgBkyB,aAAhB,CAA8BrsC,SAAS,GAAG,cAAH,GAAoB,EAA3D,CADJ;EAEA02B,WAAW,CAAChoB,KAAD,EAAQsN,KAAR,EAAemO,MAAf,EAAuB1b,KAAvB,CAAX;EACA84B,eAAe,CAACpd,MAAD,EAASnO,KAAT,CAAf;;EACA,IAAIJ,eAAe,CAACnN,KAAD,CAAnB,EAA4B;IACxB05C,yBAAyB,CAACz5C,KAAD,EAAQsN,KAAR,EAAevN,KAAf,CAAzB;IACAy5C,qBAAqB,CAACx5C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,CAArB;EACH;;EACD,IAAIg9C,cAAc,IAAI,IAAtB,EAA4B;IACxB1Q,wBAAwB,CAACtsC,KAAD,EAAQvN,KAAR,CAAxB;EACH;;EACD,OAAOurD,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,GAAiC;EAC7B,IAAIn3C,YAAY,GAAGD,eAAe,EAAlC;EACA,MAAMnU,KAAK,GAAG8T,QAAQ,EAAtB;;EACA,IAAIU,oBAAoB,EAAxB,EAA4B;IACxBC,0BAA0B;EAC7B,CAFD,MAGK;IACDnjB,SAAS,IAAI2c,eAAe,CAACmG,YAAD,CAA5B;IACAA,YAAY,GAAGA,YAAY,CAAClG,MAA5B;IACAqG,eAAe,CAACH,YAAD,EAAe,KAAf,CAAf;EACH;;EACD9iB,SAAS,IAAI+pB,eAAe,CAACjH,YAAD,EAAe;EAAE;EAAjB,CAA5B;;EACA,IAAIpU,KAAK,CAACF,eAAV,EAA2B;IACvB4Y,sBAAsB,CAAC1Y,KAAD,EAAQoU,YAAR,CAAtB;;IACA,IAAIpH,kBAAkB,CAACoH,YAAD,CAAtB,EAAsC;MAClCpU,KAAK,CAAC+wC,OAAN,CAAcoa,UAAd,CAAyB/2C,YAAzB;IACH;EACJ;;EACD,OAAOm3C,qBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B38D,KAA5B,EAAmCw7D,UAAnC,EAA+CC,cAA/C,EAA+D;EAC3DgB,uBAAuB,CAACz8D,KAAD,EAAQw7D,UAAR,EAAoBC,cAApB,CAAvB;EACAiB,qBAAqB;EACrB,OAAOC,kBAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,GAA4B;EACxB,OAAO53C,QAAQ,EAAf;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAAS63C,SAAT,CAAmB1mD,GAAnB,EAAwB;EACpB;EACA;EACA,OAAO,CAAC,CAACA,GAAF,IAAS,OAAOA,GAAG,CAAClX,IAAX,KAAoB,UAApC;AACH;AACD;AACA;AACA;;;AACA,SAAS69D,cAAT,CAAwB3mD,GAAxB,EAA6B;EACzB,OAAO,CAAC,CAACA,GAAF,IAAS,OAAOA,GAAG,CAAC9a,SAAX,KAAyB,UAAzC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM0hE,YAAY,GAAGD,cAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,mBAAvD,EAA4E;EACxE,MAAM3+C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAM/T,KAAK,GAAGoU,eAAe,EAA7B;EACA+3C,gBAAgB,CAAClsD,KAAD,EAAQsN,KAAR,EAAeA,KAAK,CAAC7B,QAAD,CAApB,EAAgC1L,KAAhC,EAAuC+rD,SAAvC,EAAkDC,UAAlD,EAA8D,CAAC,CAACC,UAAhE,EAA4EC,mBAA5E,CAAhB;EACA,OAAOJ,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,uBAAT,CAAiCL,SAAjC,EAA4CC,UAA5C,EAAwD;EACpD,MAAMhsD,KAAK,GAAGoU,eAAe,EAA7B;EACA,MAAM7G,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAMqsC,UAAU,GAAGtqC,sBAAsB,CAAC7V,KAAK,CAACuI,IAAP,CAAzC;EACA,MAAM5c,QAAQ,GAAGu0D,qBAAqB,CAACC,UAAD,EAAapgD,KAAb,EAAoBuN,KAApB,CAAtC;EACA4+C,gBAAgB,CAAClsD,KAAD,EAAQsN,KAAR,EAAe3hB,QAAf,EAAyBoU,KAAzB,EAAgC+rD,SAAhC,EAA2CC,UAA3C,EAAuD,KAAvD,CAAhB;EACA,OAAOI,uBAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BpsD,KAA9B,EAAqCsN,KAArC,EAA4Cw+C,SAA5C,EAAuDO,QAAvD,EAAiE;EAC7D,MAAM1sB,QAAQ,GAAG3/B,KAAK,CAAC4/B,OAAvB;;EACA,IAAID,QAAQ,IAAI,IAAhB,EAAsB;IAClB,KAAK,IAAI5nC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4nC,QAAQ,CAAChxC,MAAT,GAAkB,CAAtC,EAAyCoJ,CAAC,IAAI,CAA9C,EAAiD;MAC7C,MAAMu0D,gBAAgB,GAAG3sB,QAAQ,CAAC5nC,CAAD,CAAjC;;MACA,IAAIu0D,gBAAgB,KAAKR,SAArB,IAAkCnsB,QAAQ,CAAC5nC,CAAC,GAAG,CAAL,CAAR,KAAoBs0D,QAA1D,EAAoE;QAChE;QACA;QACA;QACA,MAAMxsB,QAAQ,GAAGvyB,KAAK,CAACjC,OAAD,CAAtB;QACA,MAAMkhD,qBAAqB,GAAG5sB,QAAQ,CAAC5nC,CAAC,GAAG,CAAL,CAAtC;QACA,OAAO8nC,QAAQ,CAAClxC,MAAT,GAAkB49D,qBAAlB,GAA0C1sB,QAAQ,CAAC0sB,qBAAD,CAAlD,GAA4E,IAAnF;MACH,CAT4C,CAU7C;MACA;MACA;MACA;MACA;;;MACA,IAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;QACtCv0D,CAAC,IAAI,CAAL;MACH;IACJ;EACJ;;EACD,OAAO,IAAP;AACH;;AACD,SAASm0D,gBAAT,CAA0BlsD,KAA1B,EAAiCsN,KAAjC,EAAwC3hB,QAAxC,EAAkDoU,KAAlD,EAAyD+rD,SAAzD,EAAoEC,UAApE,EAAgFC,UAAhF,EAA4FC,mBAA5F,EAAiH;EAC7G,MAAMO,oBAAoB,GAAGt/C,eAAe,CAACnN,KAAD,CAA5C;EACA,MAAMD,eAAe,GAAGE,KAAK,CAACF,eAA9B;EACA,MAAM6/B,QAAQ,GAAG7/B,eAAe,IAAIi7C,uBAAuB,CAAC/6C,KAAD,CAA3D;EACA,MAAMkF,OAAO,GAAGoI,KAAK,CAAChC,OAAD,CAArB,CAJ6G,CAK7G;EACA;EACA;;EACA,MAAMu0B,QAAQ,GAAGib,uBAAuB,CAACxtC,KAAD,CAAxC;EACAhc,SAAS,IAAI+pB,eAAe,CAACtb,KAAD,EAAQ;EAAE;EAAF,EAA6B;EAAG;EAAxC,CAA5B;EACA,IAAI0sD,cAAc,GAAG,IAArB,CAV6G,CAW7G;EACA;EACA;EACA;;EACA,IAAK1sD,KAAK,CAAC5R,IAAN,GAAa;EAAE;EAAhB,GAA6C89D,mBAAjD,EAAsE;IAClE,MAAMxwC,MAAM,GAAG3J,gBAAgB,CAAC/R,KAAD,EAAQuN,KAAR,CAA/B;IACA,MAAMtb,MAAM,GAAGi6D,mBAAmB,GAAGA,mBAAmB,CAACxwC,MAAD,CAAtB,GAAiCA,MAAnE;IACA,MAAMixC,aAAa,GAAG7sB,QAAQ,CAAClxC,MAA/B;IACA,MAAMoxC,iBAAiB,GAAGksB,mBAAmB,GACxCzqC,MAAD,IAAYyqC,mBAAmB,CAACv6C,WAAW,CAAC8P,MAAM,CAACzhB,KAAK,CAAClR,KAAP,CAAP,CAAZ,CADU,GAEzCkR,KAAK,CAAClR,KAFV,CAJkE,CAOlE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI89D,gBAAgB,GAAG,IAAvB,CAnBkE,CAoBlE;IACA;IACA;IACA;IACA;IACA;;IACA,IAAI,CAACV,mBAAD,IAAwBO,oBAA5B,EAAkD;MAC9CG,gBAAgB,GAAGP,oBAAoB,CAACpsD,KAAD,EAAQsN,KAAR,EAAew+C,SAAf,EAA0B/rD,KAAK,CAAClR,KAAhC,CAAvC;IACH;;IACD,IAAI89D,gBAAgB,KAAK,IAAzB,EAA+B;MAC3B;MACA;MACA;MACA;MACA,MAAMC,cAAc,GAAGD,gBAAgB,CAACE,oBAAjB,IAAyCF,gBAAhE;MACAC,cAAc,CAACE,oBAAf,GAAsCf,UAAtC;MACAY,gBAAgB,CAACE,oBAAjB,GAAwCd,UAAxC;MACAU,cAAc,GAAG,KAAjB;IACH,CATD,MAUK;MACDV,UAAU,GAAGgB,YAAY,CAAChtD,KAAD,EAAQuN,KAAR,EAAepI,OAAf,EAAwB6mD,UAAxB,EAAoC;MAAM;MAA1C,CAAzB;MACA,MAAMlR,SAAS,GAAGlvD,QAAQ,CAACqhE,MAAT,CAAgBh7D,MAAhB,EAAwB85D,SAAxB,EAAmCC,UAAnC,CAAlB;MACAz6D,SAAS,IAAIA,SAAS,CAAC8O,wBAAV,EAAb;MACAy/B,QAAQ,CAACvxC,IAAT,CAAcy9D,UAAd,EAA0BlR,SAA1B;MACAlb,QAAQ,IAAIA,QAAQ,CAACrxC,IAAT,CAAcw9D,SAAd,EAAyB/rB,iBAAzB,EAA4C2sB,aAA5C,EAA2DA,aAAa,GAAG,CAA3E,CAAZ;IACH;EACJ,CA9CD,MA+CK;IACD;IACA;IACAX,UAAU,GAAGgB,YAAY,CAAChtD,KAAD,EAAQuN,KAAR,EAAepI,OAAf,EAAwB6mD,UAAxB,EAAoC;IAAM;IAA1C,CAAzB;EACH,CAlE4G,CAmE7G;;;EACA,MAAMpkD,OAAO,GAAG5H,KAAK,CAAC4H,OAAtB;EACA,IAAIhN,KAAJ;;EACA,IAAI8xD,cAAc,IAAI9kD,OAAO,KAAK,IAA9B,KAAuChN,KAAK,GAAGgN,OAAO,CAACmkD,SAAD,CAAtD,CAAJ,EAAwE;IACpE,MAAMmB,WAAW,GAAGtyD,KAAK,CAAChM,MAA1B;;IACA,IAAIs+D,WAAJ,EAAiB;MACb,KAAK,IAAIl1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGk1D,WAApB,EAAiCl1D,CAAC,IAAI,CAAtC,EAAyC;QACrC,MAAMlJ,KAAK,GAAG8L,KAAK,CAAC5C,CAAD,CAAnB;QACAzG,SAAS,IAAIiG,kBAAkB,CAAC+V,KAAD,EAAQze,KAAR,CAA/B;QACA,MAAMq+D,YAAY,GAAGvyD,KAAK,CAAC5C,CAAC,GAAG,CAAL,CAA1B;QACA,MAAM4hC,iBAAiB,GAAGrsB,KAAK,CAACze,KAAD,CAA/B;QACA,MAAMs+D,MAAM,GAAGxzB,iBAAiB,CAACuzB,YAAD,CAAhC;;QACA,IAAI57D,SAAS,IAAI,CAACs6D,YAAY,CAACuB,MAAD,CAA9B,EAAwC;UACpC,MAAM,IAAIniE,KAAJ,CAAW,WAAUkiE,YAAa,wBAAuBvzB,iBAAiB,CAAC9wC,WAAlB,CAA8B6I,IAAK,IAA5F,CAAN;QACH;;QACD,MAAM07D,YAAY,GAAGD,MAAM,CAACjjE,SAAP,CAAiB6hE,UAAjB,CAArB;QACA,MAAMzwB,GAAG,GAAGuE,QAAQ,CAAClxC,MAArB;QACAkxC,QAAQ,CAACvxC,IAAT,CAAcy9D,UAAd,EAA0BqB,YAA1B;QACAztB,QAAQ,IAAIA,QAAQ,CAACrxC,IAAT,CAAcw9D,SAAd,EAAyB/rD,KAAK,CAAClR,KAA/B,EAAsCysC,GAAtC,EAA2C,EAAEA,GAAG,GAAG,CAAR,CAA3C,CAAZ;MACH;IACJ;EACJ;AACJ;;AACD,SAAS+xB,gCAAT,CAA0C//C,KAA1C,EAAiDpI,OAAjD,EAA0D6mD,UAA1D,EAAsEnnD,CAAtE,EAAyE;EACrE,IAAI;IACAoM,QAAQ,CAAC;IAAE;IAAH,EAAoC9L,OAApC,EAA6C6mD,UAA7C,CAAR,CADA,CAEA;;IACA,OAAOA,UAAU,CAACnnD,CAAD,CAAV,KAAkB,KAAzB;EACH,CAJD,CAKA,OAAOla,KAAP,EAAc;IACVqsC,WAAW,CAACzpB,KAAD,EAAQ5iB,KAAR,CAAX;IACA,OAAO,KAAP;EACH,CARD,SASQ;IACJsmB,QAAQ,CAAC;IAAE;IAAH,EAAkC9L,OAAlC,EAA2C6mD,UAA3C,CAAR;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,YAAT,CAAsBhtD,KAAtB,EAA6BuN,KAA7B,EAAoCpI,OAApC,EAA6C6mD,UAA7C,EAAyDuB,sBAAzD,EAAiF;EAC7E;EACA;EACA,OAAO,SAASC,yCAAT,CAAmD3oD,CAAnD,EAAsD;IACzD;IACA;IACA,IAAIA,CAAC,KAAKhP,QAAV,EAAoB;MAChB,OAAOm2D,UAAP;IACH,CALwD,CAMzD;IACA;;;IACA,MAAM7uC,SAAS,GAAGnd,KAAK,CAAC6C,KAAN,GAAc;IAAE;IAAhB,EACduP,wBAAwB,CAACpS,KAAK,CAAClR,KAAP,EAAcye,KAAd,CADV,GAEdA,KAFJ;IAGAiyC,aAAa,CAACriC,SAAD,CAAb;IACA,IAAItf,MAAM,GAAGyvD,gCAAgC,CAAC//C,KAAD,EAAQpI,OAAR,EAAiB6mD,UAAjB,EAA6BnnD,CAA7B,CAA7C,CAZyD,CAazD;IACA;;IACA,IAAI4oD,cAAc,GAAGD,yCAAyC,CAACT,oBAA/D;;IACA,OAAOU,cAAP,EAAuB;MACnB;MACA5vD,MAAM,GAAGyvD,gCAAgC,CAAC//C,KAAD,EAAQpI,OAAR,EAAiBsoD,cAAjB,EAAiC5oD,CAAjC,CAAhC,IAAuEhH,MAAhF;MACA4vD,cAAc,GAAGA,cAAc,CAACV,oBAAhC;IACH;;IACD,IAAIQ,sBAAsB,IAAI1vD,MAAM,KAAK,KAAzC,EAAgD;MAC5CgH,CAAC,CAAC6oD,cAAF,GAD4C,CAE5C;;MACA7oD,CAAC,CAAC8oD,WAAF,GAAgB,KAAhB;IACH;;IACD,OAAO9vD,MAAP;EACH,CA3BD;AA4BH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+vD,aAAT,CAAuBr2C,KAAK,GAAG,CAA/B,EAAkC;EAC9B,OAAOD,eAAe,CAACC,KAAD,CAAtB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASs2C,2BAAT,CAAqC7tD,KAArC,EAA4C8tD,eAA5C,EAA6D;EACzD,IAAIC,sBAAsB,GAAG,IAA7B;EACA,MAAMC,kBAAkB,GAAGhoB,qBAAqB,CAAChmC,KAAD,CAAhD;;EACA,KAAK,IAAIhI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG81D,eAAe,CAACl/D,MAApC,EAA4CoJ,CAAC,EAA7C,EAAiD;IAC7C,MAAMua,SAAS,GAAGu7C,eAAe,CAAC91D,CAAD,CAAjC,CAD6C,CAE7C;IACA;;IACA,IAAIua,SAAS,KAAK,GAAlB,EAAuB;MACnBw7C,sBAAsB,GAAG/1D,CAAzB;MACA;IACH,CAP4C,CAQ7C;IACA;;;IACA,IAAIg2D,kBAAkB,KAAK,IAAvB,GACAjoB,0BAA0B,CAAC/lC,KAAD,EAAQuS,SAAR;IAAmB;IAAuB,IAA1C,CAD1B,GAEA6zB,wBAAwB,CAAC4nB,kBAAD,EAAqBz7C,SAArB,CAF5B,EAE6D;MACzD,OAAOva,CAAP,CADyD,CAC/C;IACb;EACJ;;EACD,OAAO+1D,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,CAAyBH,eAAzB,EAA0C;EACtC,MAAM5qB,aAAa,GAAGpvB,QAAQ,GAAG/H,0BAAH,CAAR,CAAuCV,MAAvC,CAAtB;;EACA,IAAI,CAAC63B,aAAa,CAAC5zB,UAAnB,EAA+B;IAC3B;IACA;IACA,MAAM4+C,kBAAkB,GAAGJ,eAAe,GAAGA,eAAe,CAACl/D,MAAnB,GAA4B,CAAtE;IACA,MAAMu/D,eAAe,GAAGjrB,aAAa,CAAC5zB,UAAd,GACpBrW,QAAQ,CAACi1D,kBAAD,EAAqB,IAArB,CADZ;IAEA,MAAME,KAAK,GAAGD,eAAe,CAACx1D,KAAhB,EAAd;IACA,IAAI01D,cAAc,GAAGnrB,aAAa,CAACjsB,KAAnC;;IACA,OAAOo3C,cAAc,KAAK,IAA1B,EAAgC;MAC5B,MAAMC,SAAS,GAAGR,eAAe,GAAGD,2BAA2B,CAACQ,cAAD,EAAiBP,eAAjB,CAA9B,GAAkE,CAAnG;;MACA,IAAIQ,SAAS,KAAK,IAAlB,EAAwB;QACpB,IAAIF,KAAK,CAACE,SAAD,CAAT,EAAsB;UAClBF,KAAK,CAACE,SAAD,CAAL,CAAiBxrB,cAAjB,GAAkCurB,cAAlC;QACH,CAFD,MAGK;UACDF,eAAe,CAACG,SAAD,CAAf,GAA6BD,cAA7B;QACH;;QACDD,KAAK,CAACE,SAAD,CAAL,GAAmBD,cAAnB;MACH;;MACDA,cAAc,GAAGA,cAAc,CAACjkE,IAAhC;IACH;EACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmkE,YAAT,CAAsBl8C,SAAtB,EAAiCm8C,aAAa,GAAG,CAAjD,EAAoD7yC,KAApD,EAA2D;EACvD,MAAMpO,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAMivB,eAAe,GAAGqV,gBAAgB,CAACp4C,KAAD,EAAQoM,aAAa,GAAGgG,SAAxB,EAAmC;EAAG;EAAtC,EAAkE,IAAlE,EAAwEsJ,KAAK,IAAI,IAAjF,CAAxC,CAHuD,CAIvD;;EACA,IAAIqnB,eAAe,CAAC1zB,UAAhB,KAA+B,IAAnC,EACI0zB,eAAe,CAAC1zB,UAAhB,GAA6Bk/C,aAA7B,CANmD,CAOvD;;EACA95C,0BAA0B;;EAC1B,IAAI,CAACsuB,eAAe,CAACngC,KAAhB,GAAwB;EAAG;EAA5B,MAA6D;EAAG;EAApE,EAAiG;IAC7F;IACAkgC,eAAe,CAAC9iC,KAAD,EAAQsN,KAAR,EAAey1B,eAAf,CAAf;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyrB,qBAAT,CAA+BxyD,QAA/B,EAAyCisD,EAAzC,EAA6Ch8B,SAA7C,EAAwD;EACpDwiC,sBAAsB,CAACzyD,QAAD,EAAW,EAAX,EAAeisD,EAAf,EAAmB,EAAnB,EAAuBh8B,SAAvB,CAAtB;EACA,OAAOuiC,qBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCzyD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDC,MAAtD,EAA8Dj8B,SAA9D,EAAyE;EACrE,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGzB,cAAc,CAAC16C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBC,MAApB,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DitB,MAA7D,CADhC;EAEH;;EACD,OAAOuG,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgC1yD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DH,MAA9D,EAAsEj8B,SAAtE,EAAiF;EAC7E,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGtB,cAAc,CAAC76C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BH,MAA5B,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEF,MAAjE,CADhC;EAEH;;EACD,OAAOwG,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgC3yD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DE,EAA9D,EAAkEC,EAAlE,EAAsEN,MAAtE,EAA8Ej8B,SAA9E,EAAyF;EACrF,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGnB,cAAc,CAACh7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCN,MAApC,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEG,EAAjE,EAAqEL,MAArE,CADhC;EAEH;;EACD,OAAOyG,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgC5yD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DE,EAA9D,EAAkEC,EAAlE,EAAsEE,EAAtE,EAA0EC,EAA1E,EAA8ET,MAA9E,EAAsFj8B,SAAtF,EAAiG;EAC7F,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGhB,cAAc,CAACn7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CT,MAA5C,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEG,EAAjE,EAAqEG,EAArE,EAAyER,MAAzE,CADhC;EAEH;;EACD,OAAO0G,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgC7yD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DE,EAA9D,EAAkEC,EAAlE,EAAsEE,EAAtE,EAA0EC,EAA1E,EAA8EE,EAA9E,EAAkFC,EAAlF,EAAsFZ,MAAtF,EAA8Fj8B,SAA9F,EAAyG;EACrG,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGb,cAAc,CAACt7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDZ,MAApD,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEG,EAAjE,EAAqEG,EAArE,EAAyEG,EAAzE,EAA6EX,MAA7E,CADhC;EAEH;;EACD,OAAO2G,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgC9yD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DE,EAA9D,EAAkEC,EAAlE,EAAsEE,EAAtE,EAA0EC,EAA1E,EAA8EE,EAA9E,EAAkFC,EAAlF,EAAsFE,EAAtF,EAA0FC,EAA1F,EAA8Ff,MAA9F,EAAsGj8B,SAAtG,EAAiH;EAC7G,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGV,cAAc,CAACz7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4Df,MAA5D,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEG,EAAjE,EAAqEG,EAArE,EAAyEG,EAAzE,EAA6EG,EAA7E,EAAiFd,MAAjF,CADhC;EAEH;;EACD,OAAO4G,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgC/yD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DE,EAA9D,EAAkEC,EAAlE,EAAsEE,EAAtE,EAA0EC,EAA1E,EAA8EE,EAA9E,EAAkFC,EAAlF,EAAsFE,EAAtF,EAA0FC,EAA1F,EAA8FE,EAA9F,EAAkGC,EAAlG,EAAsGlB,MAAtG,EAA8Gj8B,SAA9G,EAAyH;EACrH,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGP,cAAc,CAAC57C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoElB,MAApE,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEG,EAAjE,EAAqEG,EAArE,EAAyEG,EAAzE,EAA6EG,EAA7E,EAAiFG,EAAjF,EAAqFjB,MAArF,CADhC;EAEH;;EACD,OAAO6G,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgChzD,QAAhC,EAA0Ci/B,MAA1C,EAAkDgtB,EAAlD,EAAsDG,EAAtD,EAA0DC,EAA1D,EAA8DE,EAA9D,EAAkEC,EAAlE,EAAsEE,EAAtE,EAA0EC,EAA1E,EAA8EE,EAA9E,EAAkFC,EAAlF,EAAsFE,EAAtF,EAA0FC,EAA1F,EAA8FE,EAA9F,EAAkGC,EAAlG,EAAsGE,EAAtG,EAA0GC,EAA1G,EAA8GrB,MAA9G,EAAsHj8B,SAAtH,EAAiI;EAC7H,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGJ,cAAc,CAAC/7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4ErB,MAA5E,CAAxC;;EACA,IAAIuB,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;IACA36B,SAAS,IACLuuD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAK,CAAlD,EAAqDgmB,MAArD,EAA6DmtB,EAA7D,EAAiEG,EAAjE,EAAqEG,EAArE,EAAyEG,EAAzE,EAA6EG,EAA7E,EAAiFG,EAAjF,EAAqFG,EAArF,EAAyFpB,MAAzF,CADhC;EAEH;;EACD,OAAO8G,sBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCjzD,QAAhC,EAA0CD,MAA1C,EAAkDkwB,SAAlD,EAA6D;EACzD,MAAM3e,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAG3B,cAAc,CAACx6C,KAAD,EAAQvR,MAAR,CAAxC;;EACA,IAAI0tD,iBAAiB,KAAKziB,SAA1B,EAAqC;IACjC,MAAMhnC,KAAK,GAAG8T,QAAQ,EAAtB;IACA,MAAM/T,KAAK,GAAG6X,gBAAgB,EAA9B;IACAkkC,uBAAuB,CAAC97C,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBtR,QAAtB,EAAgCytD,iBAAhC,EAAmDn8C,KAAK,CAAC7B,QAAD,CAAxD,EAAoEwgB,SAApE,EAA+E,KAA/E,CAAvB;;IACA,IAAI36B,SAAJ,EAAe;MACX,MAAM64D,sBAAsB,GAAG,CAACpuD,MAAM,CAAC,CAAD,CAAP,CAA/B,CADW,CACiC;;MAC5C,KAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgE,MAAM,CAACpN,MAA3B,EAAmCoJ,CAAC,IAAI,CAAxC,EAA2C;QACvCoyD,sBAAsB,CAAC77D,IAAvB,CAA4ByN,MAAM,CAAChE,CAAD,CAAlC;MACH;;MACD8nD,4BAA4B,CAAC7/C,KAAK,CAACuI,IAAP,EAAaxI,KAAb,EAAoB/D,QAApB,EAA8BiZ,eAAe,KAAKk1C,sBAAsB,CAACx7D,MAA3C,GAAoD,CAAlF,EAAqF,GAAGw7D,sBAAxF,CAA5B;IACH;EACJ;;EACD,OAAO8E,smEAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+Br5C,KAA/B,EAAsC/V,KAAtC,EAA6CqvD,qBAA7C,EAAoEvgE,KAApE,EAA2EwgE,aAA3E,EAA0FC,cAA1F,EAA0G;EACtGh+D,SAAS,IAAImd,qBAAqB,CAACqF,QAAQ,EAAT,CAAlC;EACA,IAAIy7C,SAAS,GAAGD,cAAc,GAAGvvD,KAAK,CAACuyC,aAAT,GAAyBvyC,KAAK,CAACwyC,aAA7D;EACA,IAAIid,QAAQ,GAAGzgB,oBAAoB,CAACwgB,SAAD,CAAnC;EACA,IAAIE,QAAQ,GAAGrgB,oBAAoB,CAACmgB,SAAD,CAAnC;EACAz5C,KAAK,CAACjnB,KAAD,CAAL,GAAeugE,qBAAf;EACA,IAAIM,sBAAsB,GAAG,KAA7B;EACA,IAAIC,WAAJ;;EACA,IAAIv9D,KAAK,CAACC,OAAN,CAAc+8D,qBAAd,CAAJ,EAA0C;IACtC;IACA,MAAMQ,mBAAmB,GAAGR,qBAA5B;IACAO,WAAW,GAAGC,mBAAmB,CAAC,CAAD,CAAjC,CAHsC,CAGA;IACtC;;IACA,IAAID,WAAW,KAAK,IAAhB,IACA31D,oBAAoB,CAAC41D,mBAAD,EAAsBD,WAAtB,CAApB,GAAyD,CAD7D,EACgE;MAC5D;MACAD,sBAAsB,GAAG,IAAzB;IACH;EACJ,CAVD,MAWK;IACDC,WAAW,GAAGP,qBAAd;EACH;;EACD,IAAIC,aAAJ,EAAmB;IACf;IACA;IACA,MAAMQ,mBAAmB,GAAGJ,QAAQ,KAAK,CAAzC,CAHe,CAIf;IACA;;IACA,IAAII,mBAAJ,EAAyB;MACrB;MACA,MAAMC,YAAY,GAAG/gB,oBAAoB,CAACj5B,KAAK,CAAC05C,QAAQ,GAAG,CAAZ,CAAN,CAAzC;MACA15C,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAL,GAAmBggD,eAAe,CAACihB,YAAD,EAAeN,QAAf,CAAlC,CAHqB,CAIrB;MACA;;MACA,IAAIM,YAAY,KAAK,CAArB,EAAwB;QACpB;QACAh6C,KAAK,CAACg6C,YAAY,GAAG,CAAhB,CAAL,GACIzgB,oBAAoB,CAACv5B,KAAK,CAACg6C,YAAY,GAAG,CAAhB,CAAN,EAA0BjhE,KAA1B,CADxB;MAEH,CAVoB,CAWrB;;;MACAinB,KAAK,CAAC05C,QAAQ,GAAG,CAAZ,CAAL,GAAsBtgB,oBAAoB,CAACp5B,KAAK,CAAC05C,QAAQ,GAAG,CAAZ,CAAN,EAAsB3gE,KAAtB,CAA1C;IACH,CAbD,MAcK;MACDinB,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAL,GAAmBggD,eAAe,CAAC2gB,QAAD,EAAW,CAAX,CAAlC,CADC,CAED;MACA;;MACA,IAAIA,QAAQ,KAAK,CAAjB,EAAoB;QAChB;QACA15C,KAAK,CAAC05C,QAAQ,GAAG,CAAZ,CAAL,GAAsBngB,oBAAoB,CAACv5B,KAAK,CAAC05C,QAAQ,GAAG,CAAZ,CAAN,EAAsB3gE,KAAtB,CAA1C;MACH,CAPA,CAQD;;;MACA2gE,QAAQ,GAAG3gE,KAAX;IACH;EACJ,CA/BD,MAgCK;IACD;IACA;IACAinB,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAL,GAAmBggD,eAAe,CAAC4gB,QAAD,EAAW,CAAX,CAAlC;IACAn+D,SAAS,IACLoF,WAAW,CAAC84D,QAAQ,KAAK,CAAb,IAAkBC,QAAQ,KAAK,CAAhC,EAAmC,KAAnC,EAA0C,6DAA1C,CADf;;IAEA,IAAID,QAAQ,KAAK,CAAjB,EAAoB;MAChBA,QAAQ,GAAG3gE,KAAX;IACH,CAFD,MAGK;MACD;MACAinB,KAAK,CAAC25C,QAAQ,GAAG,CAAZ,CAAL,GAAsBpgB,oBAAoB,CAACv5B,KAAK,CAAC25C,QAAQ,GAAG,CAAZ,CAAN,EAAsB5gE,KAAtB,CAA1C;IACH;;IACD4gE,QAAQ,GAAG5gE,KAAX;EACH,CApEqG,CAqEtG;EACA;;;EACA,IAAI6gE,sBAAJ,EAA4B;IACxB55C,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAL,GAAmBsgD,6BAA6B,CAACr5B,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAN,CAAhD;EACH;;EACDkhE,cAAc,CAACj6C,KAAD,EAAQ65C,WAAR,EAAqB9gE,KAArB,EAA4B,IAA5B,EAAkCygE,cAAlC,CAAd;EACAS,cAAc,CAACj6C,KAAD,EAAQ65C,WAAR,EAAqB9gE,KAArB,EAA4B,KAA5B,EAAmCygE,cAAnC,CAAd;EACAU,8BAA8B,CAACjwD,KAAD,EAAQ4vD,WAAR,EAAqB75C,KAArB,EAA4BjnB,KAA5B,EAAmCygE,cAAnC,CAA9B;EACAC,SAAS,GAAG1gB,eAAe,CAAC2gB,QAAD,EAAWC,QAAX,CAA3B;;EACA,IAAIH,cAAJ,EAAoB;IAChBvvD,KAAK,CAACuyC,aAAN,GAAsBid,SAAtB;EACH,CAFD,MAGK;IACDxvD,KAAK,CAACwyC,aAAN,GAAsBgd,SAAtB;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,8BAAT,CAAwCjwD,KAAxC,EAA+C4vD,WAA/C,EAA4D75C,KAA5D,EAAmEjnB,KAAnE,EAA0EygE,cAA1E,EAA0F;EACtF,MAAMW,QAAQ,GAAGX,cAAc,GAAGvvD,KAAK,CAACsyC,eAAT,GAA2BtyC,KAAK,CAACoyC,cAAhE;;EACA,IAAI8d,QAAQ,IAAI;EAAK;EAAjB,GAAuC,OAAON,WAAP,IAAsB,QAA7D,IACA31D,oBAAoB,CAACi2D,QAAD,EAAWN,WAAX,CAApB,IAA+C,CADnD,EACsD;IAClD;IACA75C,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAL,GAAmB0gD,6BAA6B,CAACz5B,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAN,CAAhD;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkhE,cAAT,CAAwBj6C,KAAxB,EAA+B65C,WAA/B,EAA4C9gE,KAA5C,EAAmDqhE,SAAnD,EAA8DZ,cAA9D,EAA8E;EAC1E,MAAMa,eAAe,GAAGr6C,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAA7B;EACA,MAAMuhE,KAAK,GAAGT,WAAW,KAAK,IAA9B;EACA,IAAIvc,MAAM,GAAG8c,SAAS,GAAGnhB,oBAAoB,CAACohB,eAAD,CAAvB,GAA2C/gB,oBAAoB,CAAC+gB,eAAD,CAArF;EACA,IAAIE,cAAc,GAAG,KAArB,CAJ0E,CAK1E;EACA;EACA;EACA;EACA;;EACA,OAAOjd,MAAM,KAAK,CAAX,KAAiBid,cAAc,KAAK,KAAnB,IAA4BD,KAA7C,CAAP,EAA4D;IACxD9+D,SAAS,IAAIiG,kBAAkB,CAACue,KAAD,EAAQs9B,MAAR,CAA/B;IACA,MAAMkd,qBAAqB,GAAGx6C,KAAK,CAACs9B,MAAD,CAAnC;IACA,MAAMmd,mBAAmB,GAAGz6C,KAAK,CAACs9B,MAAM,GAAG,CAAV,CAAjC;;IACA,IAAIod,cAAc,CAACF,qBAAD,EAAwBX,WAAxB,CAAlB,EAAwD;MACpDU,cAAc,GAAG,IAAjB;MACAv6C,KAAK,CAACs9B,MAAM,GAAG,CAAV,CAAL,GAAoB8c,SAAS,GAAG3gB,6BAA6B,CAACghB,mBAAD,CAAhC,GACzBphB,6BAA6B,CAACohB,mBAAD,CADjC;IAEH;;IACDnd,MAAM,GAAG8c,SAAS,GAAGnhB,oBAAoB,CAACwhB,mBAAD,CAAvB,GACdnhB,oBAAoB,CAACmhB,mBAAD,CADxB;EAEH;;EACD,IAAIF,cAAJ,EAAoB;IAChB;IACAv6C,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAAL,GAAmBqhE,SAAS,GAAG/gB,6BAA6B,CAACghB,eAAD,CAAhC,GACxB5gB,6BAA6B,CAAC4gB,eAAD,CADjC;EAEH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,cAAT,CAAwBC,iBAAxB,EAA2Cd,WAA3C,EAAwD;EACpDr+D,SAAS,IACLsF,cAAc,CAACxE,KAAK,CAACC,OAAN,CAAcs9D,WAAd,CAAD,EAA6B,IAA7B,EAAmC,kDAAnC,CADlB;;EAEA,IAAIc,iBAAiB,KAAK,IAAtB,IAA8B;EAC9B;EACAd,WAAW,IAAI,IAFf,IAEuB;EACvB;EACA,CAACv9D,KAAK,CAACC,OAAN,CAAco+D,iBAAd,IAAmCA,iBAAiB,CAAC,CAAD,CAApD,GAA0DA,iBAA3D,MACId,WALR,CAKoB;EALpB,EAME;IACE,OAAO,IAAP;EACH,CARD,MASK,IAAIv9D,KAAK,CAACC,OAAN,CAAco+D,iBAAd,KAAoC,OAAOd,WAAP,KAAuB,QAA/D,EAAyE;IAC1E;IACA;IACA,OAAO31D,oBAAoB,CAACy2D,iBAAD,EAAoBd,WAApB,CAApB,IACH,CADJ,CAH0E,CAInE;EACV;;EACD,OAAO,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMe,WAAW,GAAG;EAChBC,OAAO,EAAE,CADO;EAEhB7+D,GAAG,EAAE,CAFW;EAGhB8+D,MAAM,EAAE,CAHQ;EAIhBr9D,KAAK,EAAE,CAJS;EAKhBs9D,QAAQ,EAAE;AALM,CAApB;AAOA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BxgE,IAA1B,EAAgC;EAC5B,OAAOA,IAAI,CAACqC,SAAL,CAAe+9D,WAAW,CAAC5+D,GAA3B,EAAgC4+D,WAAW,CAACE,MAA5C,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASG,kBAAT,CAA4BzgE,IAA5B,EAAkC;EAC9B,OAAOA,IAAI,CAACqC,SAAL,CAAe+9D,WAAW,CAACn9D,KAA3B,EAAkCm9D,WAAW,CAACG,QAA9C,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,cAAT,CAAwB1gE,IAAxB,EAA8B;EAC1B2gE,gBAAgB,CAAC3gE,IAAD,CAAhB;EACA,OAAO4gE,kBAAkB,CAAC5gE,IAAD,EAAO6gE,iBAAiB,CAAC7gE,IAAD,EAAO,CAAP,EAAUogE,WAAW,CAACC,OAAtB,CAAxB,CAAzB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,kBAAT,CAA4B5gE,IAA5B,EAAkCzB,KAAlC,EAAyC;EACrC,MAAMwK,GAAG,GAAGq3D,WAAW,CAACC,OAAxB;;EACA,IAAIt3D,GAAG,KAAKxK,KAAZ,EAAmB;IACf,OAAO,CAAC,CAAR;EACH;;EACDA,KAAK,GAAG6hE,WAAW,CAACE,MAAZ,GAAqBQ,iBAAiB,CAAC9gE,IAAD,EAAOogE,WAAW,CAAC5+D,GAAZ,GAAkBjD,KAAzB,EAAgCwK,GAAhC,CAA9C;EACA,OAAO83D,iBAAiB,CAAC7gE,IAAD,EAAOzB,KAAP,EAAcwK,GAAd,CAAxB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASg4D,UAAT,CAAoB/gE,IAApB,EAA0B;EACtB2gE,gBAAgB,CAAC3gE,IAAD,CAAhB;EACA,OAAOghE,cAAc,CAAChhE,IAAD,EAAO6gE,iBAAiB,CAAC7gE,IAAD,EAAO,CAAP,EAAUogE,WAAW,CAACC,OAAtB,CAAxB,CAArB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,cAAT,CAAwBhhE,IAAxB,EAA8BwpB,UAA9B,EAA0C;EACtC,MAAMzgB,GAAG,GAAGq3D,WAAW,CAACC,OAAxB;EACA,IAAI9hE,KAAK,GAAG6hE,WAAW,CAAC5+D,GAAZ,GAAkBq/D,iBAAiB,CAAC7gE,IAAD,EAAOwpB,UAAP,EAAmBzgB,GAAnB,CAA/C;;EACA,IAAIA,GAAG,KAAKxK,KAAZ,EAAmB;IACf;IACA,OAAO,CAAC,CAAR;EACH;;EACDA,KAAK,GAAG6hE,WAAW,CAACE,MAAZ,GAAqBW,eAAe,CAACjhE,IAAD,EAAOzB,KAAP,EAAcwK,GAAd,CAA5C;EACAxK,KAAK,GAAG2iE,gBAAgB,CAAClhE,IAAD,EAAOzB,KAAP,EAAcwK,GAAd,EAAmB;EAAG;EAAtB,CAAxB;EACAxK,KAAK,GAAG6hE,WAAW,CAACn9D,KAAZ,GAAoB49D,iBAAiB,CAAC7gE,IAAD,EAAOzB,KAAP,EAAcwK,GAAd,CAA7C;EACAxK,KAAK,GAAG6hE,WAAW,CAACG,QAAZ,GAAuBY,iBAAiB,CAACnhE,IAAD,EAAOzB,KAAP,EAAcwK,GAAd,CAAhD;EACA,OAAOm4D,gBAAgB,CAAClhE,IAAD,EAAOzB,KAAP,EAAcwK,GAAd,EAAmB;EAAG;EAAtB,CAAvB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS43D,gBAAT,CAA0B3gE,IAA1B,EAAgC;EAC5BogE,WAAW,CAAC5+D,GAAZ,GAAkB,CAAlB;EACA4+D,WAAW,CAACE,MAAZ,GAAqB,CAArB;EACAF,WAAW,CAACn9D,KAAZ,GAAoB,CAApB;EACAm9D,WAAW,CAACG,QAAZ,GAAuB,CAAvB;EACAH,WAAW,CAACC,OAAZ,GAAsBrgE,IAAI,CAAC3B,MAA3B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwiE,iBAAT,CAA2B7gE,IAA3B,EAAiCwpB,UAAjC,EAA6C+G,QAA7C,EAAuD;EACnD,OAAO/G,UAAU,GAAG+G,QAAb,IAAyBvwB,IAAI,CAAC6rB,UAAL,CAAgBrC,UAAhB,KAA+B;EAAG;EAAlE,EAAwF;IACpFA,UAAU;EACb;;EACD,OAAOA,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASs3C,iBAAT,CAA2B9gE,IAA3B,EAAiCwpB,UAAjC,EAA6C+G,QAA7C,EAAuD;EACnD,OAAO/G,UAAU,GAAG+G,QAAb,IAAyBvwB,IAAI,CAAC6rB,UAAL,CAAgBrC,UAAhB,IAA8B;EAAG;EAAjE,EAAuF;IACnFA,UAAU;EACb;;EACD,OAAOA,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASy3C,eAAT,CAAyBjhE,IAAzB,EAA+BwpB,UAA/B,EAA2C+G,QAA3C,EAAqD;EACjD,IAAI6wC,EAAJ;;EACA,OAAO53C,UAAU,GAAG+G,QAAb,KACF,CAAC6wC,EAAE,GAAGphE,IAAI,CAAC6rB,UAAL,CAAgBrC,UAAhB,CAAN,MAAuC;EAAG;EAA1C,GAAiE43C,EAAE,KAAK;EAAG;EAA3E,GACI,CAACA,EAAE,GAAG,CAAC;EAAG;EAAV,KAAwC;EAAG;EAA3C,GAA+D,CAACA,EAAE,GAAG,CAAC;EAAG;EAAV,KAAwC;EAAG;EAD9G,GAEIA,EAAE,IAAI;EAAG;EAAT,GAAgCA,EAAE,IAAI;EAAG;EAH3C,CAAP,EAGyE;IACrE53C,UAAU;EACb;;EACD,OAAOA,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS03C,gBAAT,CAA0BlhE,IAA1B,EAAgCwpB,UAAhC,EAA4C+G,QAA5C,EAAsDnrB,SAAtD,EAAiE;EAC7DokB,UAAU,GAAGq3C,iBAAiB,CAAC7gE,IAAD,EAAOwpB,UAAP,EAAmB+G,QAAnB,CAA9B;;EACA,IAAI/G,UAAU,GAAG+G,QAAjB,EAA2B;IACvB,IAAIvvB,SAAS,IAAIhB,IAAI,CAAC6rB,UAAL,CAAgBrC,UAAhB,MAAgCpkB,SAAjD,EAA4D;MACxDi8D,mBAAmB,CAACrhE,IAAD,EAAOiR,MAAM,CAACqwD,YAAP,CAAoBl8D,SAApB,CAAP,EAAuCokB,UAAvC,CAAnB;IACH;;IACDA,UAAU;EACb;;EACD,OAAOA,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS23C,iBAAT,CAA2BnhE,IAA3B,EAAiCwpB,UAAjC,EAA6C+G,QAA7C,EAAuD;EACnD,IAAIgxC,GAAG,GAAG,CAAC,CAAX,CADmD,CACrC;;EACd,IAAIC,GAAG,GAAG,CAAC,CAAX,CAFmD,CAErC;;EACd,IAAIC,GAAG,GAAG,CAAC,CAAX,CAHmD,CAGrC;;EACd,IAAIh6D,CAAC,GAAG+hB,UAAR;EACA,IAAIk4C,WAAW,GAAGj6D,CAAlB;;EACA,OAAOA,CAAC,GAAG8oB,QAAX,EAAqB;IACjB,MAAM6wC,EAAE,GAAGphE,IAAI,CAAC6rB,UAAL,CAAgBpkB,CAAC,EAAjB,CAAX;;IACA,IAAI25D,EAAE,KAAK;IAAG;IAAd,EAAyC;MACrC,OAAOM,WAAP;IACH,CAFD,MAGK,IAAIN,EAAE,KAAK;IAAG;IAAV,GAAyCA,EAAE,KAAK;IAAG;IAAvD,EAAoF;MACrFM,WAAW,GAAGj6D,CAAC,GAAGk6D,iBAAiB,CAAC3hE,IAAD,EAAOohE,EAAP,EAAW35D,CAAX,EAAc8oB,QAAd,CAAnC;IACH,CAFI,MAGA,IAAI/G,UAAU,KACf/hB,CAAC,GAAG,CADC,IACI;IACTg6D,GAAG,KAAK;IAAG;IAFN,GAGLD,GAAG,KAAK;IAAG;IAHN,GAG0BD,GAAG,KAAK;IAAG;IAHrC,GAGyDH,EAAE,KAAK;IAAG;IAHvE,EAGkG;MACnGM,WAAW,GAAGj6D,CAAC,GAAGk6D,iBAAiB,CAAC3hE,IAAD,EAAO;MAAG;MAAV,EAAsCyH,CAAtC,EAAyC8oB,QAAzC,CAAnC;IACH,CALI,MAMA,IAAI6wC,EAAE,GAAG;IAAG;IAAZ,EAAkC;MACnC;MACAM,WAAW,GAAGj6D,CAAd;IACH;;IACDg6D,GAAG,GAAGD,GAAN;IACAA,GAAG,GAAGD,GAAN;IACAA,GAAG,GAAGH,EAAE,GAAG,CAAC;IAAG;IAAf;EACH;;EACD,OAAOM,WAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2B3hE,IAA3B,EAAiC4hE,aAAjC,EAAgDp4C,UAAhD,EAA4D+G,QAA5D,EAAsE;EAClE,IAAIgxC,GAAG,GAAG,CAAC,CAAX,CADkE,CACpD;;EACd,IAAIhjE,KAAK,GAAGirB,UAAZ;;EACA,OAAOjrB,KAAK,GAAGgyB,QAAf,EAAyB;IACrB,MAAM6wC,EAAE,GAAGphE,IAAI,CAAC6rB,UAAL,CAAgBttB,KAAK,EAArB,CAAX;;IACA,IAAI6iE,EAAE,IAAIQ,aAAN,IAAuBL,GAAG,KAAK;IAAG;IAAtC,EAAiE;MAC7D,OAAOhjE,KAAP;IACH;;IACD,IAAI6iE,EAAE,IAAI;IAAG;IAAT,GAAsCG,GAAG,KAAK;IAAG;IAArD,EAAgF;MAC5E;MACA;MACAA,GAAG,GAAG,CAAN;IACH,CAJD,MAKK;MACDA,GAAG,GAAGH,EAAN;IACH;EACJ;;EACD,MAAMpgE,SAAS,GAAGqgE,mBAAmB,CAACrhE,IAAD,EAAOiR,MAAM,CAACqwD,YAAP,CAAoBM,aAApB,CAAP,EAA2CrxC,QAA3C,CAAtB,GACX,IAAI71B,KAAJ,EADJ;AAEH;;AACD,SAAS2mE,mBAAT,CAA6BrhE,IAA7B,EAAmC6hE,SAAnC,EAA8CtjE,KAA9C,EAAqD;EACjDyC,SAAS,IAAIoF,WAAW,CAAC,OAAOpG,IAAP,KAAgB,QAAjB,EAA2B,IAA3B,EAAiC,sBAAjC,CAAxB;EACA,MAAM4F,UAAU,CAAE,+BAA8BrH,KAAM,cAArC,GAAqDyB,IAAI,CAACqC,SAAL,CAAe,CAAf,EAAkB9D,KAAlB,CAArD,GAAgF,KAAhF,GACbyB,IAAI,CAACqC,SAAL,CAAe9D,KAAf,EAAsBA,KAAK,GAAG,CAA9B,CADa,GACsB,KADtB,GAC8ByB,IAAI,CAACoI,KAAL,CAAW7J,KAAK,GAAG,CAAnB,CAD9B,GAEZ,iBAAgBsjE,SAAU,IAFf,CAAhB;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBrzD,IAArB,EAA2BxL,KAA3B,EAAkC20D,MAAlC,EAA0C;EACtCmK,oBAAoB,CAACtzD,IAAD,EAAOxL,KAAP,EAAc20D,MAAd,EAAsB,KAAtB,CAApB;EACA,OAAOkK,WAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBnuB,SAArB,EAAgC5wC,KAAhC,EAAuC;EACnC8+D,oBAAoB,CAACluB,SAAD,EAAY5wC,KAAZ,EAAmB,IAAnB,EAAyB,IAAzB,CAApB;EACA,OAAO++D,WAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoB9jE,MAApB,EAA4B;EACxB+jE,eAAe,CAACC,qBAAD,EAAwBC,iBAAxB,EAA2CjkE,MAA3C,EAAmD,KAAnD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASikE,iBAAT,CAA2B34D,aAA3B,EAA0CzJ,IAA1C,EAAgD;EAC5C,KAAK,IAAIyH,CAAC,GAAGs5D,UAAU,CAAC/gE,IAAD,CAAvB,EAA+ByH,CAAC,IAAI,CAApC,EAAuCA,CAAC,GAAGu5D,cAAc,CAAChhE,IAAD,EAAOyH,CAAP,CAAzD,EAAoE;IAChE06D,qBAAqB,CAAC14D,aAAD,EAAgB+2D,gBAAgB,CAACxgE,IAAD,CAAhC,EAAwCygE,kBAAkB,CAACzgE,IAAD,CAA1D,CAArB;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqiE,UAAT,CAAoB3zC,OAApB,EAA6B;EACzBwzC,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsC5zC,OAAtC,EAA+C,IAA/C,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4zC,iBAAT,CAA2B74D,aAA3B,EAA0CzJ,IAA1C,EAAgD;EAC5C,KAAK,IAAIyH,CAAC,GAAGi5D,cAAc,CAAC1gE,IAAD,CAA3B,EAAmCyH,CAAC,IAAI,CAAxC,EAA2CA,CAAC,GAAGm5D,kBAAkB,CAAC5gE,IAAD,EAAOyH,CAAP,CAAjE,EAA4E;IACxE+B,gBAAgB,CAACC,aAAD,EAAgB+2D,gBAAgB,CAACxgE,IAAD,CAAhC,EAAwC,IAAxC,CAAhB;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+hE,oBAAT,CAA8BtzD,IAA9B,EAAoCxL,KAApC,EAA2C20D,MAA3C,EAAmD3kB,YAAnD,EAAiE;EAC7D,MAAMj2B,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB,CAF6D,CAG7D;EACA;EACA;;EACA,MAAMoB,YAAY,GAAGG,qBAAqB,CAAC,CAAD,CAA1C;;EACA,IAAIrV,KAAK,CAAC0O,eAAV,EAA2B;IACvBmkD,sBAAsB,CAAC7yD,KAAD,EAAQjB,IAAR,EAAcmW,YAAd,EAA4BquB,YAA5B,CAAtB;EACH;;EACD,IAAIhwC,KAAK,KAAKyzC,SAAV,IAAuBkgB,cAAc,CAAC55C,KAAD,EAAQ4H,YAAR,EAAsB3hB,KAAtB,CAAzC,EAAuE;IACnE,MAAMwM,KAAK,GAAGC,KAAK,CAACuI,IAAN,CAAWmP,gBAAgB,EAA3B,CAAd;IACAo7C,aAAa,CAAC9yD,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBA,KAAK,CAAC7B,QAAD,CAA3B,EAAuC1M,IAAvC,EAA6CuO,KAAK,CAAC4H,YAAY,GAAG,CAAhB,CAAL,GAA0B69C,eAAe,CAACx/D,KAAD,EAAQ20D,MAAR,CAAtF,EAAuG3kB,YAAvG,EAAqHruB,YAArH,CAAb;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASs9C,eAAT,CAAyB14D,gBAAzB,EAA2Ck5D,YAA3C,EAAyDz/D,KAAzD,EAAgEgwC,YAAhE,EAA8E;EAC1E,MAAMvjC,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAMoB,YAAY,GAAGG,qBAAqB,CAAC,CAAD,CAA1C;;EACA,IAAIrV,KAAK,CAAC0O,eAAV,EAA2B;IACvBmkD,sBAAsB,CAAC7yD,KAAD,EAAQ,IAAR,EAAckV,YAAd,EAA4BquB,YAA5B,CAAtB;EACH;;EACD,MAAMj2B,KAAK,GAAGuG,QAAQ,EAAtB;;EACA,IAAItgB,KAAK,KAAKyzC,SAAV,IAAuBkgB,cAAc,CAAC55C,KAAD,EAAQ4H,YAAR,EAAsB3hB,KAAtB,CAAzC,EAAuE;IACnE;IACA;IACA,MAAMwM,KAAK,GAAGC,KAAK,CAACuI,IAAN,CAAWmP,gBAAgB,EAA3B,CAAd;;IACA,IAAIu7C,qBAAqB,CAAClzD,KAAD,EAAQwjC,YAAR,CAArB,IAA8C,CAAC2vB,gBAAgB,CAAClzD,KAAD,EAAQkV,YAAR,CAAnE,EAA0F;MACtF,IAAI5jB,SAAJ,EAAe;QACX;QACA;QACA,MAAMq+D,WAAW,GAAG3vD,KAAK,CAACuI,IAAN,CAAW2M,YAAX,CAApB;QACAxe,WAAW,CAACtE,KAAK,CAACC,OAAN,CAAcs9D,WAAd,IAA6BA,WAAW,CAAC,CAAD,CAAxC,GAA8CA,WAA/C,EAA4D,KAA5D,EAAmE,gEAAnE,CAAX;MACH,CANqF,CAOtF;MACA;MACA;MACA;MACA;MACA;MACA;;;MACA,IAAIwD,YAAY,GAAG5vB,YAAY,GAAGxjC,KAAK,CAACqyC,kBAAT,GAA8BryC,KAAK,CAACmyC,iBAAnE;MACA5gD,SAAS,IAAIiyC,YAAY,KAAK,KAA9B,IAAuC4vB,YAAY,KAAK,IAAxD,IACIz8D,WAAW,CAACy8D,YAAY,CAACtvB,QAAb,CAAsB,GAAtB,CAAD,EAA6B,IAA7B,EAAmC,4CAAnC,CADf;;MAEA,IAAIsvB,YAAY,KAAK,IAArB,EAA2B;QACvB;QACA5/D,KAAK,GAAGX,sBAAsB,CAACugE,YAAD,EAAe5/D,KAAK,GAAGA,KAAH,GAAW,EAA/B,CAA9B;MACH,CApBqF,CAqBtF;MACA;;;MACAs3D,qCAAqC,CAAC7qD,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsB/Z,KAAtB,EAA6BgwC,YAA7B,CAArC;IACH,CAxBD,MAyBK;MACD6vB,gBAAgB,CAACpzD,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsBA,KAAK,CAAC7B,QAAD,CAA3B,EAAuC6B,KAAK,CAAC4H,YAAY,GAAG,CAAhB,CAA5C,EAAgE5H,KAAK,CAAC4H,YAAY,GAAG,CAAhB,CAAL,GAA0Bm+C,sBAAsB,CAACv5D,gBAAD,EAAmBk5D,YAAnB,EAAiCz/D,KAAjC,CAAhH,EAAyJgwC,YAAzJ,EAAuKruB,YAAvK,CAAhB;IACH;EACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASg+C,gBAAT,CAA0BlzD,KAA1B,EAAiCkV,YAAjC,EAA+C;EAC3C;EACA,OAAOA,YAAY,IAAIlV,KAAK,CAACgP,iBAA7B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6jD,sBAAT,CAAgC7yD,KAAhC,EAAuC2vD,WAAvC,EAAoDz6C,YAApD,EAAkEquB,YAAlE,EAAgF;EAC5EjyC,SAAS,IAAImd,qBAAqB,CAACzO,KAAD,CAAlC;EACA,MAAM8V,KAAK,GAAG9V,KAAK,CAACuI,IAApB;;EACA,IAAIuN,KAAK,CAACZ,YAAY,GAAG,CAAhB,CAAL,KAA4B,IAAhC,EAAsC;IAClC;IACA;IACA;IACA;IACA;IACA,MAAMnV,KAAK,GAAG+V,KAAK,CAAC4B,gBAAgB,EAAjB,CAAnB;IACApmB,SAAS,IAAI4F,aAAa,CAAC6I,KAAD,EAAQ,gBAAR,CAA1B;IACA,MAAMuzD,cAAc,GAAGJ,gBAAgB,CAAClzD,KAAD,EAAQkV,YAAR,CAAvC;;IACA,IAAI+9C,qBAAqB,CAAClzD,KAAD,EAAQwjC,YAAR,CAArB,IAA8CosB,WAAW,KAAK,IAA9D,IAAsE,CAAC2D,cAA3E,EAA2F;MACvF;MACA;MACA;MACA;MACA3D,WAAW,GAAG,KAAd;IACH;;IACDA,WAAW,GAAG4D,sBAAsB,CAACz9C,KAAD,EAAQ/V,KAAR,EAAe4vD,WAAf,EAA4BpsB,YAA5B,CAApC;IACA4rB,qBAAqB,CAACr5C,KAAD,EAAQ/V,KAAR,EAAe4vD,WAAf,EAA4Bz6C,YAA5B,EAA0Co+C,cAA1C,EAA0D/vB,YAA1D,CAArB;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgwB,sBAAT,CAAgCz9C,KAAhC,EAAuC/V,KAAvC,EAA8CyzD,UAA9C,EAA0DjwB,YAA1D,EAAwE;EACpE,MAAMkwB,gBAAgB,GAAG59C,sBAAsB,CAACC,KAAD,CAA/C;EACA,IAAIm6C,QAAQ,GAAG1sB,YAAY,GAAGxjC,KAAK,CAACsyC,eAAT,GAA2BtyC,KAAK,CAACoyC,cAA5D;;EACA,IAAIshB,gBAAgB,KAAK,IAAzB,EAA+B;IAC3B;IACA;IACA;IACA;IACA,MAAMC,mCAAmC,GAAG,CAACnwB,YAAY,GAAGxjC,KAAK,CAACuyC,aAAT,GAAyBvyC,KAAK,CAACwyC,aAA5C,MAA+D,CAA3G;;IACA,IAAImhB,mCAAJ,EAAyC;MACrC;MACA;MACA;MACAF,UAAU,GAAGG,4BAA4B,CAAC,IAAD,EAAO79C,KAAP,EAAc/V,KAAd,EAAqByzD,UAArB,EAAiCjwB,YAAjC,CAAzC;MACAiwB,UAAU,GAAGI,wBAAwB,CAACJ,UAAD,EAAazzD,KAAK,CAAC2b,KAAnB,EAA0B6nB,YAA1B,CAArC,CALqC,CAMrC;;MACA0sB,QAAQ,GAAG,IAAX;IACH;EACJ,CAfD,MAgBK;IACD;IACA;IACA,MAAMpe,oBAAoB,GAAG9xC,KAAK,CAAC8xC,oBAAnC;IACA,MAAMgiB,sCAAsC,GAAGhiB,oBAAoB,KAAK,CAAC,CAA1B,IAA+B/7B,KAAK,CAAC+7B,oBAAD,CAAL,KAAgC4hB,gBAA9G;;IACA,IAAII,sCAAJ,EAA4C;MACxCL,UAAU,GACNG,4BAA4B,CAACF,gBAAD,EAAmB39C,KAAnB,EAA0B/V,KAA1B,EAAiCyzD,UAAjC,EAA6CjwB,YAA7C,CADhC;;MAEA,IAAI0sB,QAAQ,KAAK,IAAjB,EAAuB;QACnB;QACA;QACA;QACA;QACA;QACA;QACA,IAAI6D,kBAAkB,GAAGC,0BAA0B,CAACj+C,KAAD,EAAQ/V,KAAR,EAAewjC,YAAf,CAAnD;;QACA,IAAIuwB,kBAAkB,KAAKvoE,SAAvB,IAAoC6G,KAAK,CAACC,OAAN,CAAcyhE,kBAAd,CAAxC,EAA2E;UACvE;UACA;UACA;UACAA,kBAAkB,GAAGH,4BAA4B,CAAC,IAAD,EAAO79C,KAAP,EAAc/V,KAAd,EAAqB+zD,kBAAkB,CAAC,CAAD;UAAI;UAA3C,EAA0EvwB,YAA1E,CAAjD;UACAuwB,kBAAkB,GACdF,wBAAwB,CAACE,kBAAD,EAAqB/zD,KAAK,CAAC2b,KAA3B,EAAkC6nB,YAAlC,CAD5B;UAEAywB,0BAA0B,CAACl+C,KAAD,EAAQ/V,KAAR,EAAewjC,YAAf,EAA6BuwB,kBAA7B,CAA1B;QACH;MACJ,CAjBD,MAkBK;QACD;QACA;QACA;QACA;QACA;QACA7D,QAAQ,GAAGgE,eAAe,CAACn+C,KAAD,EAAQ/V,KAAR,EAAewjC,YAAf,CAA1B;MACH;IACJ;EACJ;;EACD,IAAI0sB,QAAQ,KAAK1kE,SAAjB,EAA4B;IACxBg4C,YAAY,GAAIxjC,KAAK,CAACsyC,eAAN,GAAwB4d,QAA5B,GAAyClwD,KAAK,CAACoyC,cAAN,GAAuB8d,QAA5E;EACH;;EACD,OAAOuD,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,0BAAT,CAAoCj+C,KAApC,EAA2C/V,KAA3C,EAAkDwjC,YAAlD,EAAgE;EAC5D,MAAM0P,QAAQ,GAAG1P,YAAY,GAAGxjC,KAAK,CAACuyC,aAAT,GAAyBvyC,KAAK,CAACwyC,aAA5D;;EACA,IAAInD,oBAAoB,CAAC6D,QAAD,CAApB,KAAmC,CAAvC,EAA0C;IACtC;IACA,OAAO1nD,SAAP;EACH;;EACD,OAAOuqB,KAAK,CAACi5B,oBAAoB,CAACkE,QAAD,CAArB,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+gB,0BAAT,CAAoCl+C,KAApC,EAA2C/V,KAA3C,EAAkDwjC,YAAlD,EAAgEosB,WAAhE,EAA6E;EACzE,MAAM1c,QAAQ,GAAG1P,YAAY,GAAGxjC,KAAK,CAACuyC,aAAT,GAAyBvyC,KAAK,CAACwyC,aAA5D;EACAjhD,SAAS,IACLsF,cAAc,CAACw4C,oBAAoB,CAAC6D,QAAD,CAArB,EAAiC,CAAjC,EAAoC,0DAApC,CADlB;EAEAn9B,KAAK,CAACi5B,oBAAoB,CAACkE,QAAD,CAArB,CAAL,GAAwC0c,WAAxC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsE,eAAT,CAAyBn+C,KAAzB,EAAgC/V,KAAhC,EAAuCwjC,YAAvC,EAAqD;EACjD,IAAI0sB,QAAQ,GAAG1kE,SAAf;EACA,MAAMqtB,YAAY,GAAG7Y,KAAK,CAAC6Y,YAA3B;EACAtnB,SAAS,IACLsF,cAAc,CAACmJ,KAAK,CAAC8xC,oBAAP,EAA6B,CAAC,CAA9B,EAAiC,8GAAjC,CADlB,CAHiD,CAKjD;EACA;;EACA,KAAK,IAAI95C,CAAC,GAAG,IAAIgI,KAAK,CAAC8xC,oBAAvB,EAA6C95C,CAAC,GAAG6gB,YAAjD,EAA+D7gB,CAAC,EAAhE,EAAoE;IAChE,MAAM2jB,KAAK,GAAG5F,KAAK,CAAC/d,CAAD,CAAL,CAASyP,SAAvB;IACAyoD,QAAQ,GAAG2D,wBAAwB,CAAC3D,QAAD,EAAWv0C,KAAX,EAAkB6nB,YAAlB,CAAnC;EACH;;EACD,OAAOqwB,wBAAwB,CAAC3D,QAAD,EAAWlwD,KAAK,CAAC2b,KAAjB,EAAwB6nB,YAAxB,CAA/B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASowB,4BAAT,CAAsCF,gBAAtC,EAAwD39C,KAAxD,EAA+D/V,KAA/D,EAAsEyzD,UAAtE,EAAkFjwB,YAAlF,EAAgG;EAC5F;EACA;EACA,IAAI2wB,gBAAgB,GAAG,IAAvB;EACA,MAAMt7C,YAAY,GAAG7Y,KAAK,CAAC6Y,YAA3B;EACA,IAAIi5B,oBAAoB,GAAG9xC,KAAK,CAAC8xC,oBAAjC;;EACA,IAAIA,oBAAoB,KAAK,CAAC,CAA9B,EAAiC;IAC7BA,oBAAoB,GAAG9xC,KAAK,CAAC4Y,cAA7B;EACH,CAFD,MAGK;IACDk5B,oBAAoB;EACvB;;EACD,OAAOA,oBAAoB,GAAGj5B,YAA9B,EAA4C;IACxCs7C,gBAAgB,GAAGp+C,KAAK,CAAC+7B,oBAAD,CAAxB;IACAvgD,SAAS,IAAI4F,aAAa,CAACg9D,gBAAD,EAAmB,wBAAnB,CAA1B;IACAV,UAAU,GAAGI,wBAAwB,CAACJ,UAAD,EAAaU,gBAAgB,CAAC1sD,SAA9B,EAAyC+7B,YAAzC,CAArC;IACA,IAAI2wB,gBAAgB,KAAKT,gBAAzB,EACI;IACJ5hB,oBAAoB;EACvB;;EACD,IAAI4hB,gBAAgB,KAAK,IAAzB,EAA+B;IAC3B;IACA;IACA;IACA1zD,KAAK,CAAC8xC,oBAAN,GAA6BA,oBAA7B;EACH;;EACD,OAAO2hB,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,wBAAT,CAAkCJ,UAAlC,EAA8C93C,KAA9C,EAAqD6nB,YAArD,EAAmE;EAC/D,MAAM4wB,aAAa,GAAG5wB,YAAY,GAAG;EAAE;EAAL,EAAqC;EAAE;EAAzE;EACA,IAAI6wB,aAAa,GAAG,CAAC;EAAE;EAAvB;;EACA,IAAI14C,KAAK,KAAK,IAAd,EAAoB;IAChB,KAAK,IAAI3jB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2jB,KAAK,CAAC/sB,MAA1B,EAAkCoJ,CAAC,EAAnC,EAAuC;MACnC,MAAMU,IAAI,GAAGijB,KAAK,CAAC3jB,CAAD,CAAlB;;MACA,IAAI,OAAOU,IAAP,KAAgB,QAApB,EAA8B;QAC1B27D,aAAa,GAAG37D,IAAhB;MACH,CAFD,MAGK;QACD,IAAI27D,aAAa,KAAKD,aAAtB,EAAqC;UACjC,IAAI,CAAC/hE,KAAK,CAACC,OAAN,CAAcmhE,UAAd,CAAL,EAAgC;YAC5BA,UAAU,GAAGA,UAAU,KAAKjoE,SAAf,GAA2B,EAA3B,GAAgC,CAAC,EAAD,EAAKioE,UAAL,CAA7C;UACH;;UACD15D,gBAAgB,CAAC05D,UAAD,EAAa/6D,IAAb,EAAmB8qC,YAAY,GAAG,IAAH,GAAU7nB,KAAK,CAAC,EAAE3jB,CAAH,CAA9C,CAAhB;QACH;MACJ;IACJ;EACJ;;EACD,OAAOy7D,UAAU,KAAKjoE,SAAf,GAA2B,IAA3B,GAAkCioE,UAAzC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,sBAAT,CAAgCv5D,gBAAhC,EAAkDk5D,YAAlD,EAAgEz/D,KAAhE,EAAuE;EACnE,IAAIA,KAAK,IAAI;EAAK;EAAd,GAA6CA,KAAK,KAAK,EAA3D,EACI,OAAOuS,WAAP;EACJ,MAAMuuD,kBAAkB,GAAG,EAA3B;EACA,MAAMC,cAAc,GAAGnuC,eAAe,CAAC5yB,KAAD,CAAtC;;EACA,IAAInB,KAAK,CAACC,OAAN,CAAciiE,cAAd,CAAJ,EAAmC;IAC/B,KAAK,IAAIv8D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGu8D,cAAc,CAAC3lE,MAAnC,EAA2CoJ,CAAC,EAA5C,EAAgD;MAC5C+B,gBAAgB,CAACu6D,kBAAD,EAAqBC,cAAc,CAACv8D,CAAD,CAAnC,EAAwC,IAAxC,CAAhB;IACH;EACJ,CAJD,MAKK,IAAI,OAAOu8D,cAAP,KAA0B,QAA9B,EAAwC;IACzC,KAAK,MAAMxiE,GAAX,IAAkBwiE,cAAlB,EAAkC;MAC9B,IAAIA,cAAc,CAACzkE,cAAf,CAA8BiC,GAA9B,CAAJ,EAAwC;QACpCgI,gBAAgB,CAACu6D,kBAAD,EAAqBviE,GAArB,EAA0BwiE,cAAc,CAACxiE,GAAD,CAAxC,CAAhB;MACH;IACJ;EACJ,CANI,MAOA,IAAI,OAAOwiE,cAAP,KAA0B,QAA9B,EAAwC;IACzCtB,YAAY,CAACqB,kBAAD,EAAqBC,cAArB,CAAZ;EACH,CAFI,MAGA;IACDhjE,SAAS,IACL4E,UAAU,CAAC,8BAA8B,OAAOo+D,cAArC,GAAsD,IAAtD,GAA6DA,cAA9D,CADd;EAEH;;EACD,OAAOD,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS5B,qBAAT,CAA+B14D,aAA/B,EAA8CjI,GAA9C,EAAmDyB,KAAnD,EAA0D;EACtDuG,gBAAgB,CAACC,aAAD,EAAgBjI,GAAhB,EAAqBq0B,eAAe,CAAC5yB,KAAD,CAApC,CAAhB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6/D,gBAAT,CAA0BpzD,KAA1B,EAAiCD,KAAjC,EAAwCuN,KAAxC,EAA+C3hB,QAA/C,EAAyD4oE,gBAAzD,EAA2EC,gBAA3E,EAA6FjxB,YAA7F,EAA2GruB,YAA3G,EAAyH;EACrH,IAAIq/C,gBAAgB,KAAKvtB,SAAzB,EAAoC;IAChC;IACAutB,gBAAgB,GAAGzuD,WAAnB;EACH;;EACD,IAAI2uD,QAAQ,GAAG,CAAf;EACA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,MAAM,GAAG,IAAIJ,gBAAgB,CAAC5lE,MAArB,GAA8B4lE,gBAAgB,CAAC,CAAD,CAA9C,GAAoD,IAAjE;EACA,IAAI7pB,MAAM,GAAG,IAAI8pB,gBAAgB,CAAC7lE,MAArB,GAA8B6lE,gBAAgB,CAAC,CAAD,CAA9C,GAAoD,IAAjE;;EACA,OAAOG,MAAM,KAAK,IAAX,IAAmBjqB,MAAM,KAAK,IAArC,EAA2C;IACvCp5C,SAAS,IAAIyF,cAAc,CAAC09D,QAAD,EAAW,GAAX,EAAgB,gCAAhB,CAA3B;IACAnjE,SAAS,IAAIyF,cAAc,CAAC29D,QAAD,EAAW,GAAX,EAAgB,gCAAhB,CAA3B;IACA,MAAMn3C,QAAQ,GAAGk3C,QAAQ,GAAGF,gBAAgB,CAAC5lE,MAA5B,GAAqC4lE,gBAAgB,CAACE,QAAQ,GAAG,CAAZ,CAArD,GAAsElpE,SAAvF;IACA,MAAM4vC,QAAQ,GAAGu5B,QAAQ,GAAGF,gBAAgB,CAAC7lE,MAA5B,GAAqC6lE,gBAAgB,CAACE,QAAQ,GAAG,CAAZ,CAArD,GAAsEnpE,SAAvF;IACA,IAAIqpE,MAAM,GAAG,IAAb;IACA,IAAIn3B,QAAQ,GAAGlyC,SAAf;;IACA,IAAIopE,MAAM,KAAKjqB,MAAf,EAAuB;MACnB;MACA+pB,QAAQ,IAAI,CAAZ;MACAC,QAAQ,IAAI,CAAZ;;MACA,IAAIn3C,QAAQ,KAAK4d,QAAjB,EAA2B;QACvBy5B,MAAM,GAAGlqB,MAAT;QACAjN,QAAQ,GAAGtC,QAAX;MACH;IACJ,CARD,MASK,IAAIuP,MAAM,KAAK,IAAX,IAAmBiqB,MAAM,KAAK,IAAX,IAAmBA,MAAM,GAAGjqB,MAAnD,EAA2D;MAC5D;MACA;MACA;MACA;MACA+pB,QAAQ,IAAI,CAAZ;MACAG,MAAM,GAAGD,MAAT;IACH,CAPI,MAQA;MACD;MACA;MACA;MACArjE,SAAS,IAAI4F,aAAa,CAACwzC,MAAD,EAAS,+BAAT,CAA1B;MACAgqB,QAAQ,IAAI,CAAZ;MACAE,MAAM,GAAGlqB,MAAT;MACAjN,QAAQ,GAAGtC,QAAX;IACH;;IACD,IAAIy5B,MAAM,KAAK,IAAf,EAAqB;MACjB9B,aAAa,CAAC9yD,KAAD,EAAQD,KAAR,EAAeuN,KAAf,EAAsB3hB,QAAtB,EAAgCipE,MAAhC,EAAwCn3B,QAAxC,EAAkD8F,YAAlD,EAAgEruB,YAAhE,CAAb;IACH;;IACDy/C,MAAM,GAAGF,QAAQ,GAAGF,gBAAgB,CAAC5lE,MAA5B,GAAqC4lE,gBAAgB,CAACE,QAAD,CAArD,GAAkE,IAA3E;IACA/pB,MAAM,GAAGgqB,QAAQ,GAAGF,gBAAgB,CAAC7lE,MAA5B,GAAqC6lE,gBAAgB,CAACE,QAAD,CAArD,GAAkE,IAA3E;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS5B,aAAT,CAAuB9yD,KAAvB,EAA8BD,KAA9B,EAAqCuN,KAArC,EAA4C3hB,QAA5C,EAAsDoT,IAAtD,EAA4DxL,KAA5D,EAAmEgwC,YAAnE,EAAiFruB,YAAjF,EAA+F;EAC3F,IAAI,EAAEnV,KAAK,CAAC5R,IAAN,GAAa;EAAE;EAAjB,CAAJ,EAAgD;IAC5C;IACA;IACA;EACH;;EACD,MAAM2nB,KAAK,GAAG9V,KAAK,CAACuI,IAApB;EACA,MAAMssD,MAAM,GAAG/+C,KAAK,CAACZ,YAAY,GAAG,CAAhB,CAApB;EACA,MAAM4/C,mBAAmB,GAAGxlB,6BAA6B,CAACulB,MAAD,CAA7B,GACxBE,gBAAgB,CAACj/C,KAAD,EAAQ/V,KAAR,EAAeuN,KAAf,EAAsBvO,IAAtB,EAA4BqwC,oBAAoB,CAACylB,MAAD,CAAhD,EAA0DtxB,YAA1D,CADQ,GAExBh4C,SAFJ;;EAGA,IAAI,CAACypE,qBAAqB,CAACF,mBAAD,CAA1B,EAAiD;IAC7C;IACA,IAAI,CAACE,qBAAqB,CAACzhE,KAAD,CAA1B,EAAmC;MAC/B;MACA,IAAI07C,6BAA6B,CAAC4lB,MAAD,CAAjC,EAA2C;QACvC;QACAthE,KAAK,GAAGwhE,gBAAgB,CAACj/C,KAAD,EAAQ,IAAR,EAAcxI,KAAd,EAAqBvO,IAArB,EAA2BmW,YAA3B,EAAyCquB,YAAzC,CAAxB;MACH;IACJ;;IACD,MAAMvG,KAAK,GAAGnrB,gBAAgB,CAAC6F,gBAAgB,EAAjB,EAAqBpK,KAArB,CAA9B;IACAg2B,YAAY,CAAC33C,QAAD,EAAW43C,YAAX,EAAyBvG,KAAzB,EAAgCj+B,IAAhC,EAAsCxL,KAAtC,CAAZ;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwhE,gBAAT,CAA0Bj/C,KAA1B,EAAiC/V,KAAjC,EAAwCuN,KAAxC,EAA+CvO,IAA/C,EAAqDlQ,KAArD,EAA4D00C,YAA5D,EAA0E;EACtE;EACA;EACA;EACA;EACA;EACA,MAAM0xB,eAAe,GAAGl1D,KAAK,KAAK,IAAlC;EACA,IAAIxM,KAAK,GAAGhI,SAAZ;;EACA,OAAOsD,KAAK,GAAG,CAAf,EAAkB;IACd,MAAMqmE,MAAM,GAAGp/C,KAAK,CAACjnB,KAAD,CAApB;IACA,MAAMsmE,eAAe,GAAG/iE,KAAK,CAACC,OAAN,CAAc6iE,MAAd,CAAxB,CAFc,CAGd;;IACA,MAAMpjE,GAAG,GAAGqjE,eAAe,GAAGD,MAAM,CAAC,CAAD,CAAT,GAAeA,MAA1C;IACA,MAAME,YAAY,GAAGtjE,GAAG,KAAK,IAA7B;IACA,IAAIujE,iBAAiB,GAAG/nD,KAAK,CAACze,KAAK,GAAG,CAAT,CAA7B;;IACA,IAAIwmE,iBAAiB,KAAKruB,SAA1B,EAAqC;MACjC;MACA;MACA;MACA;MACA;MACA;MACA;MACAquB,iBAAiB,GAAGD,YAAY,GAAGtvD,WAAH,GAAiBva,SAAjD;IACH;;IACD,IAAIskB,YAAY,GAAGulD,YAAY,GAAGn7D,gBAAgB,CAACo7D,iBAAD,EAAoBt2D,IAApB,CAAnB,GAC1BjN,GAAG,KAAKiN,IAAR,GAAes2D,iBAAf,GAAmC9pE,SADxC;;IAEA,IAAI4pE,eAAe,IAAI,CAACH,qBAAqB,CAACnlD,YAAD,CAA7C,EAA6D;MACzDA,YAAY,GAAG5V,gBAAgB,CAACi7D,MAAD,EAASn2D,IAAT,CAA/B;IACH;;IACD,IAAIi2D,qBAAqB,CAACnlD,YAAD,CAAzB,EAAyC;MACrCtc,KAAK,GAAGsc,YAAR;;MACA,IAAIolD,eAAJ,EAAqB;QACjB,OAAO1hE,KAAP;MACH;IACJ;;IACD,MAAMshE,MAAM,GAAG/+C,KAAK,CAACjnB,KAAK,GAAG,CAAT,CAApB;IACAA,KAAK,GAAGomE,eAAe,GAAGlmB,oBAAoB,CAAC8lB,MAAD,CAAvB,GAAkCzlB,oBAAoB,CAACylB,MAAD,CAA7E;EACH;;EACD,IAAI90D,KAAK,KAAK,IAAd,EAAoB;IAChB;IACA;IACA,IAAIkwD,QAAQ,GAAG1sB,YAAY,GAAGxjC,KAAK,CAACsyC,eAAT,GAA2BtyC,KAAK,CAACoyC,cAA5D;;IACA,IAAI8d,QAAQ,IAAI;IAAK;IAArB,EAAwD;MACpD18D,KAAK,GAAG0G,gBAAgB,CAACg2D,QAAD,EAAWlxD,IAAX,CAAxB;IACH;EACJ;;EACD,OAAOxL,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyhE,qBAAT,CAA+BzhE,KAA/B,EAAsC;EAClC;EACA;EACA;EACA;EACA,OAAOA,KAAK,KAAKhI,SAAjB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwnE,eAAT,CAAyBx/D,KAAzB,EAAgC20D,MAAhC,EAAwC;EACpC,IAAI30D,KAAK,IAAI;EAAK;EAAlB,EAAiD,CAC7C;EACH,CAFD,MAGK,IAAI,OAAO20D,MAAP,KAAkB,QAAtB,EAAgC;IACjC30D,KAAK,GAAGA,KAAK,GAAG20D,MAAhB;EACH,CAFI,MAGA,IAAI,OAAO30D,KAAP,KAAiB,QAArB,EAA+B;IAChCA,KAAK,GAAGrB,SAAS,CAACi0B,eAAe,CAAC5yB,KAAD,CAAhB,CAAjB;EACH;;EACD,OAAOA,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0/D,qBAAT,CAA+BlzD,KAA/B,EAAsCwjC,YAAtC,EAAoD;EAChD,OAAO,CAACxjC,KAAK,CAAC6C,KAAN,IAAe2gC,YAAY,GAAG;EAAG;EAAN,EAAuC;EAAG;EAArE,CAAD,MAA2G,CAAlH;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+xB,MAAT,CAAgBzmE,KAAhB,EAAuB0E,KAAK,GAAG,EAA/B,EAAmC;EAC/B,MAAM+Z,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM7T,KAAK,GAAG8T,QAAQ,EAAtB;EACA,MAAM22C,aAAa,GAAG57D,KAAK,GAAGud,aAA9B;EACA9a,SAAS,IACLoF,WAAW,CAACue,eAAe,EAAhB,EAAoBjV,KAAK,CAAC8O,iBAA1B,EAA6C,kDAA7C,CADf;EAEAxd,SAAS,IAAIiG,kBAAkB,CAAC+V,KAAD,EAAQm9C,aAAR,CAA/B;EACA,MAAM1qD,KAAK,GAAGC,KAAK,CAACF,eAAN,GACVs4C,gBAAgB,CAACp4C,KAAD,EAAQyqD,aAAR,EAAuB;EAAE;EAAzB,EAA+Cl3D,KAA/C,EAAsD,IAAtD,CADN,GAEVyM,KAAK,CAACuI,IAAN,CAAWkiD,aAAX,CAFJ;EAGA,MAAM8K,UAAU,GAAGjoD,KAAK,CAACm9C,aAAD,CAAL,GAAuBntB,cAAc,CAAChwB,KAAK,CAAC7B,QAAD,CAAN,EAAkBlY,KAAlB,CAAxD;EACAy0B,WAAW,CAAChoB,KAAD,EAAQsN,KAAR,EAAeioD,UAAf,EAA2Bx1D,KAA3B,CAAX,CAX+B,CAY/B;;EACAwU,eAAe,CAACxU,KAAD,EAAQ,KAAR,CAAf;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASy1D,iBAAT,CAA2BvN,EAA3B,EAA+B;EAC3BwN,kBAAkB,CAAC,EAAD,EAAKxN,EAAL,EAAS,EAAT,CAAlB;EACA,OAAOuN,iBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4Bx6B,MAA5B,EAAoCgtB,EAApC,EAAwCC,MAAxC,EAAgD;EAC5C,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGlC,cAAc,CAAC16C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBC,MAApB,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAOuL,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4Bz6B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDH,MAAhD,EAAwD;EACpD,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAG/B,cAAc,CAAC76C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BH,MAA5B,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAOwL,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B16B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDN,MAAxD,EAAgE;EAC5D,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAG5B,cAAc,CAACh7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCN,MAApC,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAOyL,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B36B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDE,EAAxD,EAA4DC,EAA5D,EAAgET,MAAhE,EAAwE;EACpE,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGzB,cAAc,CAACn7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CT,MAA5C,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAO0L,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B56B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDE,EAAxD,EAA4DC,EAA5D,EAAgEE,EAAhE,EAAoEC,EAApE,EAAwEZ,MAAxE,EAAgF;EAC5E,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGtB,cAAc,CAACt7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDZ,MAApD,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAO2L,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B76B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDE,EAAxD,EAA4DC,EAA5D,EAAgEE,EAAhE,EAAoEC,EAApE,EAAwEE,EAAxE,EAA4EC,EAA5E,EAAgFf,MAAhF,EAAwF;EACpF,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGnB,cAAc,CAACz7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4Df,MAA5D,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAO4L,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B96B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDE,EAAxD,EAA4DC,EAA5D,EAAgEE,EAAhE,EAAoEC,EAApE,EAAwEE,EAAxE,EAA4EC,EAA5E,EAAgFE,EAAhF,EAAoFC,EAApF,EAAwFlB,MAAxF,EAAgG;EAC5F,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGhB,cAAc,CAAC57C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoElB,MAApE,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAO6L,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4B/6B,MAA5B,EAAoCgtB,EAApC,EAAwCG,EAAxC,EAA4CC,EAA5C,EAAgDE,EAAhD,EAAoDC,EAApD,EAAwDE,EAAxD,EAA4DC,EAA5D,EAAgEE,EAAhE,EAAoEC,EAApE,EAAwEE,EAAxE,EAA4EC,EAA5E,EAAgFE,EAAhF,EAAoFC,EAApF,EAAwFE,EAAxF,EAA4FC,EAA5F,EAAgGrB,MAAhG,EAAwG;EACpG,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGb,cAAc,CAAC/7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4ErB,MAA5E,CAAnC;;EACA,IAAIgC,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAO8L,kBAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4Bl6D,MAA5B,EAAoC;EAChC,MAAMuR,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAMq2C,YAAY,GAAGpC,cAAc,CAACx6C,KAAD,EAAQvR,MAAR,CAAnC;;EACA,IAAImuD,YAAY,KAAKljB,SAArB,EAAgC;IAC5BqZ,mBAAmB,CAAC/yC,KAAD,EAAQoK,gBAAgB,EAAxB,EAA4BwyC,YAA5B,CAAnB;EACH;;EACD,OAAO+L,kBAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCj7B,MAAhC,EAAwCgtB,EAAxC,EAA4CC,MAA5C,EAAoD;EAChD,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGzB,cAAc,CAAC16C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBC,MAApB,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0M,sBAAT,CAAgCl7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDH,MAApD,EAA4D;EACxD,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGtB,cAAc,CAAC76C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BH,MAA5B,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2M,sBAAT,CAAgCn7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DN,MAA5D,EAAoE;EAChE,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGnB,cAAc,CAACh7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCN,MAApC,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4M,sBAAT,CAAgCp7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoET,MAApE,EAA4E;EACxE,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGhB,cAAc,CAACn7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CT,MAA5C,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6M,sBAAT,CAAgCr7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4EZ,MAA5E,EAAoF;EAChF,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGb,cAAc,CAACt7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDZ,MAApD,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8M,sBAAT,CAAgCt7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4EE,EAA5E,EAAgFC,EAAhF,EAAoFf,MAApF,EAA4F;EACxF,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGV,cAAc,CAACz7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4Df,MAA5D,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+M,sBAAT,CAAgCv7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4EE,EAA5E,EAAgFC,EAAhF,EAAoFE,EAApF,EAAwFC,EAAxF,EAA4FlB,MAA5F,EAAoG;EAChG,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGP,cAAc,CAAC57C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoElB,MAApE,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgN,sBAAT,CAAgCx7B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4EE,EAA5E,EAAgFC,EAAhF,EAAoFE,EAApF,EAAwFC,EAAxF,EAA4FE,EAA5F,EAAgGC,EAAhG,EAAoGrB,MAApG,EAA4G;EACxG,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGJ,cAAc,CAAC/7C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BE,EAA5B,EAAgCC,EAAhC,EAAoCE,EAApC,EAAwCC,EAAxC,EAA4CE,EAA5C,EAAgDC,EAAhD,EAAoDE,EAApD,EAAwDC,EAAxD,EAA4DE,EAA5D,EAAgEC,EAAhE,EAAoEE,EAApE,EAAwEC,EAAxE,EAA4ErB,MAA5E,CAAxC;EACAsK,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiN,sBAAT,CAAgC36D,MAAhC,EAAwC;EACpC,MAAMuR,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAG3B,cAAc,CAACx6C,KAAD,EAAQvR,MAAR,CAAxC;EACAy2D,eAAe,CAAC14D,gBAAD,EAAmB84D,iBAAnB,EAAsCnJ,iBAAtC,EAAyD,IAAzD,CAAf;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkN,sBAAT,CAAgC17B,MAAhC,EAAwCgtB,EAAxC,EAA4CC,MAA5C,EAAoD;EAChD,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGzB,cAAc,CAAC16C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBC,MAApB,CAAxC;EACAqK,UAAU,CAAC9I,iBAAD,CAAV;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmN,sBAAT,CAAgC37B,MAAhC,EAAwCgtB,EAAxC,EAA4CG,EAA5C,EAAgDC,EAAhD,EAAoDH,MAApD,EAA4D;EACxD,MAAM56C,KAAK,GAAGuG,QAAQ,EAAtB;EACA,MAAM41C,iBAAiB,GAAGtB,cAAc,CAAC76C,KAAD,EAAQ2tB,MAAR,EAAgBgtB,EAAhB,EAAoBG,EAApB,EAAwBC,EAAxB,EAA4BH,MAA5B,CAAxC;EACAqK,UAAU,CAAC9I,iBAAD,CAAV;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoN,sBAAT,CAAgC57B,MAAhC,EAAwCgtB,EAAxC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"},"metadata":{},"sourceType":"module"}